// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/carlocayos/go-cod/v2/api/models"
)

// NewRegisterDeviceParams creates a new RegisterDeviceParams object
// with the default values initialized.
func NewRegisterDeviceParams() *RegisterDeviceParams {
	var ()
	return &RegisterDeviceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterDeviceParamsWithTimeout creates a new RegisterDeviceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterDeviceParamsWithTimeout(timeout time.Duration) *RegisterDeviceParams {
	var ()
	return &RegisterDeviceParams{

		timeout: timeout,
	}
}

// NewRegisterDeviceParamsWithContext creates a new RegisterDeviceParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterDeviceParamsWithContext(ctx context.Context) *RegisterDeviceParams {
	var ()
	return &RegisterDeviceParams{

		Context: ctx,
	}
}

// NewRegisterDeviceParamsWithHTTPClient creates a new RegisterDeviceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterDeviceParamsWithHTTPClient(client *http.Client) *RegisterDeviceParams {
	var ()
	return &RegisterDeviceParams{
		HTTPClient: client,
	}
}

/*RegisterDeviceParams contains all the parameters to send to the API endpoint
for the register device operation typically these are written to a http.Request
*/
type RegisterDeviceParams struct {

	/*RegisterDeviceRequest
	  Body should contain the unique device id

	*/
	RegisterDeviceRequest *models.RegisterDeviceRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register device params
func (o *RegisterDeviceParams) WithTimeout(timeout time.Duration) *RegisterDeviceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register device params
func (o *RegisterDeviceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register device params
func (o *RegisterDeviceParams) WithContext(ctx context.Context) *RegisterDeviceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register device params
func (o *RegisterDeviceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register device params
func (o *RegisterDeviceParams) WithHTTPClient(client *http.Client) *RegisterDeviceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register device params
func (o *RegisterDeviceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegisterDeviceRequest adds the registerDeviceRequest to the register device params
func (o *RegisterDeviceParams) WithRegisterDeviceRequest(registerDeviceRequest *models.RegisterDeviceRequest) *RegisterDeviceParams {
	o.SetRegisterDeviceRequest(registerDeviceRequest)
	return o
}

// SetRegisterDeviceRequest adds the registerDeviceRequest to the register device params
func (o *RegisterDeviceParams) SetRegisterDeviceRequest(registerDeviceRequest *models.RegisterDeviceRequest) {
	o.RegisterDeviceRequest = registerDeviceRequest
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterDeviceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RegisterDeviceRequest != nil {
		if err := r.SetBodyParam(o.RegisterDeviceRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
