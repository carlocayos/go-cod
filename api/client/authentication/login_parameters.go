// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/carlocayos/go-cod/v2/api/models"
)

// NewLoginParams creates a new LoginParams object
// with the default values initialized.
func NewLoginParams() *LoginParams {
	var ()
	return &LoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoginParamsWithTimeout creates a new LoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginParamsWithTimeout(timeout time.Duration) *LoginParams {
	var ()
	return &LoginParams{

		timeout: timeout,
	}
}

// NewLoginParamsWithContext creates a new LoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoginParamsWithContext(ctx context.Context) *LoginParams {
	var ()
	return &LoginParams{

		Context: ctx,
	}
}

// NewLoginParamsWithHTTPClient creates a new LoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoginParamsWithHTTPClient(client *http.Client) *LoginParams {
	var ()
	return &LoginParams{
		HTTPClient: client,
	}
}

/*LoginParams contains all the parameters to send to the API endpoint
for the login operation typically these are written to a http.Request
*/
type LoginParams struct {

	/*Authorization
	  Security token from authHeader field in the Register Device response

	*/
	Authorization string
	/*LoginRequest
	  Login Request Body

	*/
	LoginRequest *models.LoginRequest
	/*XCodDeviceID
	  Device ID

	*/
	XCodDeviceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the login params
func (o *LoginParams) WithTimeout(timeout time.Duration) *LoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login params
func (o *LoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the login params
func (o *LoginParams) WithContext(ctx context.Context) *LoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login params
func (o *LoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login params
func (o *LoginParams) WithHTTPClient(client *http.Client) *LoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login params
func (o *LoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the login params
func (o *LoginParams) WithAuthorization(authorization string) *LoginParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the login params
func (o *LoginParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithLoginRequest adds the loginRequest to the login params
func (o *LoginParams) WithLoginRequest(loginRequest *models.LoginRequest) *LoginParams {
	o.SetLoginRequest(loginRequest)
	return o
}

// SetLoginRequest adds the loginRequest to the login params
func (o *LoginParams) SetLoginRequest(loginRequest *models.LoginRequest) {
	o.LoginRequest = loginRequest
}

// WithXCodDeviceID adds the xCodDeviceID to the login params
func (o *LoginParams) WithXCodDeviceID(xCodDeviceID string) *LoginParams {
	o.SetXCodDeviceID(xCodDeviceID)
	return o
}

// SetXCodDeviceID adds the xCodDeviceId to the login params
func (o *LoginParams) SetXCodDeviceID(xCodDeviceID string) {
	o.XCodDeviceID = xCodDeviceID
}

// WriteToRequest writes these params to a swagger request
func (o *LoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.LoginRequest != nil {
		if err := r.SetBodyParam(o.LoginRequest); err != nil {
			return err
		}
	}

	// header param x_cod_device_id
	if err := r.SetHeaderParam("x_cod_device_id", o.XCodDeviceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
