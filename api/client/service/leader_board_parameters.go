// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLeaderBoardParams creates a new LeaderBoardParams object
// with the default values initialized.
func NewLeaderBoardParams() *LeaderBoardParams {
	var ()
	return &LeaderBoardParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLeaderBoardParamsWithTimeout creates a new LeaderBoardParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLeaderBoardParamsWithTimeout(timeout time.Duration) *LeaderBoardParams {
	var ()
	return &LeaderBoardParams{

		timeout: timeout,
	}
}

// NewLeaderBoardParamsWithContext creates a new LeaderBoardParams object
// with the default values initialized, and the ability to set a context for a request
func NewLeaderBoardParamsWithContext(ctx context.Context) *LeaderBoardParams {
	var ()
	return &LeaderBoardParams{

		Context: ctx,
	}
}

// NewLeaderBoardParamsWithHTTPClient creates a new LeaderBoardParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLeaderBoardParamsWithHTTPClient(client *http.Client) *LeaderBoardParams {
	var ()
	return &LeaderBoardParams{
		HTTPClient: client,
	}
}

/*LeaderBoardParams contains all the parameters to send to the API endpoint
for the leader board operation typically these are written to a http.Request
*/
type LeaderBoardParams struct {

	/*Page
	  Leaderboard page number

	*/
	Page int64
	/*Platform
	  Game platform

	*/
	Platform string
	/*Title
	  Game title

	*/
	Title string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the leader board params
func (o *LeaderBoardParams) WithTimeout(timeout time.Duration) *LeaderBoardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the leader board params
func (o *LeaderBoardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the leader board params
func (o *LeaderBoardParams) WithContext(ctx context.Context) *LeaderBoardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the leader board params
func (o *LeaderBoardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the leader board params
func (o *LeaderBoardParams) WithHTTPClient(client *http.Client) *LeaderBoardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the leader board params
func (o *LeaderBoardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the leader board params
func (o *LeaderBoardParams) WithPage(page int64) *LeaderBoardParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the leader board params
func (o *LeaderBoardParams) SetPage(page int64) {
	o.Page = page
}

// WithPlatform adds the platform to the leader board params
func (o *LeaderBoardParams) WithPlatform(platform string) *LeaderBoardParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the leader board params
func (o *LeaderBoardParams) SetPlatform(platform string) {
	o.Platform = platform
}

// WithTitle adds the title to the leader board params
func (o *LeaderBoardParams) WithTitle(title string) *LeaderBoardParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the leader board params
func (o *LeaderBoardParams) SetTitle(title string) {
	o.Title = title
}

// WriteToRequest writes these params to a swagger request
func (o *LeaderBoardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param page
	if err := r.SetPathParam("page", swag.FormatInt64(o.Page)); err != nil {
		return err
	}

	// path param platform
	if err := r.SetPathParam("platform", o.Platform); err != nil {
		return err
	}

	// path param title
	if err := r.SetPathParam("title", o.Title); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
