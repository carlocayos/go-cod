// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBattlePassLootParams creates a new BattlePassLootParams object
// with the default values initialized.
func NewBattlePassLootParams() *BattlePassLootParams {
	var ()
	return &BattlePassLootParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBattlePassLootParamsWithTimeout creates a new BattlePassLootParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBattlePassLootParamsWithTimeout(timeout time.Duration) *BattlePassLootParams {
	var ()
	return &BattlePassLootParams{

		timeout: timeout,
	}
}

// NewBattlePassLootParamsWithContext creates a new BattlePassLootParams object
// with the default values initialized, and the ability to set a context for a request
func NewBattlePassLootParamsWithContext(ctx context.Context) *BattlePassLootParams {
	var ()
	return &BattlePassLootParams{

		Context: ctx,
	}
}

// NewBattlePassLootParamsWithHTTPClient creates a new BattlePassLootParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBattlePassLootParamsWithHTTPClient(client *http.Client) *BattlePassLootParams {
	var ()
	return &BattlePassLootParams{
		HTTPClient: client,
	}
}

/*BattlePassLootParams contains all the parameters to send to the API endpoint
for the battle pass loot operation typically these are written to a http.Request
*/
type BattlePassLootParams struct {

	/*Platform
	  Game platform

	*/
	Platform string
	/*Season
	  Game Type

	*/
	Season int64
	/*Title
	  Game title

	*/
	Title string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the battle pass loot params
func (o *BattlePassLootParams) WithTimeout(timeout time.Duration) *BattlePassLootParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the battle pass loot params
func (o *BattlePassLootParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the battle pass loot params
func (o *BattlePassLootParams) WithContext(ctx context.Context) *BattlePassLootParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the battle pass loot params
func (o *BattlePassLootParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the battle pass loot params
func (o *BattlePassLootParams) WithHTTPClient(client *http.Client) *BattlePassLootParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the battle pass loot params
func (o *BattlePassLootParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPlatform adds the platform to the battle pass loot params
func (o *BattlePassLootParams) WithPlatform(platform string) *BattlePassLootParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the battle pass loot params
func (o *BattlePassLootParams) SetPlatform(platform string) {
	o.Platform = platform
}

// WithSeason adds the season to the battle pass loot params
func (o *BattlePassLootParams) WithSeason(season int64) *BattlePassLootParams {
	o.SetSeason(season)
	return o
}

// SetSeason adds the season to the battle pass loot params
func (o *BattlePassLootParams) SetSeason(season int64) {
	o.Season = season
}

// WithTitle adds the title to the battle pass loot params
func (o *BattlePassLootParams) WithTitle(title string) *BattlePassLootParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the battle pass loot params
func (o *BattlePassLootParams) SetTitle(title string) {
	o.Title = title
}

// WriteToRequest writes these params to a swagger request
func (o *BattlePassLootParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param platform
	if err := r.SetPathParam("platform", o.Platform); err != nil {
		return err
	}

	// path param season
	if err := r.SetPathParam("season", swag.FormatInt64(o.Season)); err != nil {
		return err
	}

	// path param title
	if err := r.SetPathParam("title", o.Title); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
