// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BattlePassLoot(params *BattlePassLootParams) (*BattlePassLootOK, error)

	CodPoints(params *CodPointsParams) (*CodPointsOK, error)

	FriendStats(params *FriendStatsParams) (*FriendStatsOK, error)

	FullMatchInfo(params *FullMatchInfoParams) (*FullMatchInfoOK, error)

	GamerLoot(params *GamerLootParams) (*GamerLootOK, error)

	GamerMatchDetails(params *GamerMatchDetailsParams) (*GamerMatchDetailsOK, error)

	GamerMatchList(params *GamerMatchListParams) (*GamerMatchListOK, error)

	GamerStats(params *GamerStatsParams) (*GamerStatsOK, error)

	LeaderBoard(params *LeaderBoardParams) (*LeaderBoardOK, error)

	Loadout(params *LoadoutParams) (*LoadoutOK, error)

	MapList(params *MapListParams) (*MapListOK, error)

	MatchAnalysis(params *MatchAnalysisParams) (*MatchAnalysisOK, error)

	Purchasable(params *PurchasableParams) (*PurchasableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BattlePassLoot battles pass loot

  Returns the Battle Pass season loot information
*/
func (a *Client) BattlePassLoot(params *BattlePassLootParams) (*BattlePassLootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBattlePassLootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "battlePassLoot",
		Method:             "GET",
		PathPattern:        "/loot/title/{title}/platform/{platform}/list/loot_season_{season}/en",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BattlePassLootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BattlePassLootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for battlePassLoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CodPoints gets call of duty points

  Returns Call of Duty points (Authentication required)
*/
func (a *Client) CodPoints(params *CodPointsParams) (*CodPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCodPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "codPoints",
		Method:             "GET",
		PathPattern:        "/inventory/v1/title/{title}/platform/{platform}/{lookupType}/{gamertag}/currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CodPointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CodPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for codPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FriendStats gets friend stats

  Returns Friend stats (Authentication required)
*/
func (a *Client) FriendStats(params *FriendStatsParams) (*FriendStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFriendStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "friendStats",
		Method:             "GET",
		PathPattern:        "/stats/cod/v1/title/{title}/platform/{platform}/{lookupType}/{gamertag}/profile/friends/type/{gameType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FriendStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FriendStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for friendStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FullMatchInfo fulls match info

  Returns the full match information
*/
func (a *Client) FullMatchInfo(params *FullMatchInfoParams) (*FullMatchInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFullMatchInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fullMatchInfo",
		Method:             "GET",
		PathPattern:        "/crm/cod/v2/title/{title}/platform/{platform}/fullMatch/{gameType}/{matchId}/en",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FullMatchInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FullMatchInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fullMatchInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GamerLoot gets gamer loot

  Returns Gamer Loot information (Authentication required)
*/
func (a *Client) GamerLoot(params *GamerLootParams) (*GamerLootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGamerLootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "gamerLoot",
		Method:             "GET",
		PathPattern:        "/loot/title/{title}/platform/{platform}/{lookupType}/{gamertag}/status/en",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GamerLootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GamerLootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gamerLoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GamerMatchDetails gets gamer match details

  Returns the Gamer match details (Authentication required)
*/
func (a *Client) GamerMatchDetails(params *GamerMatchDetailsParams) (*GamerMatchDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGamerMatchDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "gamerMatchDetails",
		Method:             "GET",
		PathPattern:        "/crm/cod/v2/title/{title}/platform/{platform}/{lookupType}/{gamertag}/matches/{gameType}/start/{start}/end/{end}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GamerMatchDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GamerMatchDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gamerMatchDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GamerMatchList gets gamer match list

  Returns the gamer list of matches (Authentication required)
*/
func (a *Client) GamerMatchList(params *GamerMatchListParams) (*GamerMatchListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGamerMatchListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "gamerMatchList",
		Method:             "GET",
		PathPattern:        "/crm/cod/v2/title/{title}/platform/{platform}/{lookupType}/{gamertag}/matches/{gameType}/start/{start}/end/{end}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GamerMatchListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GamerMatchListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gamerMatchList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GamerStats gets gamer stats

  Returns the gamer stats profile (Authentication required)
*/
func (a *Client) GamerStats(params *GamerStatsParams) (*GamerStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGamerStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "gamerStats",
		Method:             "GET",
		PathPattern:        "/stats/cod/v1/title/{title}/platform/{platform}/{lookupType}/{gamertag}/profile/type/{gameType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GamerStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GamerStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gamerStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LeaderBoard gets leader board

  Returns the leader board
*/
func (a *Client) LeaderBoard(params *LeaderBoardParams) (*LeaderBoardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLeaderBoardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "leaderBoard",
		Method:             "GET",
		PathPattern:        "/leaderboards/v2/title/{title}/platform/{platform}/time/alltime/type/core/mode/career/page/{page}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LeaderBoardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LeaderBoardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for leaderBoard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Loadout gets loadout info

  Returns loadout information
*/
func (a *Client) Loadout(params *LoadoutParams) (*LoadoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadout",
		Method:             "GET",
		PathPattern:        "/loadouts/v4/title/{title}/items/mode/{gameType}/en",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoadoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for loadout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MapList maps list

  Returns all map information
*/
func (a *Client) MapList(params *MapListParams) (*MapListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMapListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mapList",
		Method:             "GET",
		PathPattern:        "/ce/v1/title/{title}/platform/{platform}/gameType/{gameType}/communityMapData/availability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MapListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MapListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mapList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MatchAnalysis matches analysis

  Returns match analysis (Authentication required)
*/
func (a *Client) MatchAnalysis(params *MatchAnalysisParams) (*MatchAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchAnalysisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "matchAnalysis",
		Method:             "GET",
		PathPattern:        "/ce/v2/title/{title}/platform/{platform}/gametype/all/{lookupType}/{gamertag}/summary/match_analysis/contentType/full/end/{end}/matchAnalysis/mobile/en",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MatchAnalysisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for matchAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Purchasable purchasables

  Returns purchasable items
*/
func (a *Client) Purchasable(params *PurchasableParams) (*PurchasableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchasableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "purchasable",
		Method:             "GET",
		PathPattern:        "/inventory/v1/title/{title}/platform/{platform}/purchasable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PurchasableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchasableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for purchasable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
