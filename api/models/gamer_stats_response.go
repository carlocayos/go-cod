// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GamerStatsResponse gamer stats response
//
// swagger:model gamerStatsResponse
type GamerStatsResponse struct {

	// data
	Data *GamerStatsResponseData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// gamer stats response additional properties
	GamerStatsResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data *GamerStatsResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data *GamerStatsResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response
func (m *GamerStatsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponse) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseData gamer stats response data
//
// swagger:model GamerStatsResponseData
type GamerStatsResponseData struct {

	// engagement
	Engagement interface{} `json:"engagement,omitempty"`

	// level
	Level float64 `json:"level,omitempty"`

	// level xp gained
	LevelXpGained float64 `json:"levelXpGained,omitempty"`

	// level xp remainder
	LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

	// lifetime
	Lifetime *GamerStatsResponseDataLifetime `json:"lifetime,omitempty"`

	// max level
	MaxLevel float64 `json:"maxLevel,omitempty"`

	// max prestige
	MaxPrestige float64 `json:"maxPrestige,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// p
	P float64 `json:"p,omitempty"`

	// paragon Id
	ParagonID float64 `json:"paragonId,omitempty"`

	// paragon rank
	ParagonRank float64 `json:"paragonRank,omitempty"`

	// platform
	Platform interface{} `json:"platform,omitempty"`

	// prestige
	Prestige float64 `json:"prestige,omitempty"`

	// prestige Id
	PrestigeID float64 `json:"prestigeId,omitempty"`

	// s
	S float64 `json:"s,omitempty"`

	// title
	Title interface{} `json:"title,omitempty"`

	// total xp
	TotalXp float64 `json:"totalXp,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// weekly
	Weekly *GamerStatsResponseDataWeekly `json:"weekly,omitempty"`

	// gamer stats response data additional properties
	GamerStatsResponseDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// engagement
		Engagement interface{} `json:"engagement,omitempty"`

		// level
		Level float64 `json:"level,omitempty"`

		// level xp gained
		LevelXpGained float64 `json:"levelXpGained,omitempty"`

		// level xp remainder
		LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

		// lifetime
		Lifetime *GamerStatsResponseDataLifetime `json:"lifetime,omitempty"`

		// max level
		MaxLevel float64 `json:"maxLevel,omitempty"`

		// max prestige
		MaxPrestige float64 `json:"maxPrestige,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// p
		P float64 `json:"p,omitempty"`

		// paragon Id
		ParagonID float64 `json:"paragonId,omitempty"`

		// paragon rank
		ParagonRank float64 `json:"paragonRank,omitempty"`

		// platform
		Platform interface{} `json:"platform,omitempty"`

		// prestige
		Prestige float64 `json:"prestige,omitempty"`

		// prestige Id
		PrestigeID float64 `json:"prestigeId,omitempty"`

		// s
		S float64 `json:"s,omitempty"`

		// title
		Title interface{} `json:"title,omitempty"`

		// total xp
		TotalXp float64 `json:"totalXp,omitempty"`

		// type
		Type string `json:"type,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// weekly
		Weekly *GamerStatsResponseDataWeekly `json:"weekly,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseData

	rcv.Engagement = stage1.Engagement
	rcv.Level = stage1.Level
	rcv.LevelXpGained = stage1.LevelXpGained
	rcv.LevelXpRemainder = stage1.LevelXpRemainder
	rcv.Lifetime = stage1.Lifetime
	rcv.MaxLevel = stage1.MaxLevel
	rcv.MaxPrestige = stage1.MaxPrestige
	rcv.Message = stage1.Message
	rcv.P = stage1.P
	rcv.ParagonID = stage1.ParagonID
	rcv.ParagonRank = stage1.ParagonRank
	rcv.Platform = stage1.Platform
	rcv.Prestige = stage1.Prestige
	rcv.PrestigeID = stage1.PrestigeID
	rcv.S = stage1.S
	rcv.Title = stage1.Title
	rcv.TotalXp = stage1.TotalXp
	rcv.Type = stage1.Type
	rcv.Username = stage1.Username
	rcv.Weekly = stage1.Weekly
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "engagement")
	delete(stage2, "level")
	delete(stage2, "levelXpGained")
	delete(stage2, "levelXpRemainder")
	delete(stage2, "lifetime")
	delete(stage2, "maxLevel")
	delete(stage2, "maxPrestige")
	delete(stage2, "message")
	delete(stage2, "p")
	delete(stage2, "paragonId")
	delete(stage2, "paragonRank")
	delete(stage2, "platform")
	delete(stage2, "prestige")
	delete(stage2, "prestigeId")
	delete(stage2, "s")
	delete(stage2, "title")
	delete(stage2, "totalXp")
	delete(stage2, "type")
	delete(stage2, "username")
	delete(stage2, "weekly")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// engagement
		Engagement interface{} `json:"engagement,omitempty"`

		// level
		Level float64 `json:"level,omitempty"`

		// level xp gained
		LevelXpGained float64 `json:"levelXpGained,omitempty"`

		// level xp remainder
		LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

		// lifetime
		Lifetime *GamerStatsResponseDataLifetime `json:"lifetime,omitempty"`

		// max level
		MaxLevel float64 `json:"maxLevel,omitempty"`

		// max prestige
		MaxPrestige float64 `json:"maxPrestige,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// p
		P float64 `json:"p,omitempty"`

		// paragon Id
		ParagonID float64 `json:"paragonId,omitempty"`

		// paragon rank
		ParagonRank float64 `json:"paragonRank,omitempty"`

		// platform
		Platform interface{} `json:"platform,omitempty"`

		// prestige
		Prestige float64 `json:"prestige,omitempty"`

		// prestige Id
		PrestigeID float64 `json:"prestigeId,omitempty"`

		// s
		S float64 `json:"s,omitempty"`

		// title
		Title interface{} `json:"title,omitempty"`

		// total xp
		TotalXp float64 `json:"totalXp,omitempty"`

		// type
		Type string `json:"type,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// weekly
		Weekly *GamerStatsResponseDataWeekly `json:"weekly,omitempty"`
	}

	stage1.Engagement = m.Engagement
	stage1.Level = m.Level
	stage1.LevelXpGained = m.LevelXpGained
	stage1.LevelXpRemainder = m.LevelXpRemainder
	stage1.Lifetime = m.Lifetime
	stage1.MaxLevel = m.MaxLevel
	stage1.MaxPrestige = m.MaxPrestige
	stage1.Message = m.Message
	stage1.P = m.P
	stage1.ParagonID = m.ParagonID
	stage1.ParagonRank = m.ParagonRank
	stage1.Platform = m.Platform
	stage1.Prestige = m.Prestige
	stage1.PrestigeID = m.PrestigeID
	stage1.S = m.S
	stage1.Title = m.Title
	stage1.TotalXp = m.TotalXp
	stage1.Type = m.Type
	stage1.Username = m.Username
	stage1.Weekly = m.Weekly

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data
func (m *GamerStatsResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseData) validateLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifetime) { // not required
		return nil
	}

	if m.Lifetime != nil {
		if err := m.Lifetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseData) validateWeekly(formats strfmt.Registry) error {

	if swag.IsZero(m.Weekly) { // not required
		return nil
	}

	if m.Weekly != nil {
		if err := m.Weekly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "weekly")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetime gamer stats response data lifetime
//
// swagger:model GamerStatsResponseDataLifetime
type GamerStatsResponseDataLifetime struct {

	// all
	All *GamerStatsResponseDataLifetimeAll `json:"all,omitempty"`

	// map
	Map interface{} `json:"map,omitempty"`

	// mode
	Mode interface{} `json:"mode,omitempty"`

	// gamer stats response data lifetime additional properties
	GamerStatsResponseDataLifetimeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetime) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// all
		All *GamerStatsResponseDataLifetimeAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetime

	rcv.All = stage1.All
	rcv.Map = stage1.Map
	rcv.Mode = stage1.Mode
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "all")
	delete(stage2, "map")
	delete(stage2, "mode")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetime) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// all
		All *GamerStatsResponseDataLifetimeAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}

	stage1.All = m.All
	stage1.Map = m.Map
	stage1.Mode = m.Mode

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime
func (m *GamerStatsResponseDataLifetime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetime) validateAll(formats strfmt.Registry) error {

	if swag.IsZero(m.All) { // not required
		return nil
	}

	if m.All != nil {
		if err := m.All.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "all")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetime) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeAll gamer stats response data lifetime all
//
// swagger:model GamerStatsResponseDataLifetimeAll
type GamerStatsResponseDataLifetimeAll struct {

	// properties
	Properties interface{} `json:"properties,omitempty"`

	// gamer stats response data lifetime all additional properties
	GamerStatsResponseDataLifetimeAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime all
func (m *GamerStatsResponseDataLifetimeAll) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAll) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataWeekly gamer stats response data weekly
//
// swagger:model GamerStatsResponseDataWeekly
type GamerStatsResponseDataWeekly struct {

	// all
	All *GamerStatsResponseDataWeeklyAll `json:"all,omitempty"`

	// map
	Map interface{} `json:"map,omitempty"`

	// mode
	Mode interface{} `json:"mode,omitempty"`

	// gamer stats response data weekly additional properties
	GamerStatsResponseDataWeeklyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataWeekly) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// all
		All *GamerStatsResponseDataWeeklyAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataWeekly

	rcv.All = stage1.All
	rcv.Map = stage1.Map
	rcv.Mode = stage1.Mode
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "all")
	delete(stage2, "map")
	delete(stage2, "mode")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataWeeklyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataWeekly) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// all
		All *GamerStatsResponseDataWeeklyAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}

	stage1.All = m.All
	stage1.Map = m.Map
	stage1.Mode = m.Mode

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataWeeklyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataWeeklyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data weekly
func (m *GamerStatsResponseDataWeekly) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataWeekly) validateAll(formats strfmt.Registry) error {

	if swag.IsZero(m.All) { // not required
		return nil
	}

	if m.All != nil {
		if err := m.All.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "weekly" + "." + "all")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataWeekly) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataWeekly) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataWeekly
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataWeeklyAll gamer stats response data weekly all
//
// swagger:model GamerStatsResponseDataWeeklyAll
type GamerStatsResponseDataWeeklyAll struct {

	// properties
	Properties interface{} `json:"properties,omitempty"`

	// gamer stats response data weekly all additional properties
	GamerStatsResponseDataWeeklyAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataWeeklyAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataWeeklyAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataWeeklyAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataWeeklyAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataWeeklyAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataWeeklyAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data weekly all
func (m *GamerStatsResponseDataWeeklyAll) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataWeeklyAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataWeeklyAll) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataWeeklyAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
