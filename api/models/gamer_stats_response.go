// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GamerStatsResponse gamer stats response
//
// swagger:model gamerStatsResponse
type GamerStatsResponse struct {

	// data
	Data *GamerStatsResponseData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// gamer stats response additional properties
	GamerStatsResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data *GamerStatsResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data *GamerStatsResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response
func (m *GamerStatsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponse) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseData gamer stats response data
//
// swagger:model GamerStatsResponseData
type GamerStatsResponseData struct {

	// engagement
	Engagement interface{} `json:"engagement,omitempty"`

	// level
	Level float64 `json:"level,omitempty"`

	// level xp gained
	LevelXpGained float64 `json:"levelXpGained,omitempty"`

	// level xp remainder
	LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

	// lifetime
	Lifetime *GamerStatsResponseDataLifetime `json:"lifetime,omitempty"`

	// max level
	MaxLevel float64 `json:"maxLevel,omitempty"`

	// max prestige
	MaxPrestige float64 `json:"maxPrestige,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// p
	P float64 `json:"p,omitempty"`

	// paragon Id
	ParagonID float64 `json:"paragonId,omitempty"`

	// paragon rank
	ParagonRank float64 `json:"paragonRank,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// prestige
	Prestige float64 `json:"prestige,omitempty"`

	// prestige Id
	PrestigeID float64 `json:"prestigeId,omitempty"`

	// s
	S float64 `json:"s,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// total xp
	TotalXp float64 `json:"totalXp,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// weekly
	Weekly *GamerStatsResponseDataWeekly `json:"weekly,omitempty"`

	// gamer stats response data additional properties
	GamerStatsResponseDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// engagement
		Engagement interface{} `json:"engagement,omitempty"`

		// level
		Level float64 `json:"level,omitempty"`

		// level xp gained
		LevelXpGained float64 `json:"levelXpGained,omitempty"`

		// level xp remainder
		LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

		// lifetime
		Lifetime *GamerStatsResponseDataLifetime `json:"lifetime,omitempty"`

		// max level
		MaxLevel float64 `json:"maxLevel,omitempty"`

		// max prestige
		MaxPrestige float64 `json:"maxPrestige,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// p
		P float64 `json:"p,omitempty"`

		// paragon Id
		ParagonID float64 `json:"paragonId,omitempty"`

		// paragon rank
		ParagonRank float64 `json:"paragonRank,omitempty"`

		// platform
		Platform string `json:"platform,omitempty"`

		// prestige
		Prestige float64 `json:"prestige,omitempty"`

		// prestige Id
		PrestigeID float64 `json:"prestigeId,omitempty"`

		// s
		S float64 `json:"s,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// total xp
		TotalXp float64 `json:"totalXp,omitempty"`

		// type
		Type string `json:"type,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// weekly
		Weekly *GamerStatsResponseDataWeekly `json:"weekly,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseData

	rcv.Engagement = stage1.Engagement
	rcv.Level = stage1.Level
	rcv.LevelXpGained = stage1.LevelXpGained
	rcv.LevelXpRemainder = stage1.LevelXpRemainder
	rcv.Lifetime = stage1.Lifetime
	rcv.MaxLevel = stage1.MaxLevel
	rcv.MaxPrestige = stage1.MaxPrestige
	rcv.Message = stage1.Message
	rcv.P = stage1.P
	rcv.ParagonID = stage1.ParagonID
	rcv.ParagonRank = stage1.ParagonRank
	rcv.Platform = stage1.Platform
	rcv.Prestige = stage1.Prestige
	rcv.PrestigeID = stage1.PrestigeID
	rcv.S = stage1.S
	rcv.Title = stage1.Title
	rcv.TotalXp = stage1.TotalXp
	rcv.Type = stage1.Type
	rcv.Username = stage1.Username
	rcv.Weekly = stage1.Weekly
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "engagement")
	delete(stage2, "level")
	delete(stage2, "levelXpGained")
	delete(stage2, "levelXpRemainder")
	delete(stage2, "lifetime")
	delete(stage2, "maxLevel")
	delete(stage2, "maxPrestige")
	delete(stage2, "message")
	delete(stage2, "p")
	delete(stage2, "paragonId")
	delete(stage2, "paragonRank")
	delete(stage2, "platform")
	delete(stage2, "prestige")
	delete(stage2, "prestigeId")
	delete(stage2, "s")
	delete(stage2, "title")
	delete(stage2, "totalXp")
	delete(stage2, "type")
	delete(stage2, "username")
	delete(stage2, "weekly")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// engagement
		Engagement interface{} `json:"engagement,omitempty"`

		// level
		Level float64 `json:"level,omitempty"`

		// level xp gained
		LevelXpGained float64 `json:"levelXpGained,omitempty"`

		// level xp remainder
		LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

		// lifetime
		Lifetime *GamerStatsResponseDataLifetime `json:"lifetime,omitempty"`

		// max level
		MaxLevel float64 `json:"maxLevel,omitempty"`

		// max prestige
		MaxPrestige float64 `json:"maxPrestige,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// p
		P float64 `json:"p,omitempty"`

		// paragon Id
		ParagonID float64 `json:"paragonId,omitempty"`

		// paragon rank
		ParagonRank float64 `json:"paragonRank,omitempty"`

		// platform
		Platform string `json:"platform,omitempty"`

		// prestige
		Prestige float64 `json:"prestige,omitempty"`

		// prestige Id
		PrestigeID float64 `json:"prestigeId,omitempty"`

		// s
		S float64 `json:"s,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// total xp
		TotalXp float64 `json:"totalXp,omitempty"`

		// type
		Type string `json:"type,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// weekly
		Weekly *GamerStatsResponseDataWeekly `json:"weekly,omitempty"`
	}

	stage1.Engagement = m.Engagement
	stage1.Level = m.Level
	stage1.LevelXpGained = m.LevelXpGained
	stage1.LevelXpRemainder = m.LevelXpRemainder
	stage1.Lifetime = m.Lifetime
	stage1.MaxLevel = m.MaxLevel
	stage1.MaxPrestige = m.MaxPrestige
	stage1.Message = m.Message
	stage1.P = m.P
	stage1.ParagonID = m.ParagonID
	stage1.ParagonRank = m.ParagonRank
	stage1.Platform = m.Platform
	stage1.Prestige = m.Prestige
	stage1.PrestigeID = m.PrestigeID
	stage1.S = m.S
	stage1.Title = m.Title
	stage1.TotalXp = m.TotalXp
	stage1.Type = m.Type
	stage1.Username = m.Username
	stage1.Weekly = m.Weekly

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data
func (m *GamerStatsResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseData) validateLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifetime) { // not required
		return nil
	}

	if m.Lifetime != nil {
		if err := m.Lifetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseData) validateWeekly(formats strfmt.Registry) error {

	if swag.IsZero(m.Weekly) { // not required
		return nil
	}

	if m.Weekly != nil {
		if err := m.Weekly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "weekly")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetime gamer stats response data lifetime
//
// swagger:model GamerStatsResponseDataLifetime
type GamerStatsResponseDataLifetime struct {

	// accolade data
	AccoladeData *GamerStatsResponseDataLifetimeAccoladeData `json:"accoladeData,omitempty"`

	// all
	All *GamerStatsResponseDataLifetimeAll `json:"all,omitempty"`

	// item data
	ItemData *GamerStatsResponseDataLifetimeItemData `json:"itemData,omitempty"`

	// map
	Map interface{} `json:"map,omitempty"`

	// mode
	Mode *GamerStatsResponseDataLifetimeMode `json:"mode,omitempty"`

	// scorestreak data
	ScorestreakData *GamerStatsResponseDataLifetimeScorestreakData `json:"scorestreakData,omitempty"`

	// gamer stats response data lifetime additional properties
	GamerStatsResponseDataLifetimeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetime) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accolade data
		AccoladeData *GamerStatsResponseDataLifetimeAccoladeData `json:"accoladeData,omitempty"`

		// all
		All *GamerStatsResponseDataLifetimeAll `json:"all,omitempty"`

		// item data
		ItemData *GamerStatsResponseDataLifetimeItemData `json:"itemData,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode *GamerStatsResponseDataLifetimeMode `json:"mode,omitempty"`

		// scorestreak data
		ScorestreakData *GamerStatsResponseDataLifetimeScorestreakData `json:"scorestreakData,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetime

	rcv.AccoladeData = stage1.AccoladeData
	rcv.All = stage1.All
	rcv.ItemData = stage1.ItemData
	rcv.Map = stage1.Map
	rcv.Mode = stage1.Mode
	rcv.ScorestreakData = stage1.ScorestreakData
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accoladeData")
	delete(stage2, "all")
	delete(stage2, "itemData")
	delete(stage2, "map")
	delete(stage2, "mode")
	delete(stage2, "scorestreakData")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetime) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accolade data
		AccoladeData *GamerStatsResponseDataLifetimeAccoladeData `json:"accoladeData,omitempty"`

		// all
		All *GamerStatsResponseDataLifetimeAll `json:"all,omitempty"`

		// item data
		ItemData *GamerStatsResponseDataLifetimeItemData `json:"itemData,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode *GamerStatsResponseDataLifetimeMode `json:"mode,omitempty"`

		// scorestreak data
		ScorestreakData *GamerStatsResponseDataLifetimeScorestreakData `json:"scorestreakData,omitempty"`
	}

	stage1.AccoladeData = m.AccoladeData
	stage1.All = m.All
	stage1.ItemData = m.ItemData
	stage1.Map = m.Map
	stage1.Mode = m.Mode
	stage1.ScorestreakData = m.ScorestreakData

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime
func (m *GamerStatsResponseDataLifetime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccoladeData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScorestreakData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetime) validateAccoladeData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccoladeData) { // not required
		return nil
	}

	if m.AccoladeData != nil {
		if err := m.AccoladeData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "accoladeData")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetime) validateAll(formats strfmt.Registry) error {

	if swag.IsZero(m.All) { // not required
		return nil
	}

	if m.All != nil {
		if err := m.All.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "all")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetime) validateItemData(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemData) { // not required
		return nil
	}

	if m.ItemData != nil {
		if err := m.ItemData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetime) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetime) validateScorestreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.ScorestreakData) { // not required
		return nil
	}

	if m.ScorestreakData != nil {
		if err := m.ScorestreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetime) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeAccoladeData gamer stats response data lifetime accolade data
//
// swagger:model GamerStatsResponseDataLifetimeAccoladeData
type GamerStatsResponseDataLifetimeAccoladeData struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeAccoladeDataProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime accolade data additional properties
	GamerStatsResponseDataLifetimeAccoladeDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeAccoladeData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeAccoladeDataProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeAccoladeData

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAccoladeDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeAccoladeData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeAccoladeDataProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAccoladeDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAccoladeDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime accolade data
func (m *GamerStatsResponseDataLifetimeAccoladeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeAccoladeData) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "accoladeData" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAccoladeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAccoladeData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeAccoladeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeAccoladeDataProperties gamer stats response data lifetime accolade data properties
//
// swagger:model GamerStatsResponseDataLifetimeAccoladeDataProperties
type GamerStatsResponseDataLifetimeAccoladeDataProperties struct {

	// ads kills
	AdsKills float64 `json:"adsKills,omitempty"`

	// ammo box used
	AmmoBoxUsed float64 `json:"ammoBoxUsed,omitempty"`

	// ar deaths
	ArDeaths float64 `json:"arDeaths,omitempty"`

	// ar headshots
	ArHeadshots float64 `json:"arHeadshots,omitempty"`

	// ar kills
	ArKills float64 `json:"arKills,omitempty"`

	// assaults
	Assaults float64 `json:"assaults,omitempty"`

	// avenger kills
	AvengerKills float64 `json:"avengerKills,omitempty"`

	// bomb defused
	BombDefused float64 `json:"bombDefused,omitempty"`

	// bomb detonated
	BombDetonated float64 `json:"bombDetonated,omitempty"`

	// bomb planted
	BombPlanted float64 `json:"bombPlanted,omitempty"`

	// c4 kills
	C4Kills float64 `json:"c4Kills,omitempty"`

	// captures
	Captures float64 `json:"captures,omitempty"`

	// carepackages captured
	CarepackagesCaptured float64 `json:"carepackagesCaptured,omitempty"`

	// carrier kills
	CarrierKills float64 `json:"carrierKills,omitempty"`

	// class changes
	ClassChanges float64 `json:"classChanges,omitempty"`

	// claymore kills
	ClaymoreKills float64 `json:"claymoreKills,omitempty"`

	// clutch
	Clutch float64 `json:"clutch,omitempty"`

	// clutch revives
	ClutchRevives float64 `json:"clutchRevives,omitempty"`

	// comeback kills
	ComebackKills float64 `json:"comebackKills,omitempty"`

	// dead silence kills
	DeadSilenceKills float64 `json:"deadSilenceKills,omitempty"`

	// deaths from behind
	DeathsFromBehind float64 `json:"deathsFromBehind,omitempty"`

	// decoy hits
	DecoyHits float64 `json:"decoyHits,omitempty"`

	// defender kills
	DefenderKills float64 `json:"defenderKills,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// deployable cover used
	DeployableCoverUsed float64 `json:"deployableCoverUsed,omitempty"`

	// destroyed killstreaks
	DestroyedKillstreaks float64 `json:"destroyedKillstreaks,omitempty"`

	// distance traveled in vehicle
	DistanceTraveledInVehicle float64 `json:"distanceTraveledInVehicle,omitempty"`

	// distance travelled
	DistanceTravelled float64 `json:"distanceTravelled,omitempty"`

	// emp drone hits
	EmpDroneHits float64 `json:"empDroneHits,omitempty"`

	// execution kills
	ExecutionKills float64 `json:"executionKills,omitempty"`

	// explosions survived
	ExplosionsSurvived float64 `json:"explosionsSurvived,omitempty"`

	// first infected
	FirstInfected float64 `json:"firstInfected,omitempty"`

	// flashbang hits
	FlashbangHits float64 `json:"flashbangHits,omitempty"`

	// frag kills
	FragKills float64 `json:"fragKills,omitempty"`

	// gas hits
	GasHits float64 `json:"gasHits,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// higher ranked kills
	HigherRankedKills float64 `json:"higherRankedKills,omitempty"`

	// highest avg altitude
	HighestAvgAltitude float64 `json:"highestAvgAltitude,omitempty"`

	// highest multikill
	HighestMultikill float64 `json:"highestMultikill,omitempty"`

	// highest ranked kills
	HighestRankedKills float64 `json:"highestRankedKills,omitempty"`

	// hipfire kills
	HipfireKills float64 `json:"hipfireKills,omitempty"`

	// infected kills
	InfectedKills float64 `json:"infectedKills,omitempty"`

	// kill enemy team
	KillEnemyTeam float64 `json:"killEnemyTeam,omitempty"`

	// kills10 no deaths
	Kills10NoDeaths float64 `json:"kills10NoDeaths,omitempty"`

	// kills from behind
	KillsFromBehind float64 `json:"killsFromBehind,omitempty"`

	// killstreak a u a v assists
	KillstreakAUAVAssists float64 `json:"killstreakAUAVAssists,omitempty"`

	// killstreak air kills
	KillstreakAirKills float64 `json:"killstreakAirKills,omitempty"`

	// killstreak airstrike kills
	KillstreakAirstrikeKills float64 `json:"killstreakAirstrikeKills,omitempty"`

	// killstreak c u a v assists
	KillstreakCUAVAssists float64 `json:"killstreakCUAVAssists,omitempty"`

	// killstreak care package used
	KillstreakCarePackageUsed float64 `json:"killstreakCarePackageUsed,omitempty"`

	// killstreak chopper gunner kills
	KillstreakChopperGunnerKills float64 `json:"killstreakChopperGunnerKills,omitempty"`

	// killstreak chopper support kills
	KillstreakChopperSupportKills float64 `json:"killstreakChopperSupportKills,omitempty"`

	// killstreak cluser strike kills
	KillstreakCluserStrikeKills float64 `json:"killstreakCluserStrikeKills,omitempty"`

	// killstreak cruise missile kills
	KillstreakCruiseMissileKills float64 `json:"killstreakCruiseMissileKills,omitempty"`

	// killstreak emergency airdrop used
	KillstreakEmergencyAirdropUsed float64 `json:"killstreakEmergencyAirdropUsed,omitempty"`

	// killstreak ground kills
	KillstreakGroundKills float64 `json:"killstreakGroundKills,omitempty"`

	// killstreak gunship kills
	KillstreakGunshipKills float64 `json:"killstreakGunshipKills,omitempty"`

	// killstreak juggernaut kills
	KillstreakJuggernautKills float64 `json:"killstreakJuggernautKills,omitempty"`

	// killstreak kills
	KillstreakKills float64 `json:"killstreakKills,omitempty"`

	// killstreak personal u a v kills
	KillstreakPersonalUAVKills float64 `json:"killstreakPersonalUAVKills,omitempty"`

	// killstreak sentry gun kills
	KillstreakSentryGunKills float64 `json:"killstreakSentryGunKills,omitempty"`

	// killstreak shield turret kills
	KillstreakShieldTurretKills float64 `json:"killstreakShieldTurretKills,omitempty"`

	// killstreak tank kills
	KillstreakTankKills float64 `json:"killstreakTankKills,omitempty"`

	// killstreak u a v assists
	KillstreakUAVAssists float64 `json:"killstreakUAVAssists,omitempty"`

	// killstreak v t o l jet kills
	KillstreakVTOLJetKills float64 `json:"killstreakVTOLJetKills,omitempty"`

	// killstreak wheelson kills
	KillstreakWheelsonKills float64 `json:"killstreakWheelsonKills,omitempty"`

	// killstreak white phosphorous kills assists
	KillstreakWhitePhosphorousKillsAssists float64 `json:"killstreakWhitePhosphorousKillsAssists,omitempty"`

	// last survivor
	LastSurvivor float64 `json:"lastSurvivor,omitempty"`

	// launcher deaths
	LauncherDeaths float64 `json:"launcherDeaths,omitempty"`

	// launcher headshots
	LauncherHeadshots float64 `json:"launcherHeadshots,omitempty"`

	// launcher kills
	LauncherKills float64 `json:"launcherKills,omitempty"`

	// least assists
	LeastAssists float64 `json:"leastAssists,omitempty"`

	// least deaths
	LeastDeaths float64 `json:"leastDeaths,omitempty"`

	// least kills
	LeastKills float64 `json:"leastKills,omitempty"`

	// lmg deaths
	LmgDeaths float64 `json:"lmgDeaths,omitempty"`

	// lmg headshots
	LmgHeadshots float64 `json:"lmgHeadshots,omitempty"`

	// lmg kills
	LmgKills float64 `json:"lmgKills,omitempty"`

	// longest life
	LongestLife float64 `json:"longestLife,omitempty"`

	// longest streak
	LongestStreak float64 `json:"longestStreak,omitempty"`

	// longest time spent on weapon
	LongestTimeSpentOnWeapon float64 `json:"longestTimeSpentOnWeapon,omitempty"`

	// longshot kills
	LongshotKills float64 `json:"longshotKills,omitempty"`

	// lower ranked kills
	LowerRankedKills float64 `json:"lowerRankedKills,omitempty"`

	// lowest avg altitude
	LowestAvgAltitude float64 `json:"lowestAvgAltitude,omitempty"`

	// melee deaths
	MeleeDeaths float64 `json:"meleeDeaths,omitempty"`

	// melee kills
	MeleeKills float64 `json:"meleeKills,omitempty"`

	// molotov kills
	MolotovKills float64 `json:"molotovKills,omitempty"`

	// most assists
	MostAssists float64 `json:"mostAssists,omitempty"`

	// most deaths
	MostDeaths float64 `json:"mostDeaths,omitempty"`

	// most kills
	MostKills float64 `json:"mostKills,omitempty"`

	// most kills least deaths
	MostKillsLeastDeaths float64 `json:"mostKillsLeastDeaths,omitempty"`

	// most kills longest streak
	MostKillsLongestStreak float64 `json:"mostKillsLongestStreak,omitempty"`

	// most kills most headshots
	MostKillsMostHeadshots float64 `json:"mostKillsMostHeadshots,omitempty"`

	// most multikills
	MostMultikills float64 `json:"mostMultikills,omitempty"`

	// no deaths from behind
	NoDeathsFromBehind float64 `json:"noDeathsFromBehind,omitempty"`

	// no kill10 deaths
	NoKill10Deaths float64 `json:"noKill10Deaths,omitempty"`

	// no kill no death
	NoKillNoDeath float64 `json:"noKillNoDeath,omitempty"`

	// no kills with death
	NoKillsWithDeath float64 `json:"noKillsWithDeath,omitempty"`

	// one shot one kills
	OneShotOneKills float64 `json:"oneShotOneKills,omitempty"`

	// penetration kills
	PenetrationKills float64 `json:"penetrationKills,omitempty"`

	// pickups
	Pickups float64 `json:"pickups,omitempty"`

	// pistol headshots
	PistolHeadshots float64 `json:"pistolHeadshots,omitempty"`

	// pistol kills
	PistolKills float64 `json:"pistolKills,omitempty"`

	// pistol peaths
	PistolPeaths float64 `json:"pistolPeaths,omitempty"`

	// point blank kills
	PointBlankKills float64 `json:"pointBlankKills,omitempty"`

	// proximity mine kills
	ProximityMineKills float64 `json:"proximityMineKills,omitempty"`

	// recon drone marks
	ReconDroneMarks float64 `json:"reconDroneMarks,omitempty"`

	// reloads
	Reloads float64 `json:"reloads,omitempty"`

	// returns
	Returns float64 `json:"returns,omitempty"`

	// revenge kills
	RevengeKills float64 `json:"revengeKills,omitempty"`

	// riot shield damage absorbed
	RiotShieldDamageAbsorbed float64 `json:"riotShieldDamageAbsorbed,omitempty"`

	// semtex kills
	SemtexKills float64 `json:"semtexKills,omitempty"`

	// setbacks
	Setbacks float64 `json:"setbacks,omitempty"`

	// shortest life
	ShortestLife float64 `json:"shortestLife,omitempty"`

	// shotgun deaths
	ShotgunDeaths float64 `json:"shotgunDeaths,omitempty"`

	// shotgun headshots
	ShotgunHeadshots float64 `json:"shotgunHeadshots,omitempty"`

	// shotgun kills
	ShotgunKills float64 `json:"shotgunKills,omitempty"`

	// shots fired
	ShotsFired float64 `json:"shotsFired,omitempty"`

	// skipped killcams
	SkippedKillcams float64 `json:"skippedKillcams,omitempty"`

	// smg deaths
	SmgDeaths float64 `json:"smgDeaths,omitempty"`

	// smg headshots
	SmgHeadshots float64 `json:"smgHeadshots,omitempty"`

	// smg kills
	SmgKills float64 `json:"smgKills,omitempty"`

	// smokes used
	SmokesUsed float64 `json:"smokesUsed,omitempty"`

	// snapshot hits
	SnapshotHits float64 `json:"snapshotHits,omitempty"`

	// sniper deaths
	SniperDeaths float64 `json:"sniperDeaths,omitempty"`

	// sniper headshots
	SniperHeadshots float64 `json:"sniperHeadshots,omitempty"`

	// sniper kills
	SniperKills float64 `json:"sniperKills,omitempty"`

	// spawn select base
	SpawnSelectBase float64 `json:"spawnSelectBase,omitempty"`

	// spawn select flag
	SpawnSelectFlag float64 `json:"spawnSelectFlag,omitempty"`

	// spawn select squad
	SpawnSelectSquad float64 `json:"spawnSelectSquad,omitempty"`

	// spawn select vehicle
	SpawnSelectVehicle float64 `json:"spawnSelectVehicle,omitempty"`

	// stim damage healed
	StimDamageHealed float64 `json:"stimDamageHealed,omitempty"`

	// stopping power kills
	StoppingPowerKills float64 `json:"stoppingPowerKills,omitempty"`

	// stun hits
	StunHits float64 `json:"stunHits,omitempty"`

	// suicides
	Suicides float64 `json:"suicides,omitempty"`

	// survivor kills
	SurvivorKills float64 `json:"survivorKills,omitempty"`

	// tactical insertion spawns
	TacticalInsertionSpawns float64 `json:"tacticalInsertionSpawns,omitempty"`

	// tags captured
	TagsCaptured float64 `json:"tagsCaptured,omitempty"`

	// tags denied
	TagsDenied float64 `json:"tagsDenied,omitempty"`

	// tags largest bank
	TagsLargestBank float64 `json:"tagsLargestBank,omitempty"`

	// tags mega banked
	TagsMegaBanked float64 `json:"tagsMegaBanked,omitempty"`

	// thermite kills
	ThermiteKills float64 `json:"thermiteKills,omitempty"`

	// throwing knife kills
	ThrowingKnifeKills float64 `json:"throwingKnifeKills,omitempty"`

	// time crouched
	TimeCrouched float64 `json:"timeCrouched,omitempty"`

	// time on point
	TimeOnPoint float64 `json:"timeOnPoint,omitempty"`

	// time prone
	TimeProne float64 `json:"timeProne,omitempty"`

	// time spent as driver
	TimeSpentAsDriver float64 `json:"timeSpentAsDriver,omitempty"`

	// time spent as passenger
	TimeSpentAsPassenger float64 `json:"timeSpentAsPassenger,omitempty"`

	// time watching killcams
	TimeWatchingKillcams float64 `json:"timeWatchingKillcams,omitempty"`

	// times selected as squad leader
	TimesSelectedAsSquadLeader float64 `json:"timesSelectedAsSquadLeader,omitempty"`

	// trophy system hits
	TrophySystemHits float64 `json:"trophySystemHits,omitempty"`

	// weapon pickups
	WeaponPickups float64 `json:"weaponPickups,omitempty"`

	// gamer stats response data lifetime accolade data properties additional properties
	GamerStatsResponseDataLifetimeAccoladeDataPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeAccoladeDataProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// ads kills
		AdsKills float64 `json:"adsKills,omitempty"`

		// ammo box used
		AmmoBoxUsed float64 `json:"ammoBoxUsed,omitempty"`

		// ar deaths
		ArDeaths float64 `json:"arDeaths,omitempty"`

		// ar headshots
		ArHeadshots float64 `json:"arHeadshots,omitempty"`

		// ar kills
		ArKills float64 `json:"arKills,omitempty"`

		// assaults
		Assaults float64 `json:"assaults,omitempty"`

		// avenger kills
		AvengerKills float64 `json:"avengerKills,omitempty"`

		// bomb defused
		BombDefused float64 `json:"bombDefused,omitempty"`

		// bomb detonated
		BombDetonated float64 `json:"bombDetonated,omitempty"`

		// bomb planted
		BombPlanted float64 `json:"bombPlanted,omitempty"`

		// c4 kills
		C4Kills float64 `json:"c4Kills,omitempty"`

		// captures
		Captures float64 `json:"captures,omitempty"`

		// carepackages captured
		CarepackagesCaptured float64 `json:"carepackagesCaptured,omitempty"`

		// carrier kills
		CarrierKills float64 `json:"carrierKills,omitempty"`

		// class changes
		ClassChanges float64 `json:"classChanges,omitempty"`

		// claymore kills
		ClaymoreKills float64 `json:"claymoreKills,omitempty"`

		// clutch
		Clutch float64 `json:"clutch,omitempty"`

		// clutch revives
		ClutchRevives float64 `json:"clutchRevives,omitempty"`

		// comeback kills
		ComebackKills float64 `json:"comebackKills,omitempty"`

		// dead silence kills
		DeadSilenceKills float64 `json:"deadSilenceKills,omitempty"`

		// deaths from behind
		DeathsFromBehind float64 `json:"deathsFromBehind,omitempty"`

		// decoy hits
		DecoyHits float64 `json:"decoyHits,omitempty"`

		// defender kills
		DefenderKills float64 `json:"defenderKills,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// deployable cover used
		DeployableCoverUsed float64 `json:"deployableCoverUsed,omitempty"`

		// destroyed killstreaks
		DestroyedKillstreaks float64 `json:"destroyedKillstreaks,omitempty"`

		// distance traveled in vehicle
		DistanceTraveledInVehicle float64 `json:"distanceTraveledInVehicle,omitempty"`

		// distance travelled
		DistanceTravelled float64 `json:"distanceTravelled,omitempty"`

		// emp drone hits
		EmpDroneHits float64 `json:"empDroneHits,omitempty"`

		// execution kills
		ExecutionKills float64 `json:"executionKills,omitempty"`

		// explosions survived
		ExplosionsSurvived float64 `json:"explosionsSurvived,omitempty"`

		// first infected
		FirstInfected float64 `json:"firstInfected,omitempty"`

		// flashbang hits
		FlashbangHits float64 `json:"flashbangHits,omitempty"`

		// frag kills
		FragKills float64 `json:"fragKills,omitempty"`

		// gas hits
		GasHits float64 `json:"gasHits,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// higher ranked kills
		HigherRankedKills float64 `json:"higherRankedKills,omitempty"`

		// highest avg altitude
		HighestAvgAltitude float64 `json:"highestAvgAltitude,omitempty"`

		// highest multikill
		HighestMultikill float64 `json:"highestMultikill,omitempty"`

		// highest ranked kills
		HighestRankedKills float64 `json:"highestRankedKills,omitempty"`

		// hipfire kills
		HipfireKills float64 `json:"hipfireKills,omitempty"`

		// infected kills
		InfectedKills float64 `json:"infectedKills,omitempty"`

		// kill enemy team
		KillEnemyTeam float64 `json:"killEnemyTeam,omitempty"`

		// kills10 no deaths
		Kills10NoDeaths float64 `json:"kills10NoDeaths,omitempty"`

		// kills from behind
		KillsFromBehind float64 `json:"killsFromBehind,omitempty"`

		// killstreak a u a v assists
		KillstreakAUAVAssists float64 `json:"killstreakAUAVAssists,omitempty"`

		// killstreak air kills
		KillstreakAirKills float64 `json:"killstreakAirKills,omitempty"`

		// killstreak airstrike kills
		KillstreakAirstrikeKills float64 `json:"killstreakAirstrikeKills,omitempty"`

		// killstreak c u a v assists
		KillstreakCUAVAssists float64 `json:"killstreakCUAVAssists,omitempty"`

		// killstreak care package used
		KillstreakCarePackageUsed float64 `json:"killstreakCarePackageUsed,omitempty"`

		// killstreak chopper gunner kills
		KillstreakChopperGunnerKills float64 `json:"killstreakChopperGunnerKills,omitempty"`

		// killstreak chopper support kills
		KillstreakChopperSupportKills float64 `json:"killstreakChopperSupportKills,omitempty"`

		// killstreak cluser strike kills
		KillstreakCluserStrikeKills float64 `json:"killstreakCluserStrikeKills,omitempty"`

		// killstreak cruise missile kills
		KillstreakCruiseMissileKills float64 `json:"killstreakCruiseMissileKills,omitempty"`

		// killstreak emergency airdrop used
		KillstreakEmergencyAirdropUsed float64 `json:"killstreakEmergencyAirdropUsed,omitempty"`

		// killstreak ground kills
		KillstreakGroundKills float64 `json:"killstreakGroundKills,omitempty"`

		// killstreak gunship kills
		KillstreakGunshipKills float64 `json:"killstreakGunshipKills,omitempty"`

		// killstreak juggernaut kills
		KillstreakJuggernautKills float64 `json:"killstreakJuggernautKills,omitempty"`

		// killstreak kills
		KillstreakKills float64 `json:"killstreakKills,omitempty"`

		// killstreak personal u a v kills
		KillstreakPersonalUAVKills float64 `json:"killstreakPersonalUAVKills,omitempty"`

		// killstreak sentry gun kills
		KillstreakSentryGunKills float64 `json:"killstreakSentryGunKills,omitempty"`

		// killstreak shield turret kills
		KillstreakShieldTurretKills float64 `json:"killstreakShieldTurretKills,omitempty"`

		// killstreak tank kills
		KillstreakTankKills float64 `json:"killstreakTankKills,omitempty"`

		// killstreak u a v assists
		KillstreakUAVAssists float64 `json:"killstreakUAVAssists,omitempty"`

		// killstreak v t o l jet kills
		KillstreakVTOLJetKills float64 `json:"killstreakVTOLJetKills,omitempty"`

		// killstreak wheelson kills
		KillstreakWheelsonKills float64 `json:"killstreakWheelsonKills,omitempty"`

		// killstreak white phosphorous kills assists
		KillstreakWhitePhosphorousKillsAssists float64 `json:"killstreakWhitePhosphorousKillsAssists,omitempty"`

		// last survivor
		LastSurvivor float64 `json:"lastSurvivor,omitempty"`

		// launcher deaths
		LauncherDeaths float64 `json:"launcherDeaths,omitempty"`

		// launcher headshots
		LauncherHeadshots float64 `json:"launcherHeadshots,omitempty"`

		// launcher kills
		LauncherKills float64 `json:"launcherKills,omitempty"`

		// least assists
		LeastAssists float64 `json:"leastAssists,omitempty"`

		// least deaths
		LeastDeaths float64 `json:"leastDeaths,omitempty"`

		// least kills
		LeastKills float64 `json:"leastKills,omitempty"`

		// lmg deaths
		LmgDeaths float64 `json:"lmgDeaths,omitempty"`

		// lmg headshots
		LmgHeadshots float64 `json:"lmgHeadshots,omitempty"`

		// lmg kills
		LmgKills float64 `json:"lmgKills,omitempty"`

		// longest life
		LongestLife float64 `json:"longestLife,omitempty"`

		// longest streak
		LongestStreak float64 `json:"longestStreak,omitempty"`

		// longest time spent on weapon
		LongestTimeSpentOnWeapon float64 `json:"longestTimeSpentOnWeapon,omitempty"`

		// longshot kills
		LongshotKills float64 `json:"longshotKills,omitempty"`

		// lower ranked kills
		LowerRankedKills float64 `json:"lowerRankedKills,omitempty"`

		// lowest avg altitude
		LowestAvgAltitude float64 `json:"lowestAvgAltitude,omitempty"`

		// melee deaths
		MeleeDeaths float64 `json:"meleeDeaths,omitempty"`

		// melee kills
		MeleeKills float64 `json:"meleeKills,omitempty"`

		// molotov kills
		MolotovKills float64 `json:"molotovKills,omitempty"`

		// most assists
		MostAssists float64 `json:"mostAssists,omitempty"`

		// most deaths
		MostDeaths float64 `json:"mostDeaths,omitempty"`

		// most kills
		MostKills float64 `json:"mostKills,omitempty"`

		// most kills least deaths
		MostKillsLeastDeaths float64 `json:"mostKillsLeastDeaths,omitempty"`

		// most kills longest streak
		MostKillsLongestStreak float64 `json:"mostKillsLongestStreak,omitempty"`

		// most kills most headshots
		MostKillsMostHeadshots float64 `json:"mostKillsMostHeadshots,omitempty"`

		// most multikills
		MostMultikills float64 `json:"mostMultikills,omitempty"`

		// no deaths from behind
		NoDeathsFromBehind float64 `json:"noDeathsFromBehind,omitempty"`

		// no kill10 deaths
		NoKill10Deaths float64 `json:"noKill10Deaths,omitempty"`

		// no kill no death
		NoKillNoDeath float64 `json:"noKillNoDeath,omitempty"`

		// no kills with death
		NoKillsWithDeath float64 `json:"noKillsWithDeath,omitempty"`

		// one shot one kills
		OneShotOneKills float64 `json:"oneShotOneKills,omitempty"`

		// penetration kills
		PenetrationKills float64 `json:"penetrationKills,omitempty"`

		// pickups
		Pickups float64 `json:"pickups,omitempty"`

		// pistol headshots
		PistolHeadshots float64 `json:"pistolHeadshots,omitempty"`

		// pistol kills
		PistolKills float64 `json:"pistolKills,omitempty"`

		// pistol peaths
		PistolPeaths float64 `json:"pistolPeaths,omitempty"`

		// point blank kills
		PointBlankKills float64 `json:"pointBlankKills,omitempty"`

		// proximity mine kills
		ProximityMineKills float64 `json:"proximityMineKills,omitempty"`

		// recon drone marks
		ReconDroneMarks float64 `json:"reconDroneMarks,omitempty"`

		// reloads
		Reloads float64 `json:"reloads,omitempty"`

		// returns
		Returns float64 `json:"returns,omitempty"`

		// revenge kills
		RevengeKills float64 `json:"revengeKills,omitempty"`

		// riot shield damage absorbed
		RiotShieldDamageAbsorbed float64 `json:"riotShieldDamageAbsorbed,omitempty"`

		// semtex kills
		SemtexKills float64 `json:"semtexKills,omitempty"`

		// setbacks
		Setbacks float64 `json:"setbacks,omitempty"`

		// shortest life
		ShortestLife float64 `json:"shortestLife,omitempty"`

		// shotgun deaths
		ShotgunDeaths float64 `json:"shotgunDeaths,omitempty"`

		// shotgun headshots
		ShotgunHeadshots float64 `json:"shotgunHeadshots,omitempty"`

		// shotgun kills
		ShotgunKills float64 `json:"shotgunKills,omitempty"`

		// shots fired
		ShotsFired float64 `json:"shotsFired,omitempty"`

		// skipped killcams
		SkippedKillcams float64 `json:"skippedKillcams,omitempty"`

		// smg deaths
		SmgDeaths float64 `json:"smgDeaths,omitempty"`

		// smg headshots
		SmgHeadshots float64 `json:"smgHeadshots,omitempty"`

		// smg kills
		SmgKills float64 `json:"smgKills,omitempty"`

		// smokes used
		SmokesUsed float64 `json:"smokesUsed,omitempty"`

		// snapshot hits
		SnapshotHits float64 `json:"snapshotHits,omitempty"`

		// sniper deaths
		SniperDeaths float64 `json:"sniperDeaths,omitempty"`

		// sniper headshots
		SniperHeadshots float64 `json:"sniperHeadshots,omitempty"`

		// sniper kills
		SniperKills float64 `json:"sniperKills,omitempty"`

		// spawn select base
		SpawnSelectBase float64 `json:"spawnSelectBase,omitempty"`

		// spawn select flag
		SpawnSelectFlag float64 `json:"spawnSelectFlag,omitempty"`

		// spawn select squad
		SpawnSelectSquad float64 `json:"spawnSelectSquad,omitempty"`

		// spawn select vehicle
		SpawnSelectVehicle float64 `json:"spawnSelectVehicle,omitempty"`

		// stim damage healed
		StimDamageHealed float64 `json:"stimDamageHealed,omitempty"`

		// stopping power kills
		StoppingPowerKills float64 `json:"stoppingPowerKills,omitempty"`

		// stun hits
		StunHits float64 `json:"stunHits,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// survivor kills
		SurvivorKills float64 `json:"survivorKills,omitempty"`

		// tactical insertion spawns
		TacticalInsertionSpawns float64 `json:"tacticalInsertionSpawns,omitempty"`

		// tags captured
		TagsCaptured float64 `json:"tagsCaptured,omitempty"`

		// tags denied
		TagsDenied float64 `json:"tagsDenied,omitempty"`

		// tags largest bank
		TagsLargestBank float64 `json:"tagsLargestBank,omitempty"`

		// tags mega banked
		TagsMegaBanked float64 `json:"tagsMegaBanked,omitempty"`

		// thermite kills
		ThermiteKills float64 `json:"thermiteKills,omitempty"`

		// throwing knife kills
		ThrowingKnifeKills float64 `json:"throwingKnifeKills,omitempty"`

		// time crouched
		TimeCrouched float64 `json:"timeCrouched,omitempty"`

		// time on point
		TimeOnPoint float64 `json:"timeOnPoint,omitempty"`

		// time prone
		TimeProne float64 `json:"timeProne,omitempty"`

		// time spent as driver
		TimeSpentAsDriver float64 `json:"timeSpentAsDriver,omitempty"`

		// time spent as passenger
		TimeSpentAsPassenger float64 `json:"timeSpentAsPassenger,omitempty"`

		// time watching killcams
		TimeWatchingKillcams float64 `json:"timeWatchingKillcams,omitempty"`

		// times selected as squad leader
		TimesSelectedAsSquadLeader float64 `json:"timesSelectedAsSquadLeader,omitempty"`

		// trophy system hits
		TrophySystemHits float64 `json:"trophySystemHits,omitempty"`

		// weapon pickups
		WeaponPickups float64 `json:"weaponPickups,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeAccoladeDataProperties

	rcv.AdsKills = stage1.AdsKills
	rcv.AmmoBoxUsed = stage1.AmmoBoxUsed
	rcv.ArDeaths = stage1.ArDeaths
	rcv.ArHeadshots = stage1.ArHeadshots
	rcv.ArKills = stage1.ArKills
	rcv.Assaults = stage1.Assaults
	rcv.AvengerKills = stage1.AvengerKills
	rcv.BombDefused = stage1.BombDefused
	rcv.BombDetonated = stage1.BombDetonated
	rcv.BombPlanted = stage1.BombPlanted
	rcv.C4Kills = stage1.C4Kills
	rcv.Captures = stage1.Captures
	rcv.CarepackagesCaptured = stage1.CarepackagesCaptured
	rcv.CarrierKills = stage1.CarrierKills
	rcv.ClassChanges = stage1.ClassChanges
	rcv.ClaymoreKills = stage1.ClaymoreKills
	rcv.Clutch = stage1.Clutch
	rcv.ClutchRevives = stage1.ClutchRevives
	rcv.ComebackKills = stage1.ComebackKills
	rcv.DeadSilenceKills = stage1.DeadSilenceKills
	rcv.DeathsFromBehind = stage1.DeathsFromBehind
	rcv.DecoyHits = stage1.DecoyHits
	rcv.DefenderKills = stage1.DefenderKills
	rcv.Defends = stage1.Defends
	rcv.DeployableCoverUsed = stage1.DeployableCoverUsed
	rcv.DestroyedKillstreaks = stage1.DestroyedKillstreaks
	rcv.DistanceTraveledInVehicle = stage1.DistanceTraveledInVehicle
	rcv.DistanceTravelled = stage1.DistanceTravelled
	rcv.EmpDroneHits = stage1.EmpDroneHits
	rcv.ExecutionKills = stage1.ExecutionKills
	rcv.ExplosionsSurvived = stage1.ExplosionsSurvived
	rcv.FirstInfected = stage1.FirstInfected
	rcv.FlashbangHits = stage1.FlashbangHits
	rcv.FragKills = stage1.FragKills
	rcv.GasHits = stage1.GasHits
	rcv.Headshots = stage1.Headshots
	rcv.HigherRankedKills = stage1.HigherRankedKills
	rcv.HighestAvgAltitude = stage1.HighestAvgAltitude
	rcv.HighestMultikill = stage1.HighestMultikill
	rcv.HighestRankedKills = stage1.HighestRankedKills
	rcv.HipfireKills = stage1.HipfireKills
	rcv.InfectedKills = stage1.InfectedKills
	rcv.KillEnemyTeam = stage1.KillEnemyTeam
	rcv.Kills10NoDeaths = stage1.Kills10NoDeaths
	rcv.KillsFromBehind = stage1.KillsFromBehind
	rcv.KillstreakAUAVAssists = stage1.KillstreakAUAVAssists
	rcv.KillstreakAirKills = stage1.KillstreakAirKills
	rcv.KillstreakAirstrikeKills = stage1.KillstreakAirstrikeKills
	rcv.KillstreakCUAVAssists = stage1.KillstreakCUAVAssists
	rcv.KillstreakCarePackageUsed = stage1.KillstreakCarePackageUsed
	rcv.KillstreakChopperGunnerKills = stage1.KillstreakChopperGunnerKills
	rcv.KillstreakChopperSupportKills = stage1.KillstreakChopperSupportKills
	rcv.KillstreakCluserStrikeKills = stage1.KillstreakCluserStrikeKills
	rcv.KillstreakCruiseMissileKills = stage1.KillstreakCruiseMissileKills
	rcv.KillstreakEmergencyAirdropUsed = stage1.KillstreakEmergencyAirdropUsed
	rcv.KillstreakGroundKills = stage1.KillstreakGroundKills
	rcv.KillstreakGunshipKills = stage1.KillstreakGunshipKills
	rcv.KillstreakJuggernautKills = stage1.KillstreakJuggernautKills
	rcv.KillstreakKills = stage1.KillstreakKills
	rcv.KillstreakPersonalUAVKills = stage1.KillstreakPersonalUAVKills
	rcv.KillstreakSentryGunKills = stage1.KillstreakSentryGunKills
	rcv.KillstreakShieldTurretKills = stage1.KillstreakShieldTurretKills
	rcv.KillstreakTankKills = stage1.KillstreakTankKills
	rcv.KillstreakUAVAssists = stage1.KillstreakUAVAssists
	rcv.KillstreakVTOLJetKills = stage1.KillstreakVTOLJetKills
	rcv.KillstreakWheelsonKills = stage1.KillstreakWheelsonKills
	rcv.KillstreakWhitePhosphorousKillsAssists = stage1.KillstreakWhitePhosphorousKillsAssists
	rcv.LastSurvivor = stage1.LastSurvivor
	rcv.LauncherDeaths = stage1.LauncherDeaths
	rcv.LauncherHeadshots = stage1.LauncherHeadshots
	rcv.LauncherKills = stage1.LauncherKills
	rcv.LeastAssists = stage1.LeastAssists
	rcv.LeastDeaths = stage1.LeastDeaths
	rcv.LeastKills = stage1.LeastKills
	rcv.LmgDeaths = stage1.LmgDeaths
	rcv.LmgHeadshots = stage1.LmgHeadshots
	rcv.LmgKills = stage1.LmgKills
	rcv.LongestLife = stage1.LongestLife
	rcv.LongestStreak = stage1.LongestStreak
	rcv.LongestTimeSpentOnWeapon = stage1.LongestTimeSpentOnWeapon
	rcv.LongshotKills = stage1.LongshotKills
	rcv.LowerRankedKills = stage1.LowerRankedKills
	rcv.LowestAvgAltitude = stage1.LowestAvgAltitude
	rcv.MeleeDeaths = stage1.MeleeDeaths
	rcv.MeleeKills = stage1.MeleeKills
	rcv.MolotovKills = stage1.MolotovKills
	rcv.MostAssists = stage1.MostAssists
	rcv.MostDeaths = stage1.MostDeaths
	rcv.MostKills = stage1.MostKills
	rcv.MostKillsLeastDeaths = stage1.MostKillsLeastDeaths
	rcv.MostKillsLongestStreak = stage1.MostKillsLongestStreak
	rcv.MostKillsMostHeadshots = stage1.MostKillsMostHeadshots
	rcv.MostMultikills = stage1.MostMultikills
	rcv.NoDeathsFromBehind = stage1.NoDeathsFromBehind
	rcv.NoKill10Deaths = stage1.NoKill10Deaths
	rcv.NoKillNoDeath = stage1.NoKillNoDeath
	rcv.NoKillsWithDeath = stage1.NoKillsWithDeath
	rcv.OneShotOneKills = stage1.OneShotOneKills
	rcv.PenetrationKills = stage1.PenetrationKills
	rcv.Pickups = stage1.Pickups
	rcv.PistolHeadshots = stage1.PistolHeadshots
	rcv.PistolKills = stage1.PistolKills
	rcv.PistolPeaths = stage1.PistolPeaths
	rcv.PointBlankKills = stage1.PointBlankKills
	rcv.ProximityMineKills = stage1.ProximityMineKills
	rcv.ReconDroneMarks = stage1.ReconDroneMarks
	rcv.Reloads = stage1.Reloads
	rcv.Returns = stage1.Returns
	rcv.RevengeKills = stage1.RevengeKills
	rcv.RiotShieldDamageAbsorbed = stage1.RiotShieldDamageAbsorbed
	rcv.SemtexKills = stage1.SemtexKills
	rcv.Setbacks = stage1.Setbacks
	rcv.ShortestLife = stage1.ShortestLife
	rcv.ShotgunDeaths = stage1.ShotgunDeaths
	rcv.ShotgunHeadshots = stage1.ShotgunHeadshots
	rcv.ShotgunKills = stage1.ShotgunKills
	rcv.ShotsFired = stage1.ShotsFired
	rcv.SkippedKillcams = stage1.SkippedKillcams
	rcv.SmgDeaths = stage1.SmgDeaths
	rcv.SmgHeadshots = stage1.SmgHeadshots
	rcv.SmgKills = stage1.SmgKills
	rcv.SmokesUsed = stage1.SmokesUsed
	rcv.SnapshotHits = stage1.SnapshotHits
	rcv.SniperDeaths = stage1.SniperDeaths
	rcv.SniperHeadshots = stage1.SniperHeadshots
	rcv.SniperKills = stage1.SniperKills
	rcv.SpawnSelectBase = stage1.SpawnSelectBase
	rcv.SpawnSelectFlag = stage1.SpawnSelectFlag
	rcv.SpawnSelectSquad = stage1.SpawnSelectSquad
	rcv.SpawnSelectVehicle = stage1.SpawnSelectVehicle
	rcv.StimDamageHealed = stage1.StimDamageHealed
	rcv.StoppingPowerKills = stage1.StoppingPowerKills
	rcv.StunHits = stage1.StunHits
	rcv.Suicides = stage1.Suicides
	rcv.SurvivorKills = stage1.SurvivorKills
	rcv.TacticalInsertionSpawns = stage1.TacticalInsertionSpawns
	rcv.TagsCaptured = stage1.TagsCaptured
	rcv.TagsDenied = stage1.TagsDenied
	rcv.TagsLargestBank = stage1.TagsLargestBank
	rcv.TagsMegaBanked = stage1.TagsMegaBanked
	rcv.ThermiteKills = stage1.ThermiteKills
	rcv.ThrowingKnifeKills = stage1.ThrowingKnifeKills
	rcv.TimeCrouched = stage1.TimeCrouched
	rcv.TimeOnPoint = stage1.TimeOnPoint
	rcv.TimeProne = stage1.TimeProne
	rcv.TimeSpentAsDriver = stage1.TimeSpentAsDriver
	rcv.TimeSpentAsPassenger = stage1.TimeSpentAsPassenger
	rcv.TimeWatchingKillcams = stage1.TimeWatchingKillcams
	rcv.TimesSelectedAsSquadLeader = stage1.TimesSelectedAsSquadLeader
	rcv.TrophySystemHits = stage1.TrophySystemHits
	rcv.WeaponPickups = stage1.WeaponPickups
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "adsKills")
	delete(stage2, "ammoBoxUsed")
	delete(stage2, "arDeaths")
	delete(stage2, "arHeadshots")
	delete(stage2, "arKills")
	delete(stage2, "assaults")
	delete(stage2, "avengerKills")
	delete(stage2, "bombDefused")
	delete(stage2, "bombDetonated")
	delete(stage2, "bombPlanted")
	delete(stage2, "c4Kills")
	delete(stage2, "captures")
	delete(stage2, "carepackagesCaptured")
	delete(stage2, "carrierKills")
	delete(stage2, "classChanges")
	delete(stage2, "claymoreKills")
	delete(stage2, "clutch")
	delete(stage2, "clutchRevives")
	delete(stage2, "comebackKills")
	delete(stage2, "deadSilenceKills")
	delete(stage2, "deathsFromBehind")
	delete(stage2, "decoyHits")
	delete(stage2, "defenderKills")
	delete(stage2, "defends")
	delete(stage2, "deployableCoverUsed")
	delete(stage2, "destroyedKillstreaks")
	delete(stage2, "distanceTraveledInVehicle")
	delete(stage2, "distanceTravelled")
	delete(stage2, "empDroneHits")
	delete(stage2, "executionKills")
	delete(stage2, "explosionsSurvived")
	delete(stage2, "firstInfected")
	delete(stage2, "flashbangHits")
	delete(stage2, "fragKills")
	delete(stage2, "gasHits")
	delete(stage2, "headshots")
	delete(stage2, "higherRankedKills")
	delete(stage2, "highestAvgAltitude")
	delete(stage2, "highestMultikill")
	delete(stage2, "highestRankedKills")
	delete(stage2, "hipfireKills")
	delete(stage2, "infectedKills")
	delete(stage2, "killEnemyTeam")
	delete(stage2, "kills10NoDeaths")
	delete(stage2, "killsFromBehind")
	delete(stage2, "killstreakAUAVAssists")
	delete(stage2, "killstreakAirKills")
	delete(stage2, "killstreakAirstrikeKills")
	delete(stage2, "killstreakCUAVAssists")
	delete(stage2, "killstreakCarePackageUsed")
	delete(stage2, "killstreakChopperGunnerKills")
	delete(stage2, "killstreakChopperSupportKills")
	delete(stage2, "killstreakCluserStrikeKills")
	delete(stage2, "killstreakCruiseMissileKills")
	delete(stage2, "killstreakEmergencyAirdropUsed")
	delete(stage2, "killstreakGroundKills")
	delete(stage2, "killstreakGunshipKills")
	delete(stage2, "killstreakJuggernautKills")
	delete(stage2, "killstreakKills")
	delete(stage2, "killstreakPersonalUAVKills")
	delete(stage2, "killstreakSentryGunKills")
	delete(stage2, "killstreakShieldTurretKills")
	delete(stage2, "killstreakTankKills")
	delete(stage2, "killstreakUAVAssists")
	delete(stage2, "killstreakVTOLJetKills")
	delete(stage2, "killstreakWheelsonKills")
	delete(stage2, "killstreakWhitePhosphorousKillsAssists")
	delete(stage2, "lastSurvivor")
	delete(stage2, "launcherDeaths")
	delete(stage2, "launcherHeadshots")
	delete(stage2, "launcherKills")
	delete(stage2, "leastAssists")
	delete(stage2, "leastDeaths")
	delete(stage2, "leastKills")
	delete(stage2, "lmgDeaths")
	delete(stage2, "lmgHeadshots")
	delete(stage2, "lmgKills")
	delete(stage2, "longestLife")
	delete(stage2, "longestStreak")
	delete(stage2, "longestTimeSpentOnWeapon")
	delete(stage2, "longshotKills")
	delete(stage2, "lowerRankedKills")
	delete(stage2, "lowestAvgAltitude")
	delete(stage2, "meleeDeaths")
	delete(stage2, "meleeKills")
	delete(stage2, "molotovKills")
	delete(stage2, "mostAssists")
	delete(stage2, "mostDeaths")
	delete(stage2, "mostKills")
	delete(stage2, "mostKillsLeastDeaths")
	delete(stage2, "mostKillsLongestStreak")
	delete(stage2, "mostKillsMostHeadshots")
	delete(stage2, "mostMultikills")
	delete(stage2, "noDeathsFromBehind")
	delete(stage2, "noKill10Deaths")
	delete(stage2, "noKillNoDeath")
	delete(stage2, "noKillsWithDeath")
	delete(stage2, "oneShotOneKills")
	delete(stage2, "penetrationKills")
	delete(stage2, "pickups")
	delete(stage2, "pistolHeadshots")
	delete(stage2, "pistolKills")
	delete(stage2, "pistolPeaths")
	delete(stage2, "pointBlankKills")
	delete(stage2, "proximityMineKills")
	delete(stage2, "reconDroneMarks")
	delete(stage2, "reloads")
	delete(stage2, "returns")
	delete(stage2, "revengeKills")
	delete(stage2, "riotShieldDamageAbsorbed")
	delete(stage2, "semtexKills")
	delete(stage2, "setbacks")
	delete(stage2, "shortestLife")
	delete(stage2, "shotgunDeaths")
	delete(stage2, "shotgunHeadshots")
	delete(stage2, "shotgunKills")
	delete(stage2, "shotsFired")
	delete(stage2, "skippedKillcams")
	delete(stage2, "smgDeaths")
	delete(stage2, "smgHeadshots")
	delete(stage2, "smgKills")
	delete(stage2, "smokesUsed")
	delete(stage2, "snapshotHits")
	delete(stage2, "sniperDeaths")
	delete(stage2, "sniperHeadshots")
	delete(stage2, "sniperKills")
	delete(stage2, "spawnSelectBase")
	delete(stage2, "spawnSelectFlag")
	delete(stage2, "spawnSelectSquad")
	delete(stage2, "spawnSelectVehicle")
	delete(stage2, "stimDamageHealed")
	delete(stage2, "stoppingPowerKills")
	delete(stage2, "stunHits")
	delete(stage2, "suicides")
	delete(stage2, "survivorKills")
	delete(stage2, "tacticalInsertionSpawns")
	delete(stage2, "tagsCaptured")
	delete(stage2, "tagsDenied")
	delete(stage2, "tagsLargestBank")
	delete(stage2, "tagsMegaBanked")
	delete(stage2, "thermiteKills")
	delete(stage2, "throwingKnifeKills")
	delete(stage2, "timeCrouched")
	delete(stage2, "timeOnPoint")
	delete(stage2, "timeProne")
	delete(stage2, "timeSpentAsDriver")
	delete(stage2, "timeSpentAsPassenger")
	delete(stage2, "timeWatchingKillcams")
	delete(stage2, "timesSelectedAsSquadLeader")
	delete(stage2, "trophySystemHits")
	delete(stage2, "weaponPickups")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAccoladeDataPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeAccoladeDataProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// ads kills
		AdsKills float64 `json:"adsKills,omitempty"`

		// ammo box used
		AmmoBoxUsed float64 `json:"ammoBoxUsed,omitempty"`

		// ar deaths
		ArDeaths float64 `json:"arDeaths,omitempty"`

		// ar headshots
		ArHeadshots float64 `json:"arHeadshots,omitempty"`

		// ar kills
		ArKills float64 `json:"arKills,omitempty"`

		// assaults
		Assaults float64 `json:"assaults,omitempty"`

		// avenger kills
		AvengerKills float64 `json:"avengerKills,omitempty"`

		// bomb defused
		BombDefused float64 `json:"bombDefused,omitempty"`

		// bomb detonated
		BombDetonated float64 `json:"bombDetonated,omitempty"`

		// bomb planted
		BombPlanted float64 `json:"bombPlanted,omitempty"`

		// c4 kills
		C4Kills float64 `json:"c4Kills,omitempty"`

		// captures
		Captures float64 `json:"captures,omitempty"`

		// carepackages captured
		CarepackagesCaptured float64 `json:"carepackagesCaptured,omitempty"`

		// carrier kills
		CarrierKills float64 `json:"carrierKills,omitempty"`

		// class changes
		ClassChanges float64 `json:"classChanges,omitempty"`

		// claymore kills
		ClaymoreKills float64 `json:"claymoreKills,omitempty"`

		// clutch
		Clutch float64 `json:"clutch,omitempty"`

		// clutch revives
		ClutchRevives float64 `json:"clutchRevives,omitempty"`

		// comeback kills
		ComebackKills float64 `json:"comebackKills,omitempty"`

		// dead silence kills
		DeadSilenceKills float64 `json:"deadSilenceKills,omitempty"`

		// deaths from behind
		DeathsFromBehind float64 `json:"deathsFromBehind,omitempty"`

		// decoy hits
		DecoyHits float64 `json:"decoyHits,omitempty"`

		// defender kills
		DefenderKills float64 `json:"defenderKills,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// deployable cover used
		DeployableCoverUsed float64 `json:"deployableCoverUsed,omitempty"`

		// destroyed killstreaks
		DestroyedKillstreaks float64 `json:"destroyedKillstreaks,omitempty"`

		// distance traveled in vehicle
		DistanceTraveledInVehicle float64 `json:"distanceTraveledInVehicle,omitempty"`

		// distance travelled
		DistanceTravelled float64 `json:"distanceTravelled,omitempty"`

		// emp drone hits
		EmpDroneHits float64 `json:"empDroneHits,omitempty"`

		// execution kills
		ExecutionKills float64 `json:"executionKills,omitempty"`

		// explosions survived
		ExplosionsSurvived float64 `json:"explosionsSurvived,omitempty"`

		// first infected
		FirstInfected float64 `json:"firstInfected,omitempty"`

		// flashbang hits
		FlashbangHits float64 `json:"flashbangHits,omitempty"`

		// frag kills
		FragKills float64 `json:"fragKills,omitempty"`

		// gas hits
		GasHits float64 `json:"gasHits,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// higher ranked kills
		HigherRankedKills float64 `json:"higherRankedKills,omitempty"`

		// highest avg altitude
		HighestAvgAltitude float64 `json:"highestAvgAltitude,omitempty"`

		// highest multikill
		HighestMultikill float64 `json:"highestMultikill,omitempty"`

		// highest ranked kills
		HighestRankedKills float64 `json:"highestRankedKills,omitempty"`

		// hipfire kills
		HipfireKills float64 `json:"hipfireKills,omitempty"`

		// infected kills
		InfectedKills float64 `json:"infectedKills,omitempty"`

		// kill enemy team
		KillEnemyTeam float64 `json:"killEnemyTeam,omitempty"`

		// kills10 no deaths
		Kills10NoDeaths float64 `json:"kills10NoDeaths,omitempty"`

		// kills from behind
		KillsFromBehind float64 `json:"killsFromBehind,omitempty"`

		// killstreak a u a v assists
		KillstreakAUAVAssists float64 `json:"killstreakAUAVAssists,omitempty"`

		// killstreak air kills
		KillstreakAirKills float64 `json:"killstreakAirKills,omitempty"`

		// killstreak airstrike kills
		KillstreakAirstrikeKills float64 `json:"killstreakAirstrikeKills,omitempty"`

		// killstreak c u a v assists
		KillstreakCUAVAssists float64 `json:"killstreakCUAVAssists,omitempty"`

		// killstreak care package used
		KillstreakCarePackageUsed float64 `json:"killstreakCarePackageUsed,omitempty"`

		// killstreak chopper gunner kills
		KillstreakChopperGunnerKills float64 `json:"killstreakChopperGunnerKills,omitempty"`

		// killstreak chopper support kills
		KillstreakChopperSupportKills float64 `json:"killstreakChopperSupportKills,omitempty"`

		// killstreak cluser strike kills
		KillstreakCluserStrikeKills float64 `json:"killstreakCluserStrikeKills,omitempty"`

		// killstreak cruise missile kills
		KillstreakCruiseMissileKills float64 `json:"killstreakCruiseMissileKills,omitempty"`

		// killstreak emergency airdrop used
		KillstreakEmergencyAirdropUsed float64 `json:"killstreakEmergencyAirdropUsed,omitempty"`

		// killstreak ground kills
		KillstreakGroundKills float64 `json:"killstreakGroundKills,omitempty"`

		// killstreak gunship kills
		KillstreakGunshipKills float64 `json:"killstreakGunshipKills,omitempty"`

		// killstreak juggernaut kills
		KillstreakJuggernautKills float64 `json:"killstreakJuggernautKills,omitempty"`

		// killstreak kills
		KillstreakKills float64 `json:"killstreakKills,omitempty"`

		// killstreak personal u a v kills
		KillstreakPersonalUAVKills float64 `json:"killstreakPersonalUAVKills,omitempty"`

		// killstreak sentry gun kills
		KillstreakSentryGunKills float64 `json:"killstreakSentryGunKills,omitempty"`

		// killstreak shield turret kills
		KillstreakShieldTurretKills float64 `json:"killstreakShieldTurretKills,omitempty"`

		// killstreak tank kills
		KillstreakTankKills float64 `json:"killstreakTankKills,omitempty"`

		// killstreak u a v assists
		KillstreakUAVAssists float64 `json:"killstreakUAVAssists,omitempty"`

		// killstreak v t o l jet kills
		KillstreakVTOLJetKills float64 `json:"killstreakVTOLJetKills,omitempty"`

		// killstreak wheelson kills
		KillstreakWheelsonKills float64 `json:"killstreakWheelsonKills,omitempty"`

		// killstreak white phosphorous kills assists
		KillstreakWhitePhosphorousKillsAssists float64 `json:"killstreakWhitePhosphorousKillsAssists,omitempty"`

		// last survivor
		LastSurvivor float64 `json:"lastSurvivor,omitempty"`

		// launcher deaths
		LauncherDeaths float64 `json:"launcherDeaths,omitempty"`

		// launcher headshots
		LauncherHeadshots float64 `json:"launcherHeadshots,omitempty"`

		// launcher kills
		LauncherKills float64 `json:"launcherKills,omitempty"`

		// least assists
		LeastAssists float64 `json:"leastAssists,omitempty"`

		// least deaths
		LeastDeaths float64 `json:"leastDeaths,omitempty"`

		// least kills
		LeastKills float64 `json:"leastKills,omitempty"`

		// lmg deaths
		LmgDeaths float64 `json:"lmgDeaths,omitempty"`

		// lmg headshots
		LmgHeadshots float64 `json:"lmgHeadshots,omitempty"`

		// lmg kills
		LmgKills float64 `json:"lmgKills,omitempty"`

		// longest life
		LongestLife float64 `json:"longestLife,omitempty"`

		// longest streak
		LongestStreak float64 `json:"longestStreak,omitempty"`

		// longest time spent on weapon
		LongestTimeSpentOnWeapon float64 `json:"longestTimeSpentOnWeapon,omitempty"`

		// longshot kills
		LongshotKills float64 `json:"longshotKills,omitempty"`

		// lower ranked kills
		LowerRankedKills float64 `json:"lowerRankedKills,omitempty"`

		// lowest avg altitude
		LowestAvgAltitude float64 `json:"lowestAvgAltitude,omitempty"`

		// melee deaths
		MeleeDeaths float64 `json:"meleeDeaths,omitempty"`

		// melee kills
		MeleeKills float64 `json:"meleeKills,omitempty"`

		// molotov kills
		MolotovKills float64 `json:"molotovKills,omitempty"`

		// most assists
		MostAssists float64 `json:"mostAssists,omitempty"`

		// most deaths
		MostDeaths float64 `json:"mostDeaths,omitempty"`

		// most kills
		MostKills float64 `json:"mostKills,omitempty"`

		// most kills least deaths
		MostKillsLeastDeaths float64 `json:"mostKillsLeastDeaths,omitempty"`

		// most kills longest streak
		MostKillsLongestStreak float64 `json:"mostKillsLongestStreak,omitempty"`

		// most kills most headshots
		MostKillsMostHeadshots float64 `json:"mostKillsMostHeadshots,omitempty"`

		// most multikills
		MostMultikills float64 `json:"mostMultikills,omitempty"`

		// no deaths from behind
		NoDeathsFromBehind float64 `json:"noDeathsFromBehind,omitempty"`

		// no kill10 deaths
		NoKill10Deaths float64 `json:"noKill10Deaths,omitempty"`

		// no kill no death
		NoKillNoDeath float64 `json:"noKillNoDeath,omitempty"`

		// no kills with death
		NoKillsWithDeath float64 `json:"noKillsWithDeath,omitempty"`

		// one shot one kills
		OneShotOneKills float64 `json:"oneShotOneKills,omitempty"`

		// penetration kills
		PenetrationKills float64 `json:"penetrationKills,omitempty"`

		// pickups
		Pickups float64 `json:"pickups,omitempty"`

		// pistol headshots
		PistolHeadshots float64 `json:"pistolHeadshots,omitempty"`

		// pistol kills
		PistolKills float64 `json:"pistolKills,omitempty"`

		// pistol peaths
		PistolPeaths float64 `json:"pistolPeaths,omitempty"`

		// point blank kills
		PointBlankKills float64 `json:"pointBlankKills,omitempty"`

		// proximity mine kills
		ProximityMineKills float64 `json:"proximityMineKills,omitempty"`

		// recon drone marks
		ReconDroneMarks float64 `json:"reconDroneMarks,omitempty"`

		// reloads
		Reloads float64 `json:"reloads,omitempty"`

		// returns
		Returns float64 `json:"returns,omitempty"`

		// revenge kills
		RevengeKills float64 `json:"revengeKills,omitempty"`

		// riot shield damage absorbed
		RiotShieldDamageAbsorbed float64 `json:"riotShieldDamageAbsorbed,omitempty"`

		// semtex kills
		SemtexKills float64 `json:"semtexKills,omitempty"`

		// setbacks
		Setbacks float64 `json:"setbacks,omitempty"`

		// shortest life
		ShortestLife float64 `json:"shortestLife,omitempty"`

		// shotgun deaths
		ShotgunDeaths float64 `json:"shotgunDeaths,omitempty"`

		// shotgun headshots
		ShotgunHeadshots float64 `json:"shotgunHeadshots,omitempty"`

		// shotgun kills
		ShotgunKills float64 `json:"shotgunKills,omitempty"`

		// shots fired
		ShotsFired float64 `json:"shotsFired,omitempty"`

		// skipped killcams
		SkippedKillcams float64 `json:"skippedKillcams,omitempty"`

		// smg deaths
		SmgDeaths float64 `json:"smgDeaths,omitempty"`

		// smg headshots
		SmgHeadshots float64 `json:"smgHeadshots,omitempty"`

		// smg kills
		SmgKills float64 `json:"smgKills,omitempty"`

		// smokes used
		SmokesUsed float64 `json:"smokesUsed,omitempty"`

		// snapshot hits
		SnapshotHits float64 `json:"snapshotHits,omitempty"`

		// sniper deaths
		SniperDeaths float64 `json:"sniperDeaths,omitempty"`

		// sniper headshots
		SniperHeadshots float64 `json:"sniperHeadshots,omitempty"`

		// sniper kills
		SniperKills float64 `json:"sniperKills,omitempty"`

		// spawn select base
		SpawnSelectBase float64 `json:"spawnSelectBase,omitempty"`

		// spawn select flag
		SpawnSelectFlag float64 `json:"spawnSelectFlag,omitempty"`

		// spawn select squad
		SpawnSelectSquad float64 `json:"spawnSelectSquad,omitempty"`

		// spawn select vehicle
		SpawnSelectVehicle float64 `json:"spawnSelectVehicle,omitempty"`

		// stim damage healed
		StimDamageHealed float64 `json:"stimDamageHealed,omitempty"`

		// stopping power kills
		StoppingPowerKills float64 `json:"stoppingPowerKills,omitempty"`

		// stun hits
		StunHits float64 `json:"stunHits,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// survivor kills
		SurvivorKills float64 `json:"survivorKills,omitempty"`

		// tactical insertion spawns
		TacticalInsertionSpawns float64 `json:"tacticalInsertionSpawns,omitempty"`

		// tags captured
		TagsCaptured float64 `json:"tagsCaptured,omitempty"`

		// tags denied
		TagsDenied float64 `json:"tagsDenied,omitempty"`

		// tags largest bank
		TagsLargestBank float64 `json:"tagsLargestBank,omitempty"`

		// tags mega banked
		TagsMegaBanked float64 `json:"tagsMegaBanked,omitempty"`

		// thermite kills
		ThermiteKills float64 `json:"thermiteKills,omitempty"`

		// throwing knife kills
		ThrowingKnifeKills float64 `json:"throwingKnifeKills,omitempty"`

		// time crouched
		TimeCrouched float64 `json:"timeCrouched,omitempty"`

		// time on point
		TimeOnPoint float64 `json:"timeOnPoint,omitempty"`

		// time prone
		TimeProne float64 `json:"timeProne,omitempty"`

		// time spent as driver
		TimeSpentAsDriver float64 `json:"timeSpentAsDriver,omitempty"`

		// time spent as passenger
		TimeSpentAsPassenger float64 `json:"timeSpentAsPassenger,omitempty"`

		// time watching killcams
		TimeWatchingKillcams float64 `json:"timeWatchingKillcams,omitempty"`

		// times selected as squad leader
		TimesSelectedAsSquadLeader float64 `json:"timesSelectedAsSquadLeader,omitempty"`

		// trophy system hits
		TrophySystemHits float64 `json:"trophySystemHits,omitempty"`

		// weapon pickups
		WeaponPickups float64 `json:"weaponPickups,omitempty"`
	}

	stage1.AdsKills = m.AdsKills
	stage1.AmmoBoxUsed = m.AmmoBoxUsed
	stage1.ArDeaths = m.ArDeaths
	stage1.ArHeadshots = m.ArHeadshots
	stage1.ArKills = m.ArKills
	stage1.Assaults = m.Assaults
	stage1.AvengerKills = m.AvengerKills
	stage1.BombDefused = m.BombDefused
	stage1.BombDetonated = m.BombDetonated
	stage1.BombPlanted = m.BombPlanted
	stage1.C4Kills = m.C4Kills
	stage1.Captures = m.Captures
	stage1.CarepackagesCaptured = m.CarepackagesCaptured
	stage1.CarrierKills = m.CarrierKills
	stage1.ClassChanges = m.ClassChanges
	stage1.ClaymoreKills = m.ClaymoreKills
	stage1.Clutch = m.Clutch
	stage1.ClutchRevives = m.ClutchRevives
	stage1.ComebackKills = m.ComebackKills
	stage1.DeadSilenceKills = m.DeadSilenceKills
	stage1.DeathsFromBehind = m.DeathsFromBehind
	stage1.DecoyHits = m.DecoyHits
	stage1.DefenderKills = m.DefenderKills
	stage1.Defends = m.Defends
	stage1.DeployableCoverUsed = m.DeployableCoverUsed
	stage1.DestroyedKillstreaks = m.DestroyedKillstreaks
	stage1.DistanceTraveledInVehicle = m.DistanceTraveledInVehicle
	stage1.DistanceTravelled = m.DistanceTravelled
	stage1.EmpDroneHits = m.EmpDroneHits
	stage1.ExecutionKills = m.ExecutionKills
	stage1.ExplosionsSurvived = m.ExplosionsSurvived
	stage1.FirstInfected = m.FirstInfected
	stage1.FlashbangHits = m.FlashbangHits
	stage1.FragKills = m.FragKills
	stage1.GasHits = m.GasHits
	stage1.Headshots = m.Headshots
	stage1.HigherRankedKills = m.HigherRankedKills
	stage1.HighestAvgAltitude = m.HighestAvgAltitude
	stage1.HighestMultikill = m.HighestMultikill
	stage1.HighestRankedKills = m.HighestRankedKills
	stage1.HipfireKills = m.HipfireKills
	stage1.InfectedKills = m.InfectedKills
	stage1.KillEnemyTeam = m.KillEnemyTeam
	stage1.Kills10NoDeaths = m.Kills10NoDeaths
	stage1.KillsFromBehind = m.KillsFromBehind
	stage1.KillstreakAUAVAssists = m.KillstreakAUAVAssists
	stage1.KillstreakAirKills = m.KillstreakAirKills
	stage1.KillstreakAirstrikeKills = m.KillstreakAirstrikeKills
	stage1.KillstreakCUAVAssists = m.KillstreakCUAVAssists
	stage1.KillstreakCarePackageUsed = m.KillstreakCarePackageUsed
	stage1.KillstreakChopperGunnerKills = m.KillstreakChopperGunnerKills
	stage1.KillstreakChopperSupportKills = m.KillstreakChopperSupportKills
	stage1.KillstreakCluserStrikeKills = m.KillstreakCluserStrikeKills
	stage1.KillstreakCruiseMissileKills = m.KillstreakCruiseMissileKills
	stage1.KillstreakEmergencyAirdropUsed = m.KillstreakEmergencyAirdropUsed
	stage1.KillstreakGroundKills = m.KillstreakGroundKills
	stage1.KillstreakGunshipKills = m.KillstreakGunshipKills
	stage1.KillstreakJuggernautKills = m.KillstreakJuggernautKills
	stage1.KillstreakKills = m.KillstreakKills
	stage1.KillstreakPersonalUAVKills = m.KillstreakPersonalUAVKills
	stage1.KillstreakSentryGunKills = m.KillstreakSentryGunKills
	stage1.KillstreakShieldTurretKills = m.KillstreakShieldTurretKills
	stage1.KillstreakTankKills = m.KillstreakTankKills
	stage1.KillstreakUAVAssists = m.KillstreakUAVAssists
	stage1.KillstreakVTOLJetKills = m.KillstreakVTOLJetKills
	stage1.KillstreakWheelsonKills = m.KillstreakWheelsonKills
	stage1.KillstreakWhitePhosphorousKillsAssists = m.KillstreakWhitePhosphorousKillsAssists
	stage1.LastSurvivor = m.LastSurvivor
	stage1.LauncherDeaths = m.LauncherDeaths
	stage1.LauncherHeadshots = m.LauncherHeadshots
	stage1.LauncherKills = m.LauncherKills
	stage1.LeastAssists = m.LeastAssists
	stage1.LeastDeaths = m.LeastDeaths
	stage1.LeastKills = m.LeastKills
	stage1.LmgDeaths = m.LmgDeaths
	stage1.LmgHeadshots = m.LmgHeadshots
	stage1.LmgKills = m.LmgKills
	stage1.LongestLife = m.LongestLife
	stage1.LongestStreak = m.LongestStreak
	stage1.LongestTimeSpentOnWeapon = m.LongestTimeSpentOnWeapon
	stage1.LongshotKills = m.LongshotKills
	stage1.LowerRankedKills = m.LowerRankedKills
	stage1.LowestAvgAltitude = m.LowestAvgAltitude
	stage1.MeleeDeaths = m.MeleeDeaths
	stage1.MeleeKills = m.MeleeKills
	stage1.MolotovKills = m.MolotovKills
	stage1.MostAssists = m.MostAssists
	stage1.MostDeaths = m.MostDeaths
	stage1.MostKills = m.MostKills
	stage1.MostKillsLeastDeaths = m.MostKillsLeastDeaths
	stage1.MostKillsLongestStreak = m.MostKillsLongestStreak
	stage1.MostKillsMostHeadshots = m.MostKillsMostHeadshots
	stage1.MostMultikills = m.MostMultikills
	stage1.NoDeathsFromBehind = m.NoDeathsFromBehind
	stage1.NoKill10Deaths = m.NoKill10Deaths
	stage1.NoKillNoDeath = m.NoKillNoDeath
	stage1.NoKillsWithDeath = m.NoKillsWithDeath
	stage1.OneShotOneKills = m.OneShotOneKills
	stage1.PenetrationKills = m.PenetrationKills
	stage1.Pickups = m.Pickups
	stage1.PistolHeadshots = m.PistolHeadshots
	stage1.PistolKills = m.PistolKills
	stage1.PistolPeaths = m.PistolPeaths
	stage1.PointBlankKills = m.PointBlankKills
	stage1.ProximityMineKills = m.ProximityMineKills
	stage1.ReconDroneMarks = m.ReconDroneMarks
	stage1.Reloads = m.Reloads
	stage1.Returns = m.Returns
	stage1.RevengeKills = m.RevengeKills
	stage1.RiotShieldDamageAbsorbed = m.RiotShieldDamageAbsorbed
	stage1.SemtexKills = m.SemtexKills
	stage1.Setbacks = m.Setbacks
	stage1.ShortestLife = m.ShortestLife
	stage1.ShotgunDeaths = m.ShotgunDeaths
	stage1.ShotgunHeadshots = m.ShotgunHeadshots
	stage1.ShotgunKills = m.ShotgunKills
	stage1.ShotsFired = m.ShotsFired
	stage1.SkippedKillcams = m.SkippedKillcams
	stage1.SmgDeaths = m.SmgDeaths
	stage1.SmgHeadshots = m.SmgHeadshots
	stage1.SmgKills = m.SmgKills
	stage1.SmokesUsed = m.SmokesUsed
	stage1.SnapshotHits = m.SnapshotHits
	stage1.SniperDeaths = m.SniperDeaths
	stage1.SniperHeadshots = m.SniperHeadshots
	stage1.SniperKills = m.SniperKills
	stage1.SpawnSelectBase = m.SpawnSelectBase
	stage1.SpawnSelectFlag = m.SpawnSelectFlag
	stage1.SpawnSelectSquad = m.SpawnSelectSquad
	stage1.SpawnSelectVehicle = m.SpawnSelectVehicle
	stage1.StimDamageHealed = m.StimDamageHealed
	stage1.StoppingPowerKills = m.StoppingPowerKills
	stage1.StunHits = m.StunHits
	stage1.Suicides = m.Suicides
	stage1.SurvivorKills = m.SurvivorKills
	stage1.TacticalInsertionSpawns = m.TacticalInsertionSpawns
	stage1.TagsCaptured = m.TagsCaptured
	stage1.TagsDenied = m.TagsDenied
	stage1.TagsLargestBank = m.TagsLargestBank
	stage1.TagsMegaBanked = m.TagsMegaBanked
	stage1.ThermiteKills = m.ThermiteKills
	stage1.ThrowingKnifeKills = m.ThrowingKnifeKills
	stage1.TimeCrouched = m.TimeCrouched
	stage1.TimeOnPoint = m.TimeOnPoint
	stage1.TimeProne = m.TimeProne
	stage1.TimeSpentAsDriver = m.TimeSpentAsDriver
	stage1.TimeSpentAsPassenger = m.TimeSpentAsPassenger
	stage1.TimeWatchingKillcams = m.TimeWatchingKillcams
	stage1.TimesSelectedAsSquadLeader = m.TimesSelectedAsSquadLeader
	stage1.TrophySystemHits = m.TrophySystemHits
	stage1.WeaponPickups = m.WeaponPickups

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAccoladeDataPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAccoladeDataPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime accolade data properties
func (m *GamerStatsResponseDataLifetimeAccoladeDataProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAccoladeDataProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAccoladeDataProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeAccoladeDataProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeAll gamer stats response data lifetime all
//
// swagger:model GamerStatsResponseDataLifetimeAll
type GamerStatsResponseDataLifetimeAll struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeAllProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime all additional properties
	GamerStatsResponseDataLifetimeAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeAllProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeAllProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime all
func (m *GamerStatsResponseDataLifetimeAll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeAll) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "all" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAll) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeAllProperties gamer stats response data lifetime all properties
//
// swagger:model GamerStatsResponseDataLifetimeAllProperties
type GamerStatsResponseDataLifetimeAllProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// assists
	Assists float64 `json:"assists,omitempty"`

	// best assists
	BestAssists float64 `json:"bestAssists,omitempty"`

	// best captures
	BestCaptures float64 `json:"bestCaptures,omitempty"`

	// best confirmed
	BestConfirmed float64 `json:"bestConfirmed,omitempty"`

	// best damage
	BestDamage float64 `json:"bestDamage,omitempty"`

	// best deaths
	BestDeaths float64 `json:"bestDeaths,omitempty"`

	// best defends
	BestDefends float64 `json:"bestDefends,omitempty"`

	// best defuses
	BestDefuses float64 `json:"bestDefuses,omitempty"`

	// best denied
	BestDenied float64 `json:"bestDenied,omitempty"`

	// best destructions
	BestDestructions float64 `json:"bestDestructions,omitempty"`

	// best fieldgoals
	BestFieldgoals float64 `json:"bestFieldgoals,omitempty"`

	// best k d
	BestKD float64 `json:"bestKD,omitempty"`

	// best kill chains
	BestKillChains float64 `json:"bestKillChains,omitempty"`

	// best kill streak
	BestKillStreak float64 `json:"bestKillStreak,omitempty"`

	// best kills
	BestKills float64 `json:"bestKills,omitempty"`

	// best kills as infected
	BestKillsAsInfected float64 `json:"bestKillsAsInfected,omitempty"`

	// best kills as survivor
	BestKillsAsSurvivor float64 `json:"bestKillsAsSurvivor,omitempty"`

	// best match bonus xp
	BestMatchBonusXp float64 `json:"bestMatchBonusXp,omitempty"`

	// best match xp
	BestMatchXp float64 `json:"bestMatchXp,omitempty"`

	// best medal xp
	BestMedalXp float64 `json:"bestMedalXp,omitempty"`

	// best plants
	BestPlants float64 `json:"bestPlants,omitempty"`

	// best rescues
	BestRescues float64 `json:"bestRescues,omitempty"`

	// best returns
	BestReturns float64 `json:"bestReturns,omitempty"`

	// best s p m
	BestSPM float64 `json:"bestSPM,omitempty"`

	// best score
	BestScore float64 `json:"bestScore,omitempty"`

	// best score xp
	BestScoreXp float64 `json:"bestScoreXp,omitempty"`

	// best setbacks
	BestSetbacks float64 `json:"bestSetbacks,omitempty"`

	// best sguard wave
	BestSguardWave float64 `json:"bestSguardWave,omitempty"`

	// best sguard weapon level
	BestSguardWeaponLevel float64 `json:"bestSguardWeaponLevel,omitempty"`

	// best squard crates
	BestSquardCrates float64 `json:"bestSquardCrates,omitempty"`

	// best squard kills
	BestSquardKills float64 `json:"bestSquardKills,omitempty"`

	// best squard revives
	BestSquardRevives float64 `json:"bestSquardRevives,omitempty"`

	// best stabs
	BestStabs float64 `json:"bestStabs,omitempty"`

	// best touchdowns
	BestTouchdowns float64 `json:"bestTouchdowns,omitempty"`

	// current win streak
	CurrentWinStreak float64 `json:"currentWinStreak,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// losses
	Losses float64 `json:"losses,omitempty"`

	// misses
	Misses float64 `json:"misses,omitempty"`

	// record deaths in a match
	RecordDeathsInAMatch float64 `json:"recordDeathsInAMatch,omitempty"`

	// record kill streak
	RecordKillStreak float64 `json:"recordKillStreak,omitempty"`

	// record kills in a match
	RecordKillsInAMatch float64 `json:"recordKillsInAMatch,omitempty"`

	// record longest win streak
	RecordLongestWinStreak float64 `json:"recordLongestWinStreak,omitempty"`

	// record xp in a match
	RecordXpInAMatch float64 `json:"recordXpInAMatch,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per game
	ScorePerGame float64 `json:"scorePerGame,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// suicides
	Suicides float64 `json:"suicides,omitempty"`

	// ties
	Ties float64 `json:"ties,omitempty"`

	// time played total
	TimePlayedTotal float64 `json:"timePlayedTotal,omitempty"`

	// total games played
	TotalGamesPlayed float64 `json:"totalGamesPlayed,omitempty"`

	// total shots
	TotalShots float64 `json:"totalShots,omitempty"`

	// win loss ratio
	WinLossRatio float64 `json:"winLossRatio,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// wl ratio
	WlRatio float64 `json:"wlRatio,omitempty"`

	// gamer stats response data lifetime all properties additional properties
	GamerStatsResponseDataLifetimeAllPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeAllProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// assists
		Assists float64 `json:"assists,omitempty"`

		// best assists
		BestAssists float64 `json:"bestAssists,omitempty"`

		// best captures
		BestCaptures float64 `json:"bestCaptures,omitempty"`

		// best confirmed
		BestConfirmed float64 `json:"bestConfirmed,omitempty"`

		// best damage
		BestDamage float64 `json:"bestDamage,omitempty"`

		// best deaths
		BestDeaths float64 `json:"bestDeaths,omitempty"`

		// best defends
		BestDefends float64 `json:"bestDefends,omitempty"`

		// best defuses
		BestDefuses float64 `json:"bestDefuses,omitempty"`

		// best denied
		BestDenied float64 `json:"bestDenied,omitempty"`

		// best destructions
		BestDestructions float64 `json:"bestDestructions,omitempty"`

		// best fieldgoals
		BestFieldgoals float64 `json:"bestFieldgoals,omitempty"`

		// best k d
		BestKD float64 `json:"bestKD,omitempty"`

		// best kill chains
		BestKillChains float64 `json:"bestKillChains,omitempty"`

		// best kill streak
		BestKillStreak float64 `json:"bestKillStreak,omitempty"`

		// best kills
		BestKills float64 `json:"bestKills,omitempty"`

		// best kills as infected
		BestKillsAsInfected float64 `json:"bestKillsAsInfected,omitempty"`

		// best kills as survivor
		BestKillsAsSurvivor float64 `json:"bestKillsAsSurvivor,omitempty"`

		// best match bonus xp
		BestMatchBonusXp float64 `json:"bestMatchBonusXp,omitempty"`

		// best match xp
		BestMatchXp float64 `json:"bestMatchXp,omitempty"`

		// best medal xp
		BestMedalXp float64 `json:"bestMedalXp,omitempty"`

		// best plants
		BestPlants float64 `json:"bestPlants,omitempty"`

		// best rescues
		BestRescues float64 `json:"bestRescues,omitempty"`

		// best returns
		BestReturns float64 `json:"bestReturns,omitempty"`

		// best s p m
		BestSPM float64 `json:"bestSPM,omitempty"`

		// best score
		BestScore float64 `json:"bestScore,omitempty"`

		// best score xp
		BestScoreXp float64 `json:"bestScoreXp,omitempty"`

		// best setbacks
		BestSetbacks float64 `json:"bestSetbacks,omitempty"`

		// best sguard wave
		BestSguardWave float64 `json:"bestSguardWave,omitempty"`

		// best sguard weapon level
		BestSguardWeaponLevel float64 `json:"bestSguardWeaponLevel,omitempty"`

		// best squard crates
		BestSquardCrates float64 `json:"bestSquardCrates,omitempty"`

		// best squard kills
		BestSquardKills float64 `json:"bestSquardKills,omitempty"`

		// best squard revives
		BestSquardRevives float64 `json:"bestSquardRevives,omitempty"`

		// best stabs
		BestStabs float64 `json:"bestStabs,omitempty"`

		// best touchdowns
		BestTouchdowns float64 `json:"bestTouchdowns,omitempty"`

		// current win streak
		CurrentWinStreak float64 `json:"currentWinStreak,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// losses
		Losses float64 `json:"losses,omitempty"`

		// misses
		Misses float64 `json:"misses,omitempty"`

		// record deaths in a match
		RecordDeathsInAMatch float64 `json:"recordDeathsInAMatch,omitempty"`

		// record kill streak
		RecordKillStreak float64 `json:"recordKillStreak,omitempty"`

		// record kills in a match
		RecordKillsInAMatch float64 `json:"recordKillsInAMatch,omitempty"`

		// record longest win streak
		RecordLongestWinStreak float64 `json:"recordLongestWinStreak,omitempty"`

		// record xp in a match
		RecordXpInAMatch float64 `json:"recordXpInAMatch,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per game
		ScorePerGame float64 `json:"scorePerGame,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// ties
		Ties float64 `json:"ties,omitempty"`

		// time played total
		TimePlayedTotal float64 `json:"timePlayedTotal,omitempty"`

		// total games played
		TotalGamesPlayed float64 `json:"totalGamesPlayed,omitempty"`

		// total shots
		TotalShots float64 `json:"totalShots,omitempty"`

		// win loss ratio
		WinLossRatio float64 `json:"winLossRatio,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`

		// wl ratio
		WlRatio float64 `json:"wlRatio,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeAllProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Assists = stage1.Assists
	rcv.BestAssists = stage1.BestAssists
	rcv.BestCaptures = stage1.BestCaptures
	rcv.BestConfirmed = stage1.BestConfirmed
	rcv.BestDamage = stage1.BestDamage
	rcv.BestDeaths = stage1.BestDeaths
	rcv.BestDefends = stage1.BestDefends
	rcv.BestDefuses = stage1.BestDefuses
	rcv.BestDenied = stage1.BestDenied
	rcv.BestDestructions = stage1.BestDestructions
	rcv.BestFieldgoals = stage1.BestFieldgoals
	rcv.BestKD = stage1.BestKD
	rcv.BestKillChains = stage1.BestKillChains
	rcv.BestKillStreak = stage1.BestKillStreak
	rcv.BestKills = stage1.BestKills
	rcv.BestKillsAsInfected = stage1.BestKillsAsInfected
	rcv.BestKillsAsSurvivor = stage1.BestKillsAsSurvivor
	rcv.BestMatchBonusXp = stage1.BestMatchBonusXp
	rcv.BestMatchXp = stage1.BestMatchXp
	rcv.BestMedalXp = stage1.BestMedalXp
	rcv.BestPlants = stage1.BestPlants
	rcv.BestRescues = stage1.BestRescues
	rcv.BestReturns = stage1.BestReturns
	rcv.BestSPM = stage1.BestSPM
	rcv.BestScore = stage1.BestScore
	rcv.BestScoreXp = stage1.BestScoreXp
	rcv.BestSetbacks = stage1.BestSetbacks
	rcv.BestSguardWave = stage1.BestSguardWave
	rcv.BestSguardWeaponLevel = stage1.BestSguardWeaponLevel
	rcv.BestSquardCrates = stage1.BestSquardCrates
	rcv.BestSquardKills = stage1.BestSquardKills
	rcv.BestSquardRevives = stage1.BestSquardRevives
	rcv.BestStabs = stage1.BestStabs
	rcv.BestTouchdowns = stage1.BestTouchdowns
	rcv.CurrentWinStreak = stage1.CurrentWinStreak
	rcv.Deaths = stage1.Deaths
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Losses = stage1.Losses
	rcv.Misses = stage1.Misses
	rcv.RecordDeathsInAMatch = stage1.RecordDeathsInAMatch
	rcv.RecordKillStreak = stage1.RecordKillStreak
	rcv.RecordKillsInAMatch = stage1.RecordKillsInAMatch
	rcv.RecordLongestWinStreak = stage1.RecordLongestWinStreak
	rcv.RecordXpInAMatch = stage1.RecordXpInAMatch
	rcv.Score = stage1.Score
	rcv.ScorePerGame = stage1.ScorePerGame
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.Suicides = stage1.Suicides
	rcv.Ties = stage1.Ties
	rcv.TimePlayedTotal = stage1.TimePlayedTotal
	rcv.TotalGamesPlayed = stage1.TotalGamesPlayed
	rcv.TotalShots = stage1.TotalShots
	rcv.WinLossRatio = stage1.WinLossRatio
	rcv.Wins = stage1.Wins
	rcv.WlRatio = stage1.WlRatio
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "assists")
	delete(stage2, "bestAssists")
	delete(stage2, "bestCaptures")
	delete(stage2, "bestConfirmed")
	delete(stage2, "bestDamage")
	delete(stage2, "bestDeaths")
	delete(stage2, "bestDefends")
	delete(stage2, "bestDefuses")
	delete(stage2, "bestDenied")
	delete(stage2, "bestDestructions")
	delete(stage2, "bestFieldgoals")
	delete(stage2, "bestKD")
	delete(stage2, "bestKillChains")
	delete(stage2, "bestKillStreak")
	delete(stage2, "bestKills")
	delete(stage2, "bestKillsAsInfected")
	delete(stage2, "bestKillsAsSurvivor")
	delete(stage2, "bestMatchBonusXp")
	delete(stage2, "bestMatchXp")
	delete(stage2, "bestMedalXp")
	delete(stage2, "bestPlants")
	delete(stage2, "bestRescues")
	delete(stage2, "bestReturns")
	delete(stage2, "bestSPM")
	delete(stage2, "bestScore")
	delete(stage2, "bestScoreXp")
	delete(stage2, "bestSetbacks")
	delete(stage2, "bestSguardWave")
	delete(stage2, "bestSguardWeaponLevel")
	delete(stage2, "bestSquardCrates")
	delete(stage2, "bestSquardKills")
	delete(stage2, "bestSquardRevives")
	delete(stage2, "bestStabs")
	delete(stage2, "bestTouchdowns")
	delete(stage2, "currentWinStreak")
	delete(stage2, "deaths")
	delete(stage2, "gamesPlayed")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "losses")
	delete(stage2, "misses")
	delete(stage2, "recordDeathsInAMatch")
	delete(stage2, "recordKillStreak")
	delete(stage2, "recordKillsInAMatch")
	delete(stage2, "recordLongestWinStreak")
	delete(stage2, "recordXpInAMatch")
	delete(stage2, "score")
	delete(stage2, "scorePerGame")
	delete(stage2, "scorePerMinute")
	delete(stage2, "suicides")
	delete(stage2, "ties")
	delete(stage2, "timePlayedTotal")
	delete(stage2, "totalGamesPlayed")
	delete(stage2, "totalShots")
	delete(stage2, "winLossRatio")
	delete(stage2, "wins")
	delete(stage2, "wlRatio")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeAllPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeAllProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// assists
		Assists float64 `json:"assists,omitempty"`

		// best assists
		BestAssists float64 `json:"bestAssists,omitempty"`

		// best captures
		BestCaptures float64 `json:"bestCaptures,omitempty"`

		// best confirmed
		BestConfirmed float64 `json:"bestConfirmed,omitempty"`

		// best damage
		BestDamage float64 `json:"bestDamage,omitempty"`

		// best deaths
		BestDeaths float64 `json:"bestDeaths,omitempty"`

		// best defends
		BestDefends float64 `json:"bestDefends,omitempty"`

		// best defuses
		BestDefuses float64 `json:"bestDefuses,omitempty"`

		// best denied
		BestDenied float64 `json:"bestDenied,omitempty"`

		// best destructions
		BestDestructions float64 `json:"bestDestructions,omitempty"`

		// best fieldgoals
		BestFieldgoals float64 `json:"bestFieldgoals,omitempty"`

		// best k d
		BestKD float64 `json:"bestKD,omitempty"`

		// best kill chains
		BestKillChains float64 `json:"bestKillChains,omitempty"`

		// best kill streak
		BestKillStreak float64 `json:"bestKillStreak,omitempty"`

		// best kills
		BestKills float64 `json:"bestKills,omitempty"`

		// best kills as infected
		BestKillsAsInfected float64 `json:"bestKillsAsInfected,omitempty"`

		// best kills as survivor
		BestKillsAsSurvivor float64 `json:"bestKillsAsSurvivor,omitempty"`

		// best match bonus xp
		BestMatchBonusXp float64 `json:"bestMatchBonusXp,omitempty"`

		// best match xp
		BestMatchXp float64 `json:"bestMatchXp,omitempty"`

		// best medal xp
		BestMedalXp float64 `json:"bestMedalXp,omitempty"`

		// best plants
		BestPlants float64 `json:"bestPlants,omitempty"`

		// best rescues
		BestRescues float64 `json:"bestRescues,omitempty"`

		// best returns
		BestReturns float64 `json:"bestReturns,omitempty"`

		// best s p m
		BestSPM float64 `json:"bestSPM,omitempty"`

		// best score
		BestScore float64 `json:"bestScore,omitempty"`

		// best score xp
		BestScoreXp float64 `json:"bestScoreXp,omitempty"`

		// best setbacks
		BestSetbacks float64 `json:"bestSetbacks,omitempty"`

		// best sguard wave
		BestSguardWave float64 `json:"bestSguardWave,omitempty"`

		// best sguard weapon level
		BestSguardWeaponLevel float64 `json:"bestSguardWeaponLevel,omitempty"`

		// best squard crates
		BestSquardCrates float64 `json:"bestSquardCrates,omitempty"`

		// best squard kills
		BestSquardKills float64 `json:"bestSquardKills,omitempty"`

		// best squard revives
		BestSquardRevives float64 `json:"bestSquardRevives,omitempty"`

		// best stabs
		BestStabs float64 `json:"bestStabs,omitempty"`

		// best touchdowns
		BestTouchdowns float64 `json:"bestTouchdowns,omitempty"`

		// current win streak
		CurrentWinStreak float64 `json:"currentWinStreak,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// losses
		Losses float64 `json:"losses,omitempty"`

		// misses
		Misses float64 `json:"misses,omitempty"`

		// record deaths in a match
		RecordDeathsInAMatch float64 `json:"recordDeathsInAMatch,omitempty"`

		// record kill streak
		RecordKillStreak float64 `json:"recordKillStreak,omitempty"`

		// record kills in a match
		RecordKillsInAMatch float64 `json:"recordKillsInAMatch,omitempty"`

		// record longest win streak
		RecordLongestWinStreak float64 `json:"recordLongestWinStreak,omitempty"`

		// record xp in a match
		RecordXpInAMatch float64 `json:"recordXpInAMatch,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per game
		ScorePerGame float64 `json:"scorePerGame,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// ties
		Ties float64 `json:"ties,omitempty"`

		// time played total
		TimePlayedTotal float64 `json:"timePlayedTotal,omitempty"`

		// total games played
		TotalGamesPlayed float64 `json:"totalGamesPlayed,omitempty"`

		// total shots
		TotalShots float64 `json:"totalShots,omitempty"`

		// win loss ratio
		WinLossRatio float64 `json:"winLossRatio,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`

		// wl ratio
		WlRatio float64 `json:"wlRatio,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Assists = m.Assists
	stage1.BestAssists = m.BestAssists
	stage1.BestCaptures = m.BestCaptures
	stage1.BestConfirmed = m.BestConfirmed
	stage1.BestDamage = m.BestDamage
	stage1.BestDeaths = m.BestDeaths
	stage1.BestDefends = m.BestDefends
	stage1.BestDefuses = m.BestDefuses
	stage1.BestDenied = m.BestDenied
	stage1.BestDestructions = m.BestDestructions
	stage1.BestFieldgoals = m.BestFieldgoals
	stage1.BestKD = m.BestKD
	stage1.BestKillChains = m.BestKillChains
	stage1.BestKillStreak = m.BestKillStreak
	stage1.BestKills = m.BestKills
	stage1.BestKillsAsInfected = m.BestKillsAsInfected
	stage1.BestKillsAsSurvivor = m.BestKillsAsSurvivor
	stage1.BestMatchBonusXp = m.BestMatchBonusXp
	stage1.BestMatchXp = m.BestMatchXp
	stage1.BestMedalXp = m.BestMedalXp
	stage1.BestPlants = m.BestPlants
	stage1.BestRescues = m.BestRescues
	stage1.BestReturns = m.BestReturns
	stage1.BestSPM = m.BestSPM
	stage1.BestScore = m.BestScore
	stage1.BestScoreXp = m.BestScoreXp
	stage1.BestSetbacks = m.BestSetbacks
	stage1.BestSguardWave = m.BestSguardWave
	stage1.BestSguardWeaponLevel = m.BestSguardWeaponLevel
	stage1.BestSquardCrates = m.BestSquardCrates
	stage1.BestSquardKills = m.BestSquardKills
	stage1.BestSquardRevives = m.BestSquardRevives
	stage1.BestStabs = m.BestStabs
	stage1.BestTouchdowns = m.BestTouchdowns
	stage1.CurrentWinStreak = m.CurrentWinStreak
	stage1.Deaths = m.Deaths
	stage1.GamesPlayed = m.GamesPlayed
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Losses = m.Losses
	stage1.Misses = m.Misses
	stage1.RecordDeathsInAMatch = m.RecordDeathsInAMatch
	stage1.RecordKillStreak = m.RecordKillStreak
	stage1.RecordKillsInAMatch = m.RecordKillsInAMatch
	stage1.RecordLongestWinStreak = m.RecordLongestWinStreak
	stage1.RecordXpInAMatch = m.RecordXpInAMatch
	stage1.Score = m.Score
	stage1.ScorePerGame = m.ScorePerGame
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.Suicides = m.Suicides
	stage1.Ties = m.Ties
	stage1.TimePlayedTotal = m.TimePlayedTotal
	stage1.TotalGamesPlayed = m.TotalGamesPlayed
	stage1.TotalShots = m.TotalShots
	stage1.WinLossRatio = m.WinLossRatio
	stage1.Wins = m.Wins
	stage1.WlRatio = m.WlRatio

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeAllPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeAllPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime all properties
func (m *GamerStatsResponseDataLifetimeAllProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAllProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeAllProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeAllProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemData gamer stats response data lifetime item data
//
// swagger:model GamerStatsResponseDataLifetimeItemData
type GamerStatsResponseDataLifetimeItemData struct {

	// lethals
	Lethals *GamerStatsResponseDataLifetimeItemDataLethals `json:"lethals,omitempty"`

	// supers
	Supers *GamerStatsResponseDataLifetimeItemDataSupers `json:"supers,omitempty"`

	// tacticals
	Tacticals *GamerStatsResponseDataLifetimeItemDataTacticals `json:"tacticals,omitempty"`

	// weapon assault rifle
	WeaponAssaultRifle *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle `json:"weapon_assault_rifle,omitempty"`

	// weapon launcher
	WeaponLauncher *GamerStatsResponseDataLifetimeItemDataWeaponLauncher `json:"weapon_launcher,omitempty"`

	// weapon lmg
	WeaponLmg *GamerStatsResponseDataLifetimeItemDataWeaponLmg `json:"weapon_lmg,omitempty"`

	// weapon marksman
	WeaponMarksman *GamerStatsResponseDataLifetimeItemDataWeaponMarksman `json:"weapon_marksman,omitempty"`

	// weapon melee
	WeaponMelee *GamerStatsResponseDataLifetimeItemDataWeaponMelee `json:"weapon_melee,omitempty"`

	// weapon other
	WeaponOther *GamerStatsResponseDataLifetimeItemDataWeaponOther `json:"weapon_other,omitempty"`

	// weapon pistol
	WeaponPistol *GamerStatsResponseDataLifetimeItemDataWeaponPistol `json:"weapon_pistol,omitempty"`

	// weapon shotgun
	WeaponShotgun *GamerStatsResponseDataLifetimeItemDataWeaponShotgun `json:"weapon_shotgun,omitempty"`

	// weapon smg
	WeaponSmg *GamerStatsResponseDataLifetimeItemDataWeaponSmg `json:"weapon_smg,omitempty"`

	// weapon sniper
	WeaponSniper *GamerStatsResponseDataLifetimeItemDataWeaponSniper `json:"weapon_sniper,omitempty"`

	// gamer stats response data lifetime item data additional properties
	GamerStatsResponseDataLifetimeItemDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// lethals
		Lethals *GamerStatsResponseDataLifetimeItemDataLethals `json:"lethals,omitempty"`

		// supers
		Supers *GamerStatsResponseDataLifetimeItemDataSupers `json:"supers,omitempty"`

		// tacticals
		Tacticals *GamerStatsResponseDataLifetimeItemDataTacticals `json:"tacticals,omitempty"`

		// weapon assault rifle
		WeaponAssaultRifle *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle `json:"weapon_assault_rifle,omitempty"`

		// weapon launcher
		WeaponLauncher *GamerStatsResponseDataLifetimeItemDataWeaponLauncher `json:"weapon_launcher,omitempty"`

		// weapon lmg
		WeaponLmg *GamerStatsResponseDataLifetimeItemDataWeaponLmg `json:"weapon_lmg,omitempty"`

		// weapon marksman
		WeaponMarksman *GamerStatsResponseDataLifetimeItemDataWeaponMarksman `json:"weapon_marksman,omitempty"`

		// weapon melee
		WeaponMelee *GamerStatsResponseDataLifetimeItemDataWeaponMelee `json:"weapon_melee,omitempty"`

		// weapon other
		WeaponOther *GamerStatsResponseDataLifetimeItemDataWeaponOther `json:"weapon_other,omitempty"`

		// weapon pistol
		WeaponPistol *GamerStatsResponseDataLifetimeItemDataWeaponPistol `json:"weapon_pistol,omitempty"`

		// weapon shotgun
		WeaponShotgun *GamerStatsResponseDataLifetimeItemDataWeaponShotgun `json:"weapon_shotgun,omitempty"`

		// weapon smg
		WeaponSmg *GamerStatsResponseDataLifetimeItemDataWeaponSmg `json:"weapon_smg,omitempty"`

		// weapon sniper
		WeaponSniper *GamerStatsResponseDataLifetimeItemDataWeaponSniper `json:"weapon_sniper,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemData

	rcv.Lethals = stage1.Lethals
	rcv.Supers = stage1.Supers
	rcv.Tacticals = stage1.Tacticals
	rcv.WeaponAssaultRifle = stage1.WeaponAssaultRifle
	rcv.WeaponLauncher = stage1.WeaponLauncher
	rcv.WeaponLmg = stage1.WeaponLmg
	rcv.WeaponMarksman = stage1.WeaponMarksman
	rcv.WeaponMelee = stage1.WeaponMelee
	rcv.WeaponOther = stage1.WeaponOther
	rcv.WeaponPistol = stage1.WeaponPistol
	rcv.WeaponShotgun = stage1.WeaponShotgun
	rcv.WeaponSmg = stage1.WeaponSmg
	rcv.WeaponSniper = stage1.WeaponSniper
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "lethals")
	delete(stage2, "supers")
	delete(stage2, "tacticals")
	delete(stage2, "weapon_assault_rifle")
	delete(stage2, "weapon_launcher")
	delete(stage2, "weapon_lmg")
	delete(stage2, "weapon_marksman")
	delete(stage2, "weapon_melee")
	delete(stage2, "weapon_other")
	delete(stage2, "weapon_pistol")
	delete(stage2, "weapon_shotgun")
	delete(stage2, "weapon_smg")
	delete(stage2, "weapon_sniper")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// lethals
		Lethals *GamerStatsResponseDataLifetimeItemDataLethals `json:"lethals,omitempty"`

		// supers
		Supers *GamerStatsResponseDataLifetimeItemDataSupers `json:"supers,omitempty"`

		// tacticals
		Tacticals *GamerStatsResponseDataLifetimeItemDataTacticals `json:"tacticals,omitempty"`

		// weapon assault rifle
		WeaponAssaultRifle *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle `json:"weapon_assault_rifle,omitempty"`

		// weapon launcher
		WeaponLauncher *GamerStatsResponseDataLifetimeItemDataWeaponLauncher `json:"weapon_launcher,omitempty"`

		// weapon lmg
		WeaponLmg *GamerStatsResponseDataLifetimeItemDataWeaponLmg `json:"weapon_lmg,omitempty"`

		// weapon marksman
		WeaponMarksman *GamerStatsResponseDataLifetimeItemDataWeaponMarksman `json:"weapon_marksman,omitempty"`

		// weapon melee
		WeaponMelee *GamerStatsResponseDataLifetimeItemDataWeaponMelee `json:"weapon_melee,omitempty"`

		// weapon other
		WeaponOther *GamerStatsResponseDataLifetimeItemDataWeaponOther `json:"weapon_other,omitempty"`

		// weapon pistol
		WeaponPistol *GamerStatsResponseDataLifetimeItemDataWeaponPistol `json:"weapon_pistol,omitempty"`

		// weapon shotgun
		WeaponShotgun *GamerStatsResponseDataLifetimeItemDataWeaponShotgun `json:"weapon_shotgun,omitempty"`

		// weapon smg
		WeaponSmg *GamerStatsResponseDataLifetimeItemDataWeaponSmg `json:"weapon_smg,omitempty"`

		// weapon sniper
		WeaponSniper *GamerStatsResponseDataLifetimeItemDataWeaponSniper `json:"weapon_sniper,omitempty"`
	}

	stage1.Lethals = m.Lethals
	stage1.Supers = m.Supers
	stage1.Tacticals = m.Tacticals
	stage1.WeaponAssaultRifle = m.WeaponAssaultRifle
	stage1.WeaponLauncher = m.WeaponLauncher
	stage1.WeaponLmg = m.WeaponLmg
	stage1.WeaponMarksman = m.WeaponMarksman
	stage1.WeaponMelee = m.WeaponMelee
	stage1.WeaponOther = m.WeaponOther
	stage1.WeaponPistol = m.WeaponPistol
	stage1.WeaponShotgun = m.WeaponShotgun
	stage1.WeaponSmg = m.WeaponSmg
	stage1.WeaponSniper = m.WeaponSniper

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data
func (m *GamerStatsResponseDataLifetimeItemData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLethals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacticals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponAssaultRifle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponLauncher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponLmg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponMarksman(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponMelee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponPistol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponShotgun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponSmg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponSniper(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateLethals(formats strfmt.Registry) error {

	if swag.IsZero(m.Lethals) { // not required
		return nil
	}

	if m.Lethals != nil {
		if err := m.Lethals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateSupers(formats strfmt.Registry) error {

	if swag.IsZero(m.Supers) { // not required
		return nil
	}

	if m.Supers != nil {
		if err := m.Supers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateTacticals(formats strfmt.Registry) error {

	if swag.IsZero(m.Tacticals) { // not required
		return nil
	}

	if m.Tacticals != nil {
		if err := m.Tacticals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponAssaultRifle(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponAssaultRifle) { // not required
		return nil
	}

	if m.WeaponAssaultRifle != nil {
		if err := m.WeaponAssaultRifle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponLauncher(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponLauncher) { // not required
		return nil
	}

	if m.WeaponLauncher != nil {
		if err := m.WeaponLauncher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponLmg(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponLmg) { // not required
		return nil
	}

	if m.WeaponLmg != nil {
		if err := m.WeaponLmg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponMarksman(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponMarksman) { // not required
		return nil
	}

	if m.WeaponMarksman != nil {
		if err := m.WeaponMarksman.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponMelee(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponMelee) { // not required
		return nil
	}

	if m.WeaponMelee != nil {
		if err := m.WeaponMelee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponOther(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponOther) { // not required
		return nil
	}

	if m.WeaponOther != nil {
		if err := m.WeaponOther.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_other")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponPistol(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponPistol) { // not required
		return nil
	}

	if m.WeaponPistol != nil {
		if err := m.WeaponPistol.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponShotgun(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponShotgun) { // not required
		return nil
	}

	if m.WeaponShotgun != nil {
		if err := m.WeaponShotgun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponSmg(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponSmg) { // not required
		return nil
	}

	if m.WeaponSmg != nil {
		if err := m.WeaponSmg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemData) validateWeaponSniper(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponSniper) { // not required
		return nil
	}

	if m.WeaponSniper != nil {
		if err := m.WeaponSniper.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethals gamer stats response data lifetime item data lethals
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethals
type GamerStatsResponseDataLifetimeItemDataLethals struct {

	// equip at mine
	EquipAtMine *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine `json:"equip_at_mine,omitempty"`

	// equip c4
	EquipC4 *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4 `json:"equip_c4,omitempty"`

	// equip claymore
	EquipClaymore *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore `json:"equip_claymore,omitempty"`

	// equip frag
	EquipFrag *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag `json:"equip_frag,omitempty"`

	// equip molotov
	EquipMolotov *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov `json:"equip_molotov,omitempty"`

	// equip semtex
	EquipSemtex *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex `json:"equip_semtex,omitempty"`

	// equip thermite
	EquipThermite *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite `json:"equip_thermite,omitempty"`

	// equip throwing knife
	EquipThrowingKnife *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife `json:"equip_throwing_knife,omitempty"`

	// gamer stats response data lifetime item data lethals additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethals) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// equip at mine
		EquipAtMine *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine `json:"equip_at_mine,omitempty"`

		// equip c4
		EquipC4 *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4 `json:"equip_c4,omitempty"`

		// equip claymore
		EquipClaymore *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore `json:"equip_claymore,omitempty"`

		// equip frag
		EquipFrag *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag `json:"equip_frag,omitempty"`

		// equip molotov
		EquipMolotov *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov `json:"equip_molotov,omitempty"`

		// equip semtex
		EquipSemtex *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex `json:"equip_semtex,omitempty"`

		// equip thermite
		EquipThermite *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite `json:"equip_thermite,omitempty"`

		// equip throwing knife
		EquipThrowingKnife *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife `json:"equip_throwing_knife,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethals

	rcv.EquipAtMine = stage1.EquipAtMine
	rcv.EquipC4 = stage1.EquipC4
	rcv.EquipClaymore = stage1.EquipClaymore
	rcv.EquipFrag = stage1.EquipFrag
	rcv.EquipMolotov = stage1.EquipMolotov
	rcv.EquipSemtex = stage1.EquipSemtex
	rcv.EquipThermite = stage1.EquipThermite
	rcv.EquipThrowingKnife = stage1.EquipThrowingKnife
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "equip_at_mine")
	delete(stage2, "equip_c4")
	delete(stage2, "equip_claymore")
	delete(stage2, "equip_frag")
	delete(stage2, "equip_molotov")
	delete(stage2, "equip_semtex")
	delete(stage2, "equip_thermite")
	delete(stage2, "equip_throwing_knife")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethals) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// equip at mine
		EquipAtMine *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine `json:"equip_at_mine,omitempty"`

		// equip c4
		EquipC4 *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4 `json:"equip_c4,omitempty"`

		// equip claymore
		EquipClaymore *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore `json:"equip_claymore,omitempty"`

		// equip frag
		EquipFrag *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag `json:"equip_frag,omitempty"`

		// equip molotov
		EquipMolotov *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov `json:"equip_molotov,omitempty"`

		// equip semtex
		EquipSemtex *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex `json:"equip_semtex,omitempty"`

		// equip thermite
		EquipThermite *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite `json:"equip_thermite,omitempty"`

		// equip throwing knife
		EquipThrowingKnife *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife `json:"equip_throwing_knife,omitempty"`
	}

	stage1.EquipAtMine = m.EquipAtMine
	stage1.EquipC4 = m.EquipC4
	stage1.EquipClaymore = m.EquipClaymore
	stage1.EquipFrag = m.EquipFrag
	stage1.EquipMolotov = m.EquipMolotov
	stage1.EquipSemtex = m.EquipSemtex
	stage1.EquipThermite = m.EquipThermite
	stage1.EquipThrowingKnife = m.EquipThrowingKnife

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals
func (m *GamerStatsResponseDataLifetimeItemDataLethals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipAtMine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipC4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipClaymore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipFrag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipMolotov(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipSemtex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipThermite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipThrowingKnife(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipAtMine(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipAtMine) { // not required
		return nil
	}

	if m.EquipAtMine != nil {
		if err := m.EquipAtMine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_at_mine")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipC4(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipC4) { // not required
		return nil
	}

	if m.EquipC4 != nil {
		if err := m.EquipC4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_c4")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipClaymore(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipClaymore) { // not required
		return nil
	}

	if m.EquipClaymore != nil {
		if err := m.EquipClaymore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_claymore")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipFrag(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipFrag) { // not required
		return nil
	}

	if m.EquipFrag != nil {
		if err := m.EquipFrag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_frag")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipMolotov(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipMolotov) { // not required
		return nil
	}

	if m.EquipMolotov != nil {
		if err := m.EquipMolotov.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_molotov")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipSemtex(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipSemtex) { // not required
		return nil
	}

	if m.EquipSemtex != nil {
		if err := m.EquipSemtex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_semtex")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipThermite(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipThermite) { // not required
		return nil
	}

	if m.EquipThermite != nil {
		if err := m.EquipThermite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_thermite")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethals) validateEquipThrowingKnife(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipThrowingKnife) { // not required
		return nil
	}

	if m.EquipThrowingKnife != nil {
		if err := m.EquipThrowingKnife.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_throwing_knife")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethals) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine gamer stats response data lifetime item data lethals equip at mine
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine
type GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip at mine additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip at mine
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_at_mine" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties gamer stats response data lifetime item data lethals equip at mine properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip at mine properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip at mine properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipAtMineProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipC4 gamer stats response data lifetime item data lethals equip c4
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipC4
type GamerStatsResponseDataLifetimeItemDataLethalsEquipC4 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip c4 additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipC4AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipC4

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipC4AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipC4) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipC4AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipC4AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip c4
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_c4" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipC4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties gamer stats response data lifetime item data lethals equip c4 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip c4 properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip c4 properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipC4Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore gamer stats response data lifetime item data lethals equip claymore
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore
type GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip claymore additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip claymore
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_claymore" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties gamer stats response data lifetime item data lethals equip claymore properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip claymore properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip claymore properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipClaymoreProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag gamer stats response data lifetime item data lethals equip frag
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag
type GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip frag additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipFragAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipFragAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipFragAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipFragAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip frag
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_frag" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipFrag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties gamer stats response data lifetime item data lethals equip frag properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip frag properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip frag properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipFragProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov gamer stats response data lifetime item data lethals equip molotov
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov
type GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip molotov additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip molotov
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_molotov" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotov
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties gamer stats response data lifetime item data lethals equip molotov properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip molotov properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip molotov properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipMolotovProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex gamer stats response data lifetime item data lethals equip semtex
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex
type GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip semtex additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip semtex
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_semtex" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties gamer stats response data lifetime item data lethals equip semtex properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip semtex properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip semtex properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipSemtexProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite gamer stats response data lifetime item data lethals equip thermite
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite
type GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip thermite additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip thermite
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_thermite" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipThermite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties gamer stats response data lifetime item data lethals equip thermite properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip thermite properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip thermite properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipThermiteProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife gamer stats response data lifetime item data lethals equip throwing knife
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife
type GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data lethals equip throwing knife additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip throwing knife
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_throwing_knife" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnife
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties gamer stats response data lifetime item data lethals equip throwing knife properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties
type GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data lethals equip throwing knife properties additional properties
	GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data lethals equip throwing knife properties
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataLethalsEquipThrowingKnifeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupers gamer stats response data lifetime item data supers
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupers
type GamerStatsResponseDataLifetimeItemDataSupers struct {

	// super ammo drop
	SuperAmmoDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop `json:"super_ammo_drop,omitempty"`

	// super armor drop
	SuperArmorDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop `json:"super_armor_drop,omitempty"`

	// super deadsilence
	SuperDeadsilence *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence `json:"super_deadsilence,omitempty"`

	// super emp drone
	SuperEmpDrone *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone `json:"super_emp_drone,omitempty"`

	// super fulton
	SuperFulton *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton `json:"super_fulton,omitempty"`

	// super recon drone
	SuperReconDrone *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone `json:"super_recon_drone,omitempty"`

	// super select
	SuperSelect *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect `json:"super_select,omitempty"`

	// super supply drop
	SuperSupplyDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop `json:"super_supply_drop,omitempty"`

	// super support box
	SuperSupportBox *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox `json:"super_support_box,omitempty"`

	// super tac cover
	SuperTacCover *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover `json:"super_tac_cover,omitempty"`

	// super tac insert
	SuperTacInsert *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert `json:"super_tac_insert,omitempty"`

	// super trophy
	SuperTrophy *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy `json:"super_trophy,omitempty"`

	// super weapon drop
	SuperWeaponDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop `json:"super_weapon_drop,omitempty"`

	// gamer stats response data lifetime item data supers additional properties
	GamerStatsResponseDataLifetimeItemDataSupersAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupers) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// super ammo drop
		SuperAmmoDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop `json:"super_ammo_drop,omitempty"`

		// super armor drop
		SuperArmorDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop `json:"super_armor_drop,omitempty"`

		// super deadsilence
		SuperDeadsilence *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence `json:"super_deadsilence,omitempty"`

		// super emp drone
		SuperEmpDrone *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone `json:"super_emp_drone,omitempty"`

		// super fulton
		SuperFulton *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton `json:"super_fulton,omitempty"`

		// super recon drone
		SuperReconDrone *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone `json:"super_recon_drone,omitempty"`

		// super select
		SuperSelect *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect `json:"super_select,omitempty"`

		// super supply drop
		SuperSupplyDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop `json:"super_supply_drop,omitempty"`

		// super support box
		SuperSupportBox *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox `json:"super_support_box,omitempty"`

		// super tac cover
		SuperTacCover *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover `json:"super_tac_cover,omitempty"`

		// super tac insert
		SuperTacInsert *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert `json:"super_tac_insert,omitempty"`

		// super trophy
		SuperTrophy *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy `json:"super_trophy,omitempty"`

		// super weapon drop
		SuperWeaponDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop `json:"super_weapon_drop,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupers

	rcv.SuperAmmoDrop = stage1.SuperAmmoDrop
	rcv.SuperArmorDrop = stage1.SuperArmorDrop
	rcv.SuperDeadsilence = stage1.SuperDeadsilence
	rcv.SuperEmpDrone = stage1.SuperEmpDrone
	rcv.SuperFulton = stage1.SuperFulton
	rcv.SuperReconDrone = stage1.SuperReconDrone
	rcv.SuperSelect = stage1.SuperSelect
	rcv.SuperSupplyDrop = stage1.SuperSupplyDrop
	rcv.SuperSupportBox = stage1.SuperSupportBox
	rcv.SuperTacCover = stage1.SuperTacCover
	rcv.SuperTacInsert = stage1.SuperTacInsert
	rcv.SuperTrophy = stage1.SuperTrophy
	rcv.SuperWeaponDrop = stage1.SuperWeaponDrop
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "super_ammo_drop")
	delete(stage2, "super_armor_drop")
	delete(stage2, "super_deadsilence")
	delete(stage2, "super_emp_drone")
	delete(stage2, "super_fulton")
	delete(stage2, "super_recon_drone")
	delete(stage2, "super_select")
	delete(stage2, "super_supply_drop")
	delete(stage2, "super_support_box")
	delete(stage2, "super_tac_cover")
	delete(stage2, "super_tac_insert")
	delete(stage2, "super_trophy")
	delete(stage2, "super_weapon_drop")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupers) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// super ammo drop
		SuperAmmoDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop `json:"super_ammo_drop,omitempty"`

		// super armor drop
		SuperArmorDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop `json:"super_armor_drop,omitempty"`

		// super deadsilence
		SuperDeadsilence *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence `json:"super_deadsilence,omitempty"`

		// super emp drone
		SuperEmpDrone *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone `json:"super_emp_drone,omitempty"`

		// super fulton
		SuperFulton *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton `json:"super_fulton,omitempty"`

		// super recon drone
		SuperReconDrone *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone `json:"super_recon_drone,omitempty"`

		// super select
		SuperSelect *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect `json:"super_select,omitempty"`

		// super supply drop
		SuperSupplyDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop `json:"super_supply_drop,omitempty"`

		// super support box
		SuperSupportBox *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox `json:"super_support_box,omitempty"`

		// super tac cover
		SuperTacCover *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover `json:"super_tac_cover,omitempty"`

		// super tac insert
		SuperTacInsert *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert `json:"super_tac_insert,omitempty"`

		// super trophy
		SuperTrophy *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy `json:"super_trophy,omitempty"`

		// super weapon drop
		SuperWeaponDrop *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop `json:"super_weapon_drop,omitempty"`
	}

	stage1.SuperAmmoDrop = m.SuperAmmoDrop
	stage1.SuperArmorDrop = m.SuperArmorDrop
	stage1.SuperDeadsilence = m.SuperDeadsilence
	stage1.SuperEmpDrone = m.SuperEmpDrone
	stage1.SuperFulton = m.SuperFulton
	stage1.SuperReconDrone = m.SuperReconDrone
	stage1.SuperSelect = m.SuperSelect
	stage1.SuperSupplyDrop = m.SuperSupplyDrop
	stage1.SuperSupportBox = m.SuperSupportBox
	stage1.SuperTacCover = m.SuperTacCover
	stage1.SuperTacInsert = m.SuperTacInsert
	stage1.SuperTrophy = m.SuperTrophy
	stage1.SuperWeaponDrop = m.SuperWeaponDrop

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers
func (m *GamerStatsResponseDataLifetimeItemDataSupers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSuperAmmoDrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperArmorDrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperDeadsilence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperEmpDrone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperFulton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperReconDrone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperSupplyDrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperSupportBox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperTacCover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperTacInsert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperTrophy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperWeaponDrop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperAmmoDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperAmmoDrop) { // not required
		return nil
	}

	if m.SuperAmmoDrop != nil {
		if err := m.SuperAmmoDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_ammo_drop")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperArmorDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperArmorDrop) { // not required
		return nil
	}

	if m.SuperArmorDrop != nil {
		if err := m.SuperArmorDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_armor_drop")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperDeadsilence(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperDeadsilence) { // not required
		return nil
	}

	if m.SuperDeadsilence != nil {
		if err := m.SuperDeadsilence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_deadsilence")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperEmpDrone(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperEmpDrone) { // not required
		return nil
	}

	if m.SuperEmpDrone != nil {
		if err := m.SuperEmpDrone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_emp_drone")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperFulton(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperFulton) { // not required
		return nil
	}

	if m.SuperFulton != nil {
		if err := m.SuperFulton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_fulton")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperReconDrone(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperReconDrone) { // not required
		return nil
	}

	if m.SuperReconDrone != nil {
		if err := m.SuperReconDrone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_recon_drone")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperSelect) { // not required
		return nil
	}

	if m.SuperSelect != nil {
		if err := m.SuperSelect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_select")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperSupplyDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperSupplyDrop) { // not required
		return nil
	}

	if m.SuperSupplyDrop != nil {
		if err := m.SuperSupplyDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_supply_drop")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperSupportBox(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperSupportBox) { // not required
		return nil
	}

	if m.SuperSupportBox != nil {
		if err := m.SuperSupportBox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_support_box")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperTacCover(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperTacCover) { // not required
		return nil
	}

	if m.SuperTacCover != nil {
		if err := m.SuperTacCover.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_cover")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperTacInsert(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperTacInsert) { // not required
		return nil
	}

	if m.SuperTacInsert != nil {
		if err := m.SuperTacInsert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_insert")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperTrophy(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperTrophy) { // not required
		return nil
	}

	if m.SuperTrophy != nil {
		if err := m.SuperTrophy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_trophy")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupers) validateSuperWeaponDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperWeaponDrop) { // not required
		return nil
	}

	if m.SuperWeaponDrop != nil {
		if err := m.SuperWeaponDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_weapon_drop")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupers) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop gamer stats response data lifetime item data supers super ammo drop
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop
type GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super ammo drop additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super ammo drop
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_ammo_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties gamer stats response data lifetime item data supers super ammo drop properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super ammo drop properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super ammo drop properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperAmmoDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop gamer stats response data lifetime item data supers super armor drop
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop
type GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super armor drop additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super armor drop
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_armor_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties gamer stats response data lifetime item data supers super armor drop properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super armor drop properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super armor drop properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperArmorDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence gamer stats response data lifetime item data supers super deadsilence
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence
type GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super deadsilence additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super deadsilence
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_deadsilence" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties gamer stats response data lifetime item data supers super deadsilence properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super deadsilence properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super deadsilence properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperDeadsilenceProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone gamer stats response data lifetime item data supers super emp drone
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone
type GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super emp drone additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super emp drone
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_emp_drone" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDrone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties gamer stats response data lifetime item data supers super emp drone properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super emp drone properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super emp drone properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperEmpDroneProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperFulton gamer stats response data lifetime item data supers super fulton
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperFulton
type GamerStatsResponseDataLifetimeItemDataSupersSuperFulton struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super fulton additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperFultonAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperFulton

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperFultonAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperFulton) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperFultonAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperFultonAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super fulton
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_fulton" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFulton) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperFulton
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties gamer stats response data lifetime item data supers super fulton properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super fulton properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super fulton properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperFultonProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone gamer stats response data lifetime item data supers super recon drone
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone
type GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super recon drone additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super recon drone
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_recon_drone" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperReconDrone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties gamer stats response data lifetime item data supers super recon drone properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super recon drone properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super recon drone properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperReconDroneProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperSelect gamer stats response data lifetime item data supers super select
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperSelect
type GamerStatsResponseDataLifetimeItemDataSupersSuperSelect struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super select additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperSelectAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperSelect

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperSelectAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperSelect) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSelectAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSelectAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super select
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_select" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelect) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperSelect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties gamer stats response data lifetime item data supers super select properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super select properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super select properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperSelectProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop gamer stats response data lifetime item data supers super supply drop
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop
type GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super supply drop additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super supply drop
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_supply_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties gamer stats response data lifetime item data supers super supply drop properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super supply drop properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super supply drop properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperSupplyDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox gamer stats response data lifetime item data supers super support box
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox
type GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super support box additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super support box
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_support_box" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBox
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties gamer stats response data lifetime item data supers super support box properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super support box properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super support box properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperSupportBoxProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover gamer stats response data lifetime item data supers super tac cover
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover
type GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super tac cover additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super tac cover
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_cover" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperTacCover
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties gamer stats response data lifetime item data supers super tac cover properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super tac cover properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super tac cover properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperTacCoverProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert gamer stats response data lifetime item data supers super tac insert
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert
type GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super tac insert additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super tac insert
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_insert" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties gamer stats response data lifetime item data supers super tac insert properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super tac insert properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super tac insert properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperTacInsertProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy gamer stats response data lifetime item data supers super trophy
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy
type GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super trophy additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super trophy
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_trophy" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperTrophy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties gamer stats response data lifetime item data supers super trophy properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super trophy properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super trophy properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperTrophyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop gamer stats response data lifetime item data supers super weapon drop
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop
type GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data supers super weapon drop additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super weapon drop
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "supers" + "." + "super_weapon_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties gamer stats response data lifetime item data supers super weapon drop properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties
type GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data supers super weapon drop properties additional properties
	GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data supers super weapon drop properties
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataSupersSuperWeaponDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticals gamer stats response data lifetime item data tacticals
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticals
type GamerStatsResponseDataLifetimeItemDataTacticals struct {

	// equip adrenaline
	EquipAdrenaline *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline `json:"equip_adrenaline,omitempty"`

	// equip concussion
	EquipConcussion *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion `json:"equip_concussion,omitempty"`

	// equip decoy
	EquipDecoy *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy `json:"equip_decoy,omitempty"`

	// equip flash
	EquipFlash *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash `json:"equip_flash,omitempty"`

	// equip gas grenade
	EquipGasGrenade *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade `json:"equip_gas_grenade,omitempty"`

	// equip hb sensor
	EquipHbSensor *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor `json:"equip_hb_sensor,omitempty"`

	// equip smoke
	EquipSmoke *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke `json:"equip_smoke,omitempty"`

	// equip snapshot grenade
	EquipSnapshotGrenade *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade `json:"equip_snapshot_grenade,omitempty"`

	// gamer stats response data lifetime item data tacticals additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticals) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// equip adrenaline
		EquipAdrenaline *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline `json:"equip_adrenaline,omitempty"`

		// equip concussion
		EquipConcussion *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion `json:"equip_concussion,omitempty"`

		// equip decoy
		EquipDecoy *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy `json:"equip_decoy,omitempty"`

		// equip flash
		EquipFlash *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash `json:"equip_flash,omitempty"`

		// equip gas grenade
		EquipGasGrenade *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade `json:"equip_gas_grenade,omitempty"`

		// equip hb sensor
		EquipHbSensor *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor `json:"equip_hb_sensor,omitempty"`

		// equip smoke
		EquipSmoke *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke `json:"equip_smoke,omitempty"`

		// equip snapshot grenade
		EquipSnapshotGrenade *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade `json:"equip_snapshot_grenade,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticals

	rcv.EquipAdrenaline = stage1.EquipAdrenaline
	rcv.EquipConcussion = stage1.EquipConcussion
	rcv.EquipDecoy = stage1.EquipDecoy
	rcv.EquipFlash = stage1.EquipFlash
	rcv.EquipGasGrenade = stage1.EquipGasGrenade
	rcv.EquipHbSensor = stage1.EquipHbSensor
	rcv.EquipSmoke = stage1.EquipSmoke
	rcv.EquipSnapshotGrenade = stage1.EquipSnapshotGrenade
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "equip_adrenaline")
	delete(stage2, "equip_concussion")
	delete(stage2, "equip_decoy")
	delete(stage2, "equip_flash")
	delete(stage2, "equip_gas_grenade")
	delete(stage2, "equip_hb_sensor")
	delete(stage2, "equip_smoke")
	delete(stage2, "equip_snapshot_grenade")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticals) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// equip adrenaline
		EquipAdrenaline *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline `json:"equip_adrenaline,omitempty"`

		// equip concussion
		EquipConcussion *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion `json:"equip_concussion,omitempty"`

		// equip decoy
		EquipDecoy *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy `json:"equip_decoy,omitempty"`

		// equip flash
		EquipFlash *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash `json:"equip_flash,omitempty"`

		// equip gas grenade
		EquipGasGrenade *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade `json:"equip_gas_grenade,omitempty"`

		// equip hb sensor
		EquipHbSensor *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor `json:"equip_hb_sensor,omitempty"`

		// equip smoke
		EquipSmoke *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke `json:"equip_smoke,omitempty"`

		// equip snapshot grenade
		EquipSnapshotGrenade *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade `json:"equip_snapshot_grenade,omitempty"`
	}

	stage1.EquipAdrenaline = m.EquipAdrenaline
	stage1.EquipConcussion = m.EquipConcussion
	stage1.EquipDecoy = m.EquipDecoy
	stage1.EquipFlash = m.EquipFlash
	stage1.EquipGasGrenade = m.EquipGasGrenade
	stage1.EquipHbSensor = m.EquipHbSensor
	stage1.EquipSmoke = m.EquipSmoke
	stage1.EquipSnapshotGrenade = m.EquipSnapshotGrenade

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals
func (m *GamerStatsResponseDataLifetimeItemDataTacticals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipAdrenaline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipConcussion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipDecoy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipFlash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipGasGrenade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipHbSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipSmoke(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipSnapshotGrenade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipAdrenaline(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipAdrenaline) { // not required
		return nil
	}

	if m.EquipAdrenaline != nil {
		if err := m.EquipAdrenaline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_adrenaline")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipConcussion(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipConcussion) { // not required
		return nil
	}

	if m.EquipConcussion != nil {
		if err := m.EquipConcussion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_concussion")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipDecoy(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipDecoy) { // not required
		return nil
	}

	if m.EquipDecoy != nil {
		if err := m.EquipDecoy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_decoy")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipFlash(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipFlash) { // not required
		return nil
	}

	if m.EquipFlash != nil {
		if err := m.EquipFlash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_flash")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipGasGrenade(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipGasGrenade) { // not required
		return nil
	}

	if m.EquipGasGrenade != nil {
		if err := m.EquipGasGrenade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_gas_grenade")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipHbSensor(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipHbSensor) { // not required
		return nil
	}

	if m.EquipHbSensor != nil {
		if err := m.EquipHbSensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_hb_sensor")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipSmoke(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipSmoke) { // not required
		return nil
	}

	if m.EquipSmoke != nil {
		if err := m.EquipSmoke.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_smoke")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticals) validateEquipSnapshotGrenade(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipSnapshotGrenade) { // not required
		return nil
	}

	if m.EquipSnapshotGrenade != nil {
		if err := m.EquipSnapshotGrenade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_snapshot_grenade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticals) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline gamer stats response data lifetime item data tacticals equip adrenaline
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip adrenaline additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip adrenaline
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_adrenaline" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenaline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties gamer stats response data lifetime item data tacticals equip adrenaline properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip adrenaline properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip adrenaline properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipAdrenalineProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion gamer stats response data lifetime item data tacticals equip concussion
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip concussion additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip concussion
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_concussion" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties gamer stats response data lifetime item data tacticals equip concussion properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip concussion properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip concussion properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipConcussionProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy gamer stats response data lifetime item data tacticals equip decoy
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip decoy additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip decoy
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_decoy" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties gamer stats response data lifetime item data tacticals equip decoy properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip decoy properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip decoy properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipDecoyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash gamer stats response data lifetime item data tacticals equip flash
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip flash additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip flash
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_flash" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties gamer stats response data lifetime item data tacticals equip flash properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip flash properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip flash properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipFlashProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade gamer stats response data lifetime item data tacticals equip gas grenade
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip gas grenade additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip gas grenade
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_gas_grenade" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties gamer stats response data lifetime item data tacticals equip gas grenade properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip gas grenade properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip gas grenade properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipGasGrenadeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor gamer stats response data lifetime item data tacticals equip hb sensor
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip hb sensor additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip hb sensor
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_hb_sensor" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties gamer stats response data lifetime item data tacticals equip hb sensor properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip hb sensor properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip hb sensor properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipHbSensorProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke gamer stats response data lifetime item data tacticals equip smoke
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip smoke additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip smoke
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_smoke" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmoke
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties gamer stats response data lifetime item data tacticals equip smoke properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip smoke properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip smoke properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipSmokeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade gamer stats response data lifetime item data tacticals equip snapshot grenade
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data tacticals equip snapshot grenade additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip snapshot grenade
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_snapshot_grenade" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties gamer stats response data lifetime item data tacticals equip snapshot grenade properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties
type GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime item data tacticals equip snapshot grenade properties additional properties
	GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data tacticals equip snapshot grenade properties
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataTacticalsEquipSnapshotGrenadeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle gamer stats response data lifetime item data weapon assault rifle
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle struct {

	// iw8 ar akilo47
	Iw8ArAkilo47 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 `json:"iw8_ar_akilo47,omitempty"`

	// iw8 ar anovember94
	Iw8ArAnovember94 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 `json:"iw8_ar_anovember94,omitempty"`

	// iw8 ar asierra12
	Iw8ArAsierra12 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 `json:"iw8_ar_asierra12,omitempty"`

	// iw8 ar falima
	Iw8ArFalima *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima `json:"iw8_ar_falima,omitempty"`

	// iw8 ar falpha
	Iw8ArFalpha *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha `json:"iw8_ar_falpha,omitempty"`

	// iw8 ar galima
	Iw8ArGalima *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima `json:"iw8_ar_galima,omitempty"`

	// iw8 ar kilo433
	Iw8ArKilo433 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433 `json:"iw8_ar_kilo433,omitempty"`

	// iw8 ar mcharlie
	Iw8ArMcharlie *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie `json:"iw8_ar_mcharlie,omitempty"`

	// iw8 ar mike4
	Iw8ArMike4 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4 `json:"iw8_ar_mike4,omitempty"`

	// iw8 ar scharlie
	Iw8ArScharlie *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie `json:"iw8_ar_scharlie,omitempty"`

	// iw8 ar sierra552
	Iw8ArSierra552 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552 `json:"iw8_ar_sierra552,omitempty"`

	// iw8 ar tango21
	Iw8ArTango21 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21 `json:"iw8_ar_tango21,omitempty"`

	// iw8 ar valpha
	Iw8ArValpha *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha `json:"iw8_ar_valpha,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 ar akilo47
		Iw8ArAkilo47 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 `json:"iw8_ar_akilo47,omitempty"`

		// iw8 ar anovember94
		Iw8ArAnovember94 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 `json:"iw8_ar_anovember94,omitempty"`

		// iw8 ar asierra12
		Iw8ArAsierra12 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 `json:"iw8_ar_asierra12,omitempty"`

		// iw8 ar falima
		Iw8ArFalima *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima `json:"iw8_ar_falima,omitempty"`

		// iw8 ar falpha
		Iw8ArFalpha *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha `json:"iw8_ar_falpha,omitempty"`

		// iw8 ar galima
		Iw8ArGalima *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima `json:"iw8_ar_galima,omitempty"`

		// iw8 ar kilo433
		Iw8ArKilo433 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433 `json:"iw8_ar_kilo433,omitempty"`

		// iw8 ar mcharlie
		Iw8ArMcharlie *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie `json:"iw8_ar_mcharlie,omitempty"`

		// iw8 ar mike4
		Iw8ArMike4 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4 `json:"iw8_ar_mike4,omitempty"`

		// iw8 ar scharlie
		Iw8ArScharlie *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie `json:"iw8_ar_scharlie,omitempty"`

		// iw8 ar sierra552
		Iw8ArSierra552 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552 `json:"iw8_ar_sierra552,omitempty"`

		// iw8 ar tango21
		Iw8ArTango21 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21 `json:"iw8_ar_tango21,omitempty"`

		// iw8 ar valpha
		Iw8ArValpha *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha `json:"iw8_ar_valpha,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle

	rcv.Iw8ArAkilo47 = stage1.Iw8ArAkilo47
	rcv.Iw8ArAnovember94 = stage1.Iw8ArAnovember94
	rcv.Iw8ArAsierra12 = stage1.Iw8ArAsierra12
	rcv.Iw8ArFalima = stage1.Iw8ArFalima
	rcv.Iw8ArFalpha = stage1.Iw8ArFalpha
	rcv.Iw8ArGalima = stage1.Iw8ArGalima
	rcv.Iw8ArKilo433 = stage1.Iw8ArKilo433
	rcv.Iw8ArMcharlie = stage1.Iw8ArMcharlie
	rcv.Iw8ArMike4 = stage1.Iw8ArMike4
	rcv.Iw8ArScharlie = stage1.Iw8ArScharlie
	rcv.Iw8ArSierra552 = stage1.Iw8ArSierra552
	rcv.Iw8ArTango21 = stage1.Iw8ArTango21
	rcv.Iw8ArValpha = stage1.Iw8ArValpha
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_ar_akilo47")
	delete(stage2, "iw8_ar_anovember94")
	delete(stage2, "iw8_ar_asierra12")
	delete(stage2, "iw8_ar_falima")
	delete(stage2, "iw8_ar_falpha")
	delete(stage2, "iw8_ar_galima")
	delete(stage2, "iw8_ar_kilo433")
	delete(stage2, "iw8_ar_mcharlie")
	delete(stage2, "iw8_ar_mike4")
	delete(stage2, "iw8_ar_scharlie")
	delete(stage2, "iw8_ar_sierra552")
	delete(stage2, "iw8_ar_tango21")
	delete(stage2, "iw8_ar_valpha")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 ar akilo47
		Iw8ArAkilo47 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 `json:"iw8_ar_akilo47,omitempty"`

		// iw8 ar anovember94
		Iw8ArAnovember94 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 `json:"iw8_ar_anovember94,omitempty"`

		// iw8 ar asierra12
		Iw8ArAsierra12 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 `json:"iw8_ar_asierra12,omitempty"`

		// iw8 ar falima
		Iw8ArFalima *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima `json:"iw8_ar_falima,omitempty"`

		// iw8 ar falpha
		Iw8ArFalpha *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha `json:"iw8_ar_falpha,omitempty"`

		// iw8 ar galima
		Iw8ArGalima *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima `json:"iw8_ar_galima,omitempty"`

		// iw8 ar kilo433
		Iw8ArKilo433 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433 `json:"iw8_ar_kilo433,omitempty"`

		// iw8 ar mcharlie
		Iw8ArMcharlie *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie `json:"iw8_ar_mcharlie,omitempty"`

		// iw8 ar mike4
		Iw8ArMike4 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4 `json:"iw8_ar_mike4,omitempty"`

		// iw8 ar scharlie
		Iw8ArScharlie *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie `json:"iw8_ar_scharlie,omitempty"`

		// iw8 ar sierra552
		Iw8ArSierra552 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552 `json:"iw8_ar_sierra552,omitempty"`

		// iw8 ar tango21
		Iw8ArTango21 *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21 `json:"iw8_ar_tango21,omitempty"`

		// iw8 ar valpha
		Iw8ArValpha *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha `json:"iw8_ar_valpha,omitempty"`
	}

	stage1.Iw8ArAkilo47 = m.Iw8ArAkilo47
	stage1.Iw8ArAnovember94 = m.Iw8ArAnovember94
	stage1.Iw8ArAsierra12 = m.Iw8ArAsierra12
	stage1.Iw8ArFalima = m.Iw8ArFalima
	stage1.Iw8ArFalpha = m.Iw8ArFalpha
	stage1.Iw8ArGalima = m.Iw8ArGalima
	stage1.Iw8ArKilo433 = m.Iw8ArKilo433
	stage1.Iw8ArMcharlie = m.Iw8ArMcharlie
	stage1.Iw8ArMike4 = m.Iw8ArMike4
	stage1.Iw8ArScharlie = m.Iw8ArScharlie
	stage1.Iw8ArSierra552 = m.Iw8ArSierra552
	stage1.Iw8ArTango21 = m.Iw8ArTango21
	stage1.Iw8ArValpha = m.Iw8ArValpha

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8ArAkilo47(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArAnovember94(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArAsierra12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArFalima(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArFalpha(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArGalima(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArKilo433(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArMcharlie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArMike4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArScharlie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArSierra552(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArTango21(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArValpha(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArAkilo47(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArAkilo47) { // not required
		return nil
	}

	if m.Iw8ArAkilo47 != nil {
		if err := m.Iw8ArAkilo47.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_akilo47")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArAnovember94(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArAnovember94) { // not required
		return nil
	}

	if m.Iw8ArAnovember94 != nil {
		if err := m.Iw8ArAnovember94.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_anovember94")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArAsierra12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArAsierra12) { // not required
		return nil
	}

	if m.Iw8ArAsierra12 != nil {
		if err := m.Iw8ArAsierra12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_asierra12")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArFalima(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArFalima) { // not required
		return nil
	}

	if m.Iw8ArFalima != nil {
		if err := m.Iw8ArFalima.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falima")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArFalpha(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArFalpha) { // not required
		return nil
	}

	if m.Iw8ArFalpha != nil {
		if err := m.Iw8ArFalpha.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falpha")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArGalima(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArGalima) { // not required
		return nil
	}

	if m.Iw8ArGalima != nil {
		if err := m.Iw8ArGalima.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_galima")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArKilo433(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArKilo433) { // not required
		return nil
	}

	if m.Iw8ArKilo433 != nil {
		if err := m.Iw8ArKilo433.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_kilo433")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArMcharlie(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArMcharlie) { // not required
		return nil
	}

	if m.Iw8ArMcharlie != nil {
		if err := m.Iw8ArMcharlie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mcharlie")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArMike4(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArMike4) { // not required
		return nil
	}

	if m.Iw8ArMike4 != nil {
		if err := m.Iw8ArMike4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mike4")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArScharlie(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArScharlie) { // not required
		return nil
	}

	if m.Iw8ArScharlie != nil {
		if err := m.Iw8ArScharlie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_scharlie")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArSierra552(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArSierra552) { // not required
		return nil
	}

	if m.Iw8ArSierra552 != nil {
		if err := m.Iw8ArSierra552.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_sierra552")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArTango21(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArTango21) { // not required
		return nil
	}

	if m.Iw8ArTango21 != nil {
		if err := m.Iw8ArTango21.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_tango21")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) validateIw8ArValpha(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArValpha) { // not required
		return nil
	}

	if m.Iw8ArValpha != nil {
		if err := m.Iw8ArValpha.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_valpha")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 gamer stats response data lifetime item data weapon assault rifle iw8 ar akilo47
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar akilo47 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar akilo47
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_akilo47" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar akilo47 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar akilo47 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar akilo47 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 gamer stats response data lifetime item data weapon assault rifle iw8 ar anovember94
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar anovember94 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar anovember94
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_anovember94" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar anovember94 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar anovember94 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar anovember94 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 gamer stats response data lifetime item data weapon assault rifle iw8 ar asierra12
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar asierra12 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar asierra12
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_asierra12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar asierra12 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar asierra12 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar asierra12 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima gamer stats response data lifetime item data weapon assault rifle iw8 ar falima
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar falima additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar falima
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falima" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalima
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties gamer stats response data lifetime item data weapon assault rifle iw8 ar falima properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar falima properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar falima properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha gamer stats response data lifetime item data weapon assault rifle iw8 ar falpha
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar falpha additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar falpha
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falpha" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalpha
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties gamer stats response data lifetime item data weapon assault rifle iw8 ar falpha properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar falpha properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar falpha properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima gamer stats response data lifetime item data weapon assault rifle iw8 ar galima
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar galima additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar galima
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_galima" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalima
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties gamer stats response data lifetime item data weapon assault rifle iw8 ar galima properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar galima properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar galima properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433 gamer stats response data lifetime item data weapon assault rifle iw8 ar kilo433
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar kilo433 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar kilo433
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_kilo433" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar kilo433 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar kilo433 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar kilo433 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie gamer stats response data lifetime item data weapon assault rifle iw8 ar mcharlie
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar mcharlie additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar mcharlie
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mcharlie" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties gamer stats response data lifetime item data weapon assault rifle iw8 ar mcharlie properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar mcharlie properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar mcharlie properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4 gamer stats response data lifetime item data weapon assault rifle iw8 ar mike4
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar mike4 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar mike4
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mike4" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar mike4 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar mike4 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar mike4 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie gamer stats response data lifetime item data weapon assault rifle iw8 ar scharlie
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar scharlie additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar scharlie
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_scharlie" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties gamer stats response data lifetime item data weapon assault rifle iw8 ar scharlie properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar scharlie properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar scharlie properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552 gamer stats response data lifetime item data weapon assault rifle iw8 ar sierra552
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar sierra552 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar sierra552
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_sierra552" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar sierra552 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar sierra552 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar sierra552 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21 gamer stats response data lifetime item data weapon assault rifle iw8 ar tango21
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar tango21 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar tango21
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_tango21" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties gamer stats response data lifetime item data weapon assault rifle iw8 ar tango21 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar tango21 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar tango21 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha gamer stats response data lifetime item data weapon assault rifle iw8 ar valpha
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar valpha additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar valpha
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_valpha" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValpha
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties gamer stats response data lifetime item data weapon assault rifle iw8 ar valpha properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon assault rifle iw8 ar valpha properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon assault rifle iw8 ar valpha properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncher gamer stats response data lifetime item data weapon launcher
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncher
type GamerStatsResponseDataLifetimeItemDataWeaponLauncher struct {

	// iw8 la gromeo
	Iw8LaGromeo *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo `json:"iw8_la_gromeo,omitempty"`

	// iw8 la juliet
	Iw8LaJuliet *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet `json:"iw8_la_juliet,omitempty"`

	// iw8 la kgolf
	Iw8LaKgolf *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf `json:"iw8_la_kgolf,omitempty"`

	// iw8 la mike32
	Iw8LaMike32 *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32 `json:"iw8_la_mike32,omitempty"`

	// iw8 la rpapa7
	Iw8LaRpapa7 *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7 `json:"iw8_la_rpapa7,omitempty"`

	// gamer stats response data lifetime item data weapon launcher additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 la gromeo
		Iw8LaGromeo *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo `json:"iw8_la_gromeo,omitempty"`

		// iw8 la juliet
		Iw8LaJuliet *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet `json:"iw8_la_juliet,omitempty"`

		// iw8 la kgolf
		Iw8LaKgolf *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf `json:"iw8_la_kgolf,omitempty"`

		// iw8 la mike32
		Iw8LaMike32 *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32 `json:"iw8_la_mike32,omitempty"`

		// iw8 la rpapa7
		Iw8LaRpapa7 *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7 `json:"iw8_la_rpapa7,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncher

	rcv.Iw8LaGromeo = stage1.Iw8LaGromeo
	rcv.Iw8LaJuliet = stage1.Iw8LaJuliet
	rcv.Iw8LaKgolf = stage1.Iw8LaKgolf
	rcv.Iw8LaMike32 = stage1.Iw8LaMike32
	rcv.Iw8LaRpapa7 = stage1.Iw8LaRpapa7
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_la_gromeo")
	delete(stage2, "iw8_la_juliet")
	delete(stage2, "iw8_la_kgolf")
	delete(stage2, "iw8_la_mike32")
	delete(stage2, "iw8_la_rpapa7")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncher) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 la gromeo
		Iw8LaGromeo *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo `json:"iw8_la_gromeo,omitempty"`

		// iw8 la juliet
		Iw8LaJuliet *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet `json:"iw8_la_juliet,omitempty"`

		// iw8 la kgolf
		Iw8LaKgolf *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf `json:"iw8_la_kgolf,omitempty"`

		// iw8 la mike32
		Iw8LaMike32 *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32 `json:"iw8_la_mike32,omitempty"`

		// iw8 la rpapa7
		Iw8LaRpapa7 *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7 `json:"iw8_la_rpapa7,omitempty"`
	}

	stage1.Iw8LaGromeo = m.Iw8LaGromeo
	stage1.Iw8LaJuliet = m.Iw8LaJuliet
	stage1.Iw8LaKgolf = m.Iw8LaKgolf
	stage1.Iw8LaMike32 = m.Iw8LaMike32
	stage1.Iw8LaRpapa7 = m.Iw8LaRpapa7

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8LaGromeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaJuliet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaKgolf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaMike32(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaRpapa7(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) validateIw8LaGromeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaGromeo) { // not required
		return nil
	}

	if m.Iw8LaGromeo != nil {
		if err := m.Iw8LaGromeo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_gromeo")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) validateIw8LaJuliet(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaJuliet) { // not required
		return nil
	}

	if m.Iw8LaJuliet != nil {
		if err := m.Iw8LaJuliet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_juliet")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) validateIw8LaKgolf(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaKgolf) { // not required
		return nil
	}

	if m.Iw8LaKgolf != nil {
		if err := m.Iw8LaKgolf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_kgolf")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) validateIw8LaMike32(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaMike32) { // not required
		return nil
	}

	if m.Iw8LaMike32 != nil {
		if err := m.Iw8LaMike32.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_mike32")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) validateIw8LaRpapa7(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaRpapa7) { // not required
		return nil
	}

	if m.Iw8LaRpapa7 != nil {
		if err := m.Iw8LaRpapa7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_rpapa7")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncher) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo gamer stats response data lifetime item data weapon launcher iw8 la gromeo
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la gromeo additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la gromeo
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_gromeo" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties gamer stats response data lifetime item data weapon launcher iw8 la gromeo properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la gromeo properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la gromeo properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaGromeoProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet gamer stats response data lifetime item data weapon launcher iw8 la juliet
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la juliet additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la juliet
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_juliet" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJuliet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties gamer stats response data lifetime item data weapon launcher iw8 la juliet properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la juliet properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la juliet properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaJulietProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf gamer stats response data lifetime item data weapon launcher iw8 la kgolf
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la kgolf additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la kgolf
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_kgolf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties gamer stats response data lifetime item data weapon launcher iw8 la kgolf properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la kgolf properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la kgolf properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaKgolfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32 gamer stats response data lifetime item data weapon launcher iw8 la mike32
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la mike32 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la mike32
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_mike32" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties gamer stats response data lifetime item data weapon launcher iw8 la mike32 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la mike32 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la mike32 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaMike32Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7 gamer stats response data lifetime item data weapon launcher iw8 la rpapa7
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la rpapa7 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la rpapa7
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_rpapa7" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties gamer stats response data lifetime item data weapon launcher iw8 la rpapa7 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon launcher iw8 la rpapa7 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon launcher iw8 la rpapa7 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLauncherIw8LaRpapa7Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmg gamer stats response data lifetime item data weapon lmg
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmg
type GamerStatsResponseDataLifetimeItemDataWeaponLmg struct {

	// iw8 lm kilo121
	Iw8LmKilo121 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121 `json:"iw8_lm_kilo121,omitempty"`

	// iw8 lm lima86
	Iw8LmLima86 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86 `json:"iw8_lm_lima86,omitempty"`

	// iw8 lm mgolf34
	Iw8LmMgolf34 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34 `json:"iw8_lm_mgolf34,omitempty"`

	// iw8 lm mgolf36
	Iw8LmMgolf36 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36 `json:"iw8_lm_mgolf36,omitempty"`

	// iw8 lm mkilo3
	Iw8LmMkilo3 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3 `json:"iw8_lm_mkilo3,omitempty"`

	// iw8 lm pkilo
	Iw8LmPkilo *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo `json:"iw8_lm_pkilo,omitempty"`

	// iw8 lm sierrax
	Iw8LmSierrax *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax `json:"iw8_lm_sierrax,omitempty"`

	// gamer stats response data lifetime item data weapon lmg additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 lm kilo121
		Iw8LmKilo121 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121 `json:"iw8_lm_kilo121,omitempty"`

		// iw8 lm lima86
		Iw8LmLima86 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86 `json:"iw8_lm_lima86,omitempty"`

		// iw8 lm mgolf34
		Iw8LmMgolf34 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34 `json:"iw8_lm_mgolf34,omitempty"`

		// iw8 lm mgolf36
		Iw8LmMgolf36 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36 `json:"iw8_lm_mgolf36,omitempty"`

		// iw8 lm mkilo3
		Iw8LmMkilo3 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3 `json:"iw8_lm_mkilo3,omitempty"`

		// iw8 lm pkilo
		Iw8LmPkilo *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo `json:"iw8_lm_pkilo,omitempty"`

		// iw8 lm sierrax
		Iw8LmSierrax *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax `json:"iw8_lm_sierrax,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmg

	rcv.Iw8LmKilo121 = stage1.Iw8LmKilo121
	rcv.Iw8LmLima86 = stage1.Iw8LmLima86
	rcv.Iw8LmMgolf34 = stage1.Iw8LmMgolf34
	rcv.Iw8LmMgolf36 = stage1.Iw8LmMgolf36
	rcv.Iw8LmMkilo3 = stage1.Iw8LmMkilo3
	rcv.Iw8LmPkilo = stage1.Iw8LmPkilo
	rcv.Iw8LmSierrax = stage1.Iw8LmSierrax
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_lm_kilo121")
	delete(stage2, "iw8_lm_lima86")
	delete(stage2, "iw8_lm_mgolf34")
	delete(stage2, "iw8_lm_mgolf36")
	delete(stage2, "iw8_lm_mkilo3")
	delete(stage2, "iw8_lm_pkilo")
	delete(stage2, "iw8_lm_sierrax")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmg) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 lm kilo121
		Iw8LmKilo121 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121 `json:"iw8_lm_kilo121,omitempty"`

		// iw8 lm lima86
		Iw8LmLima86 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86 `json:"iw8_lm_lima86,omitempty"`

		// iw8 lm mgolf34
		Iw8LmMgolf34 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34 `json:"iw8_lm_mgolf34,omitempty"`

		// iw8 lm mgolf36
		Iw8LmMgolf36 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36 `json:"iw8_lm_mgolf36,omitempty"`

		// iw8 lm mkilo3
		Iw8LmMkilo3 *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3 `json:"iw8_lm_mkilo3,omitempty"`

		// iw8 lm pkilo
		Iw8LmPkilo *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo `json:"iw8_lm_pkilo,omitempty"`

		// iw8 lm sierrax
		Iw8LmSierrax *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax `json:"iw8_lm_sierrax,omitempty"`
	}

	stage1.Iw8LmKilo121 = m.Iw8LmKilo121
	stage1.Iw8LmLima86 = m.Iw8LmLima86
	stage1.Iw8LmMgolf34 = m.Iw8LmMgolf34
	stage1.Iw8LmMgolf36 = m.Iw8LmMgolf36
	stage1.Iw8LmMkilo3 = m.Iw8LmMkilo3
	stage1.Iw8LmPkilo = m.Iw8LmPkilo
	stage1.Iw8LmSierrax = m.Iw8LmSierrax

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8LmKilo121(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmLima86(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmMgolf34(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmMgolf36(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmMkilo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmPkilo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmSierrax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmKilo121(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmKilo121) { // not required
		return nil
	}

	if m.Iw8LmKilo121 != nil {
		if err := m.Iw8LmKilo121.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_kilo121")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmLima86(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmLima86) { // not required
		return nil
	}

	if m.Iw8LmLima86 != nil {
		if err := m.Iw8LmLima86.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_lima86")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmMgolf34(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmMgolf34) { // not required
		return nil
	}

	if m.Iw8LmMgolf34 != nil {
		if err := m.Iw8LmMgolf34.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf34")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmMgolf36(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmMgolf36) { // not required
		return nil
	}

	if m.Iw8LmMgolf36 != nil {
		if err := m.Iw8LmMgolf36.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf36")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmMkilo3(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmMkilo3) { // not required
		return nil
	}

	if m.Iw8LmMkilo3 != nil {
		if err := m.Iw8LmMkilo3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mkilo3")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmPkilo(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmPkilo) { // not required
		return nil
	}

	if m.Iw8LmPkilo != nil {
		if err := m.Iw8LmPkilo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_pkilo")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) validateIw8LmSierrax(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmSierrax) { // not required
		return nil
	}

	if m.Iw8LmSierrax != nil {
		if err := m.Iw8LmSierrax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_sierrax")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmg) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121 gamer stats response data lifetime item data weapon lmg iw8 lm kilo121
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm kilo121 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm kilo121
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_kilo121" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties gamer stats response data lifetime item data weapon lmg iw8 lm kilo121 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm kilo121 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm kilo121 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmKilo121Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86 gamer stats response data lifetime item data weapon lmg iw8 lm lima86
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm lima86 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm lima86
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_lima86" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties gamer stats response data lifetime item data weapon lmg iw8 lm lima86 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm lima86 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm lima86 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmLima86Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34 gamer stats response data lifetime item data weapon lmg iw8 lm mgolf34
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm mgolf34 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm mgolf34
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf34" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties gamer stats response data lifetime item data weapon lmg iw8 lm mgolf34 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm mgolf34 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm mgolf34 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf34Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36 gamer stats response data lifetime item data weapon lmg iw8 lm mgolf36
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm mgolf36 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm mgolf36
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf36" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties gamer stats response data lifetime item data weapon lmg iw8 lm mgolf36 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm mgolf36 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm mgolf36 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMgolf36Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3 gamer stats response data lifetime item data weapon lmg iw8 lm mkilo3
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm mkilo3 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm mkilo3
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mkilo3" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties gamer stats response data lifetime item data weapon lmg iw8 lm mkilo3 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm mkilo3 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm mkilo3 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmMkilo3Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo gamer stats response data lifetime item data weapon lmg iw8 lm pkilo
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm pkilo additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm pkilo
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_pkilo" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkilo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties gamer stats response data lifetime item data weapon lmg iw8 lm pkilo properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm pkilo properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm pkilo properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmPkiloProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax gamer stats response data lifetime item data weapon lmg iw8 lm sierrax
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm sierrax additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm sierrax
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_sierrax" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierrax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties gamer stats response data lifetime item data weapon lmg iw8 lm sierrax properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties
type GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon lmg iw8 lm sierrax properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon lmg iw8 lm sierrax properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponLmgIw8LmSierraxProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksman gamer stats response data lifetime item data weapon marksman
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksman
type GamerStatsResponseDataLifetimeItemDataWeaponMarksman struct {

	// iw8 sn crossbow
	Iw8SnCrossbow *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow `json:"iw8_sn_crossbow,omitempty"`

	// iw8 sn kilo98
	Iw8SnKilo98 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98 `json:"iw8_sn_kilo98,omitempty"`

	// iw8 sn mike14
	Iw8SnMike14 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14 `json:"iw8_sn_mike14,omitempty"`

	// iw8 sn romeo700
	Iw8SnRomeo700 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700 `json:"iw8_sn_romeo700,omitempty"`

	// iw8 sn sbeta
	Iw8SnSbeta *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta `json:"iw8_sn_sbeta,omitempty"`

	// iw8 sn sksierra
	Iw8SnSksierra *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra `json:"iw8_sn_sksierra,omitempty"`

	// gamer stats response data lifetime item data weapon marksman additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sn crossbow
		Iw8SnCrossbow *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow `json:"iw8_sn_crossbow,omitempty"`

		// iw8 sn kilo98
		Iw8SnKilo98 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98 `json:"iw8_sn_kilo98,omitempty"`

		// iw8 sn mike14
		Iw8SnMike14 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14 `json:"iw8_sn_mike14,omitempty"`

		// iw8 sn romeo700
		Iw8SnRomeo700 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700 `json:"iw8_sn_romeo700,omitempty"`

		// iw8 sn sbeta
		Iw8SnSbeta *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta `json:"iw8_sn_sbeta,omitempty"`

		// iw8 sn sksierra
		Iw8SnSksierra *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra `json:"iw8_sn_sksierra,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksman

	rcv.Iw8SnCrossbow = stage1.Iw8SnCrossbow
	rcv.Iw8SnKilo98 = stage1.Iw8SnKilo98
	rcv.Iw8SnMike14 = stage1.Iw8SnMike14
	rcv.Iw8SnRomeo700 = stage1.Iw8SnRomeo700
	rcv.Iw8SnSbeta = stage1.Iw8SnSbeta
	rcv.Iw8SnSksierra = stage1.Iw8SnSksierra
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sn_crossbow")
	delete(stage2, "iw8_sn_kilo98")
	delete(stage2, "iw8_sn_mike14")
	delete(stage2, "iw8_sn_romeo700")
	delete(stage2, "iw8_sn_sbeta")
	delete(stage2, "iw8_sn_sksierra")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksman) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sn crossbow
		Iw8SnCrossbow *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow `json:"iw8_sn_crossbow,omitempty"`

		// iw8 sn kilo98
		Iw8SnKilo98 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98 `json:"iw8_sn_kilo98,omitempty"`

		// iw8 sn mike14
		Iw8SnMike14 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14 `json:"iw8_sn_mike14,omitempty"`

		// iw8 sn romeo700
		Iw8SnRomeo700 *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700 `json:"iw8_sn_romeo700,omitempty"`

		// iw8 sn sbeta
		Iw8SnSbeta *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta `json:"iw8_sn_sbeta,omitempty"`

		// iw8 sn sksierra
		Iw8SnSksierra *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra `json:"iw8_sn_sksierra,omitempty"`
	}

	stage1.Iw8SnCrossbow = m.Iw8SnCrossbow
	stage1.Iw8SnKilo98 = m.Iw8SnKilo98
	stage1.Iw8SnMike14 = m.Iw8SnMike14
	stage1.Iw8SnRomeo700 = m.Iw8SnRomeo700
	stage1.Iw8SnSbeta = m.Iw8SnSbeta
	stage1.Iw8SnSksierra = m.Iw8SnSksierra

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8SnCrossbow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnKilo98(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnMike14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnRomeo700(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnSbeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnSksierra(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) validateIw8SnCrossbow(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnCrossbow) { // not required
		return nil
	}

	if m.Iw8SnCrossbow != nil {
		if err := m.Iw8SnCrossbow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_crossbow")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) validateIw8SnKilo98(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnKilo98) { // not required
		return nil
	}

	if m.Iw8SnKilo98 != nil {
		if err := m.Iw8SnKilo98.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_kilo98")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) validateIw8SnMike14(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnMike14) { // not required
		return nil
	}

	if m.Iw8SnMike14 != nil {
		if err := m.Iw8SnMike14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_mike14")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) validateIw8SnRomeo700(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnRomeo700) { // not required
		return nil
	}

	if m.Iw8SnRomeo700 != nil {
		if err := m.Iw8SnRomeo700.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_romeo700")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) validateIw8SnSbeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnSbeta) { // not required
		return nil
	}

	if m.Iw8SnSbeta != nil {
		if err := m.Iw8SnSbeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sbeta")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) validateIw8SnSksierra(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnSksierra) { // not required
		return nil
	}

	if m.Iw8SnSksierra != nil {
		if err := m.Iw8SnSksierra.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sksierra")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksman) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksman
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow gamer stats response data lifetime item data weapon marksman iw8 sn crossbow
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn crossbow additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn crossbow
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_crossbow" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties gamer stats response data lifetime item data weapon marksman iw8 sn crossbow properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn crossbow properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn crossbow properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98 gamer stats response data lifetime item data weapon marksman iw8 sn kilo98
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn kilo98 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn kilo98
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_kilo98" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties gamer stats response data lifetime item data weapon marksman iw8 sn kilo98 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn kilo98 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn kilo98 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnKilo98Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14 gamer stats response data lifetime item data weapon marksman iw8 sn mike14
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn mike14 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn mike14
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_mike14" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties gamer stats response data lifetime item data weapon marksman iw8 sn mike14 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn mike14 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn mike14 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnMike14Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700 gamer stats response data lifetime item data weapon marksman iw8 sn romeo700
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn romeo700 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn romeo700
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_romeo700" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties gamer stats response data lifetime item data weapon marksman iw8 sn romeo700 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn romeo700 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn romeo700 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta gamer stats response data lifetime item data weapon marksman iw8 sn sbeta
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn sbeta additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn sbeta
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sbeta" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties gamer stats response data lifetime item data weapon marksman iw8 sn sbeta properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn sbeta properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn sbeta properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSbetaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra gamer stats response data lifetime item data weapon marksman iw8 sn sksierra
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn sksierra additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn sksierra
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sksierra" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierra
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties gamer stats response data lifetime item data weapon marksman iw8 sn sksierra properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties
type GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon marksman iw8 sn sksierra properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon marksman iw8 sn sksierra properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMarksmanIw8SnSksierraProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMelee gamer stats response data lifetime item data weapon melee
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMelee
type GamerStatsResponseDataLifetimeItemDataWeaponMelee struct {

	// iw8 knife
	Iw8Knife *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife `json:"iw8_knife,omitempty"`

	// iw8 me akimboblades
	Iw8MeAkimboblades *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades `json:"iw8_me_akimboblades,omitempty"`

	// iw8 me akimboblunt
	Iw8MeAkimboblunt *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt `json:"iw8_me_akimboblunt,omitempty"`

	// gamer stats response data lifetime item data weapon melee additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 knife
		Iw8Knife *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife `json:"iw8_knife,omitempty"`

		// iw8 me akimboblades
		Iw8MeAkimboblades *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades `json:"iw8_me_akimboblades,omitempty"`

		// iw8 me akimboblunt
		Iw8MeAkimboblunt *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt `json:"iw8_me_akimboblunt,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMelee

	rcv.Iw8Knife = stage1.Iw8Knife
	rcv.Iw8MeAkimboblades = stage1.Iw8MeAkimboblades
	rcv.Iw8MeAkimboblunt = stage1.Iw8MeAkimboblunt
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_knife")
	delete(stage2, "iw8_me_akimboblades")
	delete(stage2, "iw8_me_akimboblunt")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMelee) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 knife
		Iw8Knife *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife `json:"iw8_knife,omitempty"`

		// iw8 me akimboblades
		Iw8MeAkimboblades *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades `json:"iw8_me_akimboblades,omitempty"`

		// iw8 me akimboblunt
		Iw8MeAkimboblunt *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt `json:"iw8_me_akimboblunt,omitempty"`
	}

	stage1.Iw8Knife = m.Iw8Knife
	stage1.Iw8MeAkimboblades = m.Iw8MeAkimboblades
	stage1.Iw8MeAkimboblunt = m.Iw8MeAkimboblunt

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8Knife(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8MeAkimboblades(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8MeAkimboblunt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) validateIw8Knife(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8Knife) { // not required
		return nil
	}

	if m.Iw8Knife != nil {
		if err := m.Iw8Knife.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_knife")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) validateIw8MeAkimboblades(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8MeAkimboblades) { // not required
		return nil
	}

	if m.Iw8MeAkimboblades != nil {
		if err := m.Iw8MeAkimboblades.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblades")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) validateIw8MeAkimboblunt(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8MeAkimboblunt) { // not required
		return nil
	}

	if m.Iw8MeAkimboblunt != nil {
		if err := m.Iw8MeAkimboblunt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblunt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMelee) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMelee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife gamer stats response data lifetime item data weapon melee iw8 knife
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife
type GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon melee iw8 knife additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee iw8 knife
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_knife" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8Knife
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties gamer stats response data lifetime item data weapon melee iw8 knife properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties
type GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon melee iw8 knife properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee iw8 knife properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8KnifeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades gamer stats response data lifetime item data weapon melee iw8 me akimboblades
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades
type GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon melee iw8 me akimboblades additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee iw8 me akimboblades
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblades" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblades
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties gamer stats response data lifetime item data weapon melee iw8 me akimboblades properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties
type GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon melee iw8 me akimboblades properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee iw8 me akimboblades properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt gamer stats response data lifetime item data weapon melee iw8 me akimboblunt
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt
type GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon melee iw8 me akimboblunt additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee iw8 me akimboblunt
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblunt" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimboblunt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties gamer stats response data lifetime item data weapon melee iw8 me akimboblunt properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties
type GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon melee iw8 me akimboblunt properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon melee iw8 me akimboblunt properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponOther gamer stats response data lifetime item data weapon other
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponOther
type GamerStatsResponseDataLifetimeItemDataWeaponOther struct {

	// iw8 me riotshield
	Iw8MeRiotshield *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield `json:"iw8_me_riotshield,omitempty"`

	// gamer stats response data lifetime item data weapon other additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponOtherAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOther) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 me riotshield
		Iw8MeRiotshield *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield `json:"iw8_me_riotshield,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponOther

	rcv.Iw8MeRiotshield = stage1.Iw8MeRiotshield
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_me_riotshield")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponOtherAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponOther) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 me riotshield
		Iw8MeRiotshield *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield `json:"iw8_me_riotshield,omitempty"`
	}

	stage1.Iw8MeRiotshield = m.Iw8MeRiotshield

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponOtherAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponOtherAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon other
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOther) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8MeRiotshield(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponOther) validateIw8MeRiotshield(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8MeRiotshield) { // not required
		return nil
	}

	if m.Iw8MeRiotshield != nil {
		if err := m.Iw8MeRiotshield.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_other" + "." + "iw8_me_riotshield")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOther) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOther) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield gamer stats response data lifetime item data weapon other iw8 me riotshield
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield
type GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon other iw8 me riotshield additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon other iw8 me riotshield
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_other" + "." + "iw8_me_riotshield" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshield
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties gamer stats response data lifetime item data weapon other iw8 me riotshield properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties
type GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon other iw8 me riotshield properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon other iw8 me riotshield properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponOtherIw8MeRiotshieldProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistol gamer stats response data lifetime item data weapon pistol
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistol
type GamerStatsResponseDataLifetimeItemDataWeaponPistol struct {

	// iw8 pi cpapa
	Iw8PiCpapa *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa `json:"iw8_pi_cpapa,omitempty"`

	// iw8 pi decho
	Iw8PiDecho *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho `json:"iw8_pi_decho,omitempty"`

	// iw8 pi golf21
	Iw8PiGolf21 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21 `json:"iw8_pi_golf21,omitempty"`

	// iw8 pi mike1911
	Iw8PiMike1911 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911 `json:"iw8_pi_mike1911,omitempty"`

	// iw8 pi mike9
	Iw8PiMike9 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9 `json:"iw8_pi_mike9,omitempty"`

	// iw8 pi papa320
	Iw8PiPapa320 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320 `json:"iw8_pi_papa320,omitempty"`

	// gamer stats response data lifetime item data weapon pistol additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 pi cpapa
		Iw8PiCpapa *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa `json:"iw8_pi_cpapa,omitempty"`

		// iw8 pi decho
		Iw8PiDecho *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho `json:"iw8_pi_decho,omitempty"`

		// iw8 pi golf21
		Iw8PiGolf21 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21 `json:"iw8_pi_golf21,omitempty"`

		// iw8 pi mike1911
		Iw8PiMike1911 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911 `json:"iw8_pi_mike1911,omitempty"`

		// iw8 pi mike9
		Iw8PiMike9 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9 `json:"iw8_pi_mike9,omitempty"`

		// iw8 pi papa320
		Iw8PiPapa320 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320 `json:"iw8_pi_papa320,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistol

	rcv.Iw8PiCpapa = stage1.Iw8PiCpapa
	rcv.Iw8PiDecho = stage1.Iw8PiDecho
	rcv.Iw8PiGolf21 = stage1.Iw8PiGolf21
	rcv.Iw8PiMike1911 = stage1.Iw8PiMike1911
	rcv.Iw8PiMike9 = stage1.Iw8PiMike9
	rcv.Iw8PiPapa320 = stage1.Iw8PiPapa320
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_pi_cpapa")
	delete(stage2, "iw8_pi_decho")
	delete(stage2, "iw8_pi_golf21")
	delete(stage2, "iw8_pi_mike1911")
	delete(stage2, "iw8_pi_mike9")
	delete(stage2, "iw8_pi_papa320")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistol) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 pi cpapa
		Iw8PiCpapa *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa `json:"iw8_pi_cpapa,omitempty"`

		// iw8 pi decho
		Iw8PiDecho *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho `json:"iw8_pi_decho,omitempty"`

		// iw8 pi golf21
		Iw8PiGolf21 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21 `json:"iw8_pi_golf21,omitempty"`

		// iw8 pi mike1911
		Iw8PiMike1911 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911 `json:"iw8_pi_mike1911,omitempty"`

		// iw8 pi mike9
		Iw8PiMike9 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9 `json:"iw8_pi_mike9,omitempty"`

		// iw8 pi papa320
		Iw8PiPapa320 *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320 `json:"iw8_pi_papa320,omitempty"`
	}

	stage1.Iw8PiCpapa = m.Iw8PiCpapa
	stage1.Iw8PiDecho = m.Iw8PiDecho
	stage1.Iw8PiGolf21 = m.Iw8PiGolf21
	stage1.Iw8PiMike1911 = m.Iw8PiMike1911
	stage1.Iw8PiMike9 = m.Iw8PiMike9
	stage1.Iw8PiPapa320 = m.Iw8PiPapa320

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8PiCpapa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiDecho(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiGolf21(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiMike1911(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiMike9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiPapa320(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) validateIw8PiCpapa(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiCpapa) { // not required
		return nil
	}

	if m.Iw8PiCpapa != nil {
		if err := m.Iw8PiCpapa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_cpapa")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) validateIw8PiDecho(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiDecho) { // not required
		return nil
	}

	if m.Iw8PiDecho != nil {
		if err := m.Iw8PiDecho.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_decho")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) validateIw8PiGolf21(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiGolf21) { // not required
		return nil
	}

	if m.Iw8PiGolf21 != nil {
		if err := m.Iw8PiGolf21.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_golf21")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) validateIw8PiMike1911(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiMike1911) { // not required
		return nil
	}

	if m.Iw8PiMike1911 != nil {
		if err := m.Iw8PiMike1911.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike1911")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) validateIw8PiMike9(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiMike9) { // not required
		return nil
	}

	if m.Iw8PiMike9 != nil {
		if err := m.Iw8PiMike9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike9")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) validateIw8PiPapa320(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiPapa320) { // not required
		return nil
	}

	if m.Iw8PiPapa320 != nil {
		if err := m.Iw8PiPapa320.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_papa320")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistol) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa gamer stats response data lifetime item data weapon pistol iw8 pi cpapa
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi cpapa additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi cpapa
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_cpapa" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapa
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties gamer stats response data lifetime item data weapon pistol iw8 pi cpapa properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi cpapa properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi cpapa properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiCpapaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho gamer stats response data lifetime item data weapon pistol iw8 pi decho
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi decho additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi decho
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_decho" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDecho
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties gamer stats response data lifetime item data weapon pistol iw8 pi decho properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi decho properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi decho properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiDechoProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21 gamer stats response data lifetime item data weapon pistol iw8 pi golf21
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi golf21 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi golf21
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_golf21" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties gamer stats response data lifetime item data weapon pistol iw8 pi golf21 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi golf21 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi golf21 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiGolf21Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911 gamer stats response data lifetime item data weapon pistol iw8 pi mike1911
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi mike1911 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi mike1911
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike1911" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties gamer stats response data lifetime item data weapon pistol iw8 pi mike1911 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi mike1911 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi mike1911 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike1911Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9 gamer stats response data lifetime item data weapon pistol iw8 pi mike9
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi mike9 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi mike9
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike9" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties gamer stats response data lifetime item data weapon pistol iw8 pi mike9 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi mike9 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi mike9 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiMike9Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320 gamer stats response data lifetime item data weapon pistol iw8 pi papa320
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi papa320 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi papa320
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_papa320" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties gamer stats response data lifetime item data weapon pistol iw8 pi papa320 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties
type GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon pistol iw8 pi papa320 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon pistol iw8 pi papa320 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponPistolIw8PiPapa320Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgun gamer stats response data lifetime item data weapon shotgun
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgun
type GamerStatsResponseDataLifetimeItemDataWeaponShotgun struct {

	// iw8 sh aalpha12
	Iw8ShAalpha12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12 `json:"iw8_sh_aalpha12,omitempty"`

	// iw8 sh charlie725
	Iw8ShCharlie725 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725 `json:"iw8_sh_charlie725,omitempty"`

	// iw8 sh dpapa12
	Iw8ShDpapa12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12 `json:"iw8_sh_dpapa12,omitempty"`

	// iw8 sh mike26
	Iw8ShMike26 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26 `json:"iw8_sh_mike26,omitempty"`

	// iw8 sh oscar12
	Iw8ShOscar12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12 `json:"iw8_sh_oscar12,omitempty"`

	// iw8 sh romeo870
	Iw8ShRomeo870 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870 `json:"iw8_sh_romeo870,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sh aalpha12
		Iw8ShAalpha12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12 `json:"iw8_sh_aalpha12,omitempty"`

		// iw8 sh charlie725
		Iw8ShCharlie725 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725 `json:"iw8_sh_charlie725,omitempty"`

		// iw8 sh dpapa12
		Iw8ShDpapa12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12 `json:"iw8_sh_dpapa12,omitempty"`

		// iw8 sh mike26
		Iw8ShMike26 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26 `json:"iw8_sh_mike26,omitempty"`

		// iw8 sh oscar12
		Iw8ShOscar12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12 `json:"iw8_sh_oscar12,omitempty"`

		// iw8 sh romeo870
		Iw8ShRomeo870 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870 `json:"iw8_sh_romeo870,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgun

	rcv.Iw8ShAalpha12 = stage1.Iw8ShAalpha12
	rcv.Iw8ShCharlie725 = stage1.Iw8ShCharlie725
	rcv.Iw8ShDpapa12 = stage1.Iw8ShDpapa12
	rcv.Iw8ShMike26 = stage1.Iw8ShMike26
	rcv.Iw8ShOscar12 = stage1.Iw8ShOscar12
	rcv.Iw8ShRomeo870 = stage1.Iw8ShRomeo870
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sh_aalpha12")
	delete(stage2, "iw8_sh_charlie725")
	delete(stage2, "iw8_sh_dpapa12")
	delete(stage2, "iw8_sh_mike26")
	delete(stage2, "iw8_sh_oscar12")
	delete(stage2, "iw8_sh_romeo870")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgun) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sh aalpha12
		Iw8ShAalpha12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12 `json:"iw8_sh_aalpha12,omitempty"`

		// iw8 sh charlie725
		Iw8ShCharlie725 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725 `json:"iw8_sh_charlie725,omitempty"`

		// iw8 sh dpapa12
		Iw8ShDpapa12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12 `json:"iw8_sh_dpapa12,omitempty"`

		// iw8 sh mike26
		Iw8ShMike26 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26 `json:"iw8_sh_mike26,omitempty"`

		// iw8 sh oscar12
		Iw8ShOscar12 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12 `json:"iw8_sh_oscar12,omitempty"`

		// iw8 sh romeo870
		Iw8ShRomeo870 *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870 `json:"iw8_sh_romeo870,omitempty"`
	}

	stage1.Iw8ShAalpha12 = m.Iw8ShAalpha12
	stage1.Iw8ShCharlie725 = m.Iw8ShCharlie725
	stage1.Iw8ShDpapa12 = m.Iw8ShDpapa12
	stage1.Iw8ShMike26 = m.Iw8ShMike26
	stage1.Iw8ShOscar12 = m.Iw8ShOscar12
	stage1.Iw8ShRomeo870 = m.Iw8ShRomeo870

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8ShAalpha12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShCharlie725(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShDpapa12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShMike26(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShOscar12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShRomeo870(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) validateIw8ShAalpha12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShAalpha12) { // not required
		return nil
	}

	if m.Iw8ShAalpha12 != nil {
		if err := m.Iw8ShAalpha12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_aalpha12")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) validateIw8ShCharlie725(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShCharlie725) { // not required
		return nil
	}

	if m.Iw8ShCharlie725 != nil {
		if err := m.Iw8ShCharlie725.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_charlie725")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) validateIw8ShDpapa12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShDpapa12) { // not required
		return nil
	}

	if m.Iw8ShDpapa12 != nil {
		if err := m.Iw8ShDpapa12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_dpapa12")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) validateIw8ShMike26(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShMike26) { // not required
		return nil
	}

	if m.Iw8ShMike26 != nil {
		if err := m.Iw8ShMike26.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_mike26")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) validateIw8ShOscar12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShOscar12) { // not required
		return nil
	}

	if m.Iw8ShOscar12 != nil {
		if err := m.Iw8ShOscar12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_oscar12")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) validateIw8ShRomeo870(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShRomeo870) { // not required
		return nil
	}

	if m.Iw8ShRomeo870 != nil {
		if err := m.Iw8ShRomeo870.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_romeo870")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgun) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12 gamer stats response data lifetime item data weapon shotgun iw8 sh aalpha12
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh aalpha12 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh aalpha12
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_aalpha12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties gamer stats response data lifetime item data weapon shotgun iw8 sh aalpha12 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh aalpha12 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh aalpha12 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShAalpha12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725 gamer stats response data lifetime item data weapon shotgun iw8 sh charlie725
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh charlie725 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh charlie725
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_charlie725" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties gamer stats response data lifetime item data weapon shotgun iw8 sh charlie725 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh charlie725 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh charlie725 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShCharlie725Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12 gamer stats response data lifetime item data weapon shotgun iw8 sh dpapa12
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh dpapa12 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh dpapa12
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_dpapa12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties gamer stats response data lifetime item data weapon shotgun iw8 sh dpapa12 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh dpapa12 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh dpapa12 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShDpapa12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26 gamer stats response data lifetime item data weapon shotgun iw8 sh mike26
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh mike26 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh mike26
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_mike26" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties gamer stats response data lifetime item data weapon shotgun iw8 sh mike26 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh mike26 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh mike26 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShMike26Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12 gamer stats response data lifetime item data weapon shotgun iw8 sh oscar12
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh oscar12 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh oscar12
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_oscar12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties gamer stats response data lifetime item data weapon shotgun iw8 sh oscar12 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh oscar12 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh oscar12 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShOscar12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870 gamer stats response data lifetime item data weapon shotgun iw8 sh romeo870
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh romeo870 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh romeo870
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_romeo870" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties gamer stats response data lifetime item data weapon shotgun iw8 sh romeo870 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties
type GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon shotgun iw8 sh romeo870 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon shotgun iw8 sh romeo870 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponShotgunIw8ShRomeo870Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmg gamer stats response data lifetime item data weapon smg
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmg
type GamerStatsResponseDataLifetimeItemDataWeaponSmg struct {

	// iw8 sm augolf
	Iw8SmAugolf *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf `json:"iw8_sm_augolf,omitempty"`

	// iw8 sm beta
	Iw8SmBeta *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta `json:"iw8_sm_beta,omitempty"`

	// iw8 sm charlie9
	Iw8SmCharlie9 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9 `json:"iw8_sm_charlie9,omitempty"`

	// iw8 sm mpapa5
	Iw8SmMpapa5 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5 `json:"iw8_sm_mpapa5,omitempty"`

	// iw8 sm mpapa7
	Iw8SmMpapa7 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7 `json:"iw8_sm_mpapa7,omitempty"`

	// iw8 sm papa90
	Iw8SmPapa90 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90 `json:"iw8_sm_papa90,omitempty"`

	// iw8 sm smgolf45
	Iw8SmSmgolf45 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45 `json:"iw8_sm_smgolf45,omitempty"`

	// iw8 sm uzulu
	Iw8SmUzulu *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu `json:"iw8_sm_uzulu,omitempty"`

	// iw8 sm victor
	Iw8SmVictor *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor `json:"iw8_sm_victor,omitempty"`

	// gamer stats response data lifetime item data weapon smg additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sm augolf
		Iw8SmAugolf *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf `json:"iw8_sm_augolf,omitempty"`

		// iw8 sm beta
		Iw8SmBeta *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta `json:"iw8_sm_beta,omitempty"`

		// iw8 sm charlie9
		Iw8SmCharlie9 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9 `json:"iw8_sm_charlie9,omitempty"`

		// iw8 sm mpapa5
		Iw8SmMpapa5 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5 `json:"iw8_sm_mpapa5,omitempty"`

		// iw8 sm mpapa7
		Iw8SmMpapa7 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7 `json:"iw8_sm_mpapa7,omitempty"`

		// iw8 sm papa90
		Iw8SmPapa90 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90 `json:"iw8_sm_papa90,omitempty"`

		// iw8 sm smgolf45
		Iw8SmSmgolf45 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45 `json:"iw8_sm_smgolf45,omitempty"`

		// iw8 sm uzulu
		Iw8SmUzulu *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu `json:"iw8_sm_uzulu,omitempty"`

		// iw8 sm victor
		Iw8SmVictor *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor `json:"iw8_sm_victor,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmg

	rcv.Iw8SmAugolf = stage1.Iw8SmAugolf
	rcv.Iw8SmBeta = stage1.Iw8SmBeta
	rcv.Iw8SmCharlie9 = stage1.Iw8SmCharlie9
	rcv.Iw8SmMpapa5 = stage1.Iw8SmMpapa5
	rcv.Iw8SmMpapa7 = stage1.Iw8SmMpapa7
	rcv.Iw8SmPapa90 = stage1.Iw8SmPapa90
	rcv.Iw8SmSmgolf45 = stage1.Iw8SmSmgolf45
	rcv.Iw8SmUzulu = stage1.Iw8SmUzulu
	rcv.Iw8SmVictor = stage1.Iw8SmVictor
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sm_augolf")
	delete(stage2, "iw8_sm_beta")
	delete(stage2, "iw8_sm_charlie9")
	delete(stage2, "iw8_sm_mpapa5")
	delete(stage2, "iw8_sm_mpapa7")
	delete(stage2, "iw8_sm_papa90")
	delete(stage2, "iw8_sm_smgolf45")
	delete(stage2, "iw8_sm_uzulu")
	delete(stage2, "iw8_sm_victor")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmg) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sm augolf
		Iw8SmAugolf *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf `json:"iw8_sm_augolf,omitempty"`

		// iw8 sm beta
		Iw8SmBeta *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta `json:"iw8_sm_beta,omitempty"`

		// iw8 sm charlie9
		Iw8SmCharlie9 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9 `json:"iw8_sm_charlie9,omitempty"`

		// iw8 sm mpapa5
		Iw8SmMpapa5 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5 `json:"iw8_sm_mpapa5,omitempty"`

		// iw8 sm mpapa7
		Iw8SmMpapa7 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7 `json:"iw8_sm_mpapa7,omitempty"`

		// iw8 sm papa90
		Iw8SmPapa90 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90 `json:"iw8_sm_papa90,omitempty"`

		// iw8 sm smgolf45
		Iw8SmSmgolf45 *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45 `json:"iw8_sm_smgolf45,omitempty"`

		// iw8 sm uzulu
		Iw8SmUzulu *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu `json:"iw8_sm_uzulu,omitempty"`

		// iw8 sm victor
		Iw8SmVictor *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor `json:"iw8_sm_victor,omitempty"`
	}

	stage1.Iw8SmAugolf = m.Iw8SmAugolf
	stage1.Iw8SmBeta = m.Iw8SmBeta
	stage1.Iw8SmCharlie9 = m.Iw8SmCharlie9
	stage1.Iw8SmMpapa5 = m.Iw8SmMpapa5
	stage1.Iw8SmMpapa7 = m.Iw8SmMpapa7
	stage1.Iw8SmPapa90 = m.Iw8SmPapa90
	stage1.Iw8SmSmgolf45 = m.Iw8SmSmgolf45
	stage1.Iw8SmUzulu = m.Iw8SmUzulu
	stage1.Iw8SmVictor = m.Iw8SmVictor

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8SmAugolf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmBeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmCharlie9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmMpapa5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmMpapa7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmPapa90(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmSmgolf45(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmUzulu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmVictor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmAugolf(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmAugolf) { // not required
		return nil
	}

	if m.Iw8SmAugolf != nil {
		if err := m.Iw8SmAugolf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_augolf")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmBeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmBeta) { // not required
		return nil
	}

	if m.Iw8SmBeta != nil {
		if err := m.Iw8SmBeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_beta")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmCharlie9(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmCharlie9) { // not required
		return nil
	}

	if m.Iw8SmCharlie9 != nil {
		if err := m.Iw8SmCharlie9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_charlie9")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmMpapa5(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmMpapa5) { // not required
		return nil
	}

	if m.Iw8SmMpapa5 != nil {
		if err := m.Iw8SmMpapa5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa5")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmMpapa7(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmMpapa7) { // not required
		return nil
	}

	if m.Iw8SmMpapa7 != nil {
		if err := m.Iw8SmMpapa7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa7")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmPapa90(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmPapa90) { // not required
		return nil
	}

	if m.Iw8SmPapa90 != nil {
		if err := m.Iw8SmPapa90.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_papa90")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmSmgolf45(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmSmgolf45) { // not required
		return nil
	}

	if m.Iw8SmSmgolf45 != nil {
		if err := m.Iw8SmSmgolf45.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_smgolf45")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmUzulu(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmUzulu) { // not required
		return nil
	}

	if m.Iw8SmUzulu != nil {
		if err := m.Iw8SmUzulu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_uzulu")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) validateIw8SmVictor(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmVictor) { // not required
		return nil
	}

	if m.Iw8SmVictor != nil {
		if err := m.Iw8SmVictor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_victor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmg) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf gamer stats response data lifetime item data weapon smg iw8 sm augolf
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm augolf additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm augolf
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_augolf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties gamer stats response data lifetime item data weapon smg iw8 sm augolf properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm augolf properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm augolf properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmAugolfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta gamer stats response data lifetime item data weapon smg iw8 sm beta
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm beta additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm beta
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_beta" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties gamer stats response data lifetime item data weapon smg iw8 sm beta properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm beta properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm beta properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmBetaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9 gamer stats response data lifetime item data weapon smg iw8 sm charlie9
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm charlie9 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm charlie9
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_charlie9" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties gamer stats response data lifetime item data weapon smg iw8 sm charlie9 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm charlie9 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm charlie9 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmCharlie9Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5 gamer stats response data lifetime item data weapon smg iw8 sm mpapa5
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm mpapa5 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm mpapa5
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa5" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties gamer stats response data lifetime item data weapon smg iw8 sm mpapa5 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm mpapa5 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm mpapa5 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa5Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7 gamer stats response data lifetime item data weapon smg iw8 sm mpapa7
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm mpapa7 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm mpapa7
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa7" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties gamer stats response data lifetime item data weapon smg iw8 sm mpapa7 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm mpapa7 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm mpapa7 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmMpapa7Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90 gamer stats response data lifetime item data weapon smg iw8 sm papa90
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm papa90 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm papa90
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_papa90" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties gamer stats response data lifetime item data weapon smg iw8 sm papa90 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm papa90 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm papa90 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmPapa90Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45 gamer stats response data lifetime item data weapon smg iw8 sm smgolf45
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm smgolf45 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm smgolf45
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_smgolf45" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties gamer stats response data lifetime item data weapon smg iw8 sm smgolf45 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm smgolf45 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm smgolf45 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmSmgolf45Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu gamer stats response data lifetime item data weapon smg iw8 sm uzulu
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm uzulu additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm uzulu
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_uzulu" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzulu
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties gamer stats response data lifetime item data weapon smg iw8 sm uzulu properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm uzulu properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm uzulu properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmUzuluProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor gamer stats response data lifetime item data weapon smg iw8 sm victor
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm victor additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm victor
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_victor" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties gamer stats response data lifetime item data weapon smg iw8 sm victor properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties
type GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon smg iw8 sm victor properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon smg iw8 sm victor properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSmgIw8SmVictorProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniper gamer stats response data lifetime item data weapon sniper
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniper
type GamerStatsResponseDataLifetimeItemDataWeaponSniper struct {

	// iw8 sn alpha50
	Iw8SnAlpha50 *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50 `json:"iw8_sn_alpha50,omitempty"`

	// iw8 sn delta
	Iw8SnDelta *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta `json:"iw8_sn_delta,omitempty"`

	// iw8 sn hdromeo
	Iw8SnHdromeo *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo `json:"iw8_sn_hdromeo,omitempty"`

	// iw8 sn xmike109
	Iw8SnXmike109 *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109 `json:"iw8_sn_xmike109,omitempty"`

	// gamer stats response data lifetime item data weapon sniper additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sn alpha50
		Iw8SnAlpha50 *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50 `json:"iw8_sn_alpha50,omitempty"`

		// iw8 sn delta
		Iw8SnDelta *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta `json:"iw8_sn_delta,omitempty"`

		// iw8 sn hdromeo
		Iw8SnHdromeo *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo `json:"iw8_sn_hdromeo,omitempty"`

		// iw8 sn xmike109
		Iw8SnXmike109 *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109 `json:"iw8_sn_xmike109,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniper

	rcv.Iw8SnAlpha50 = stage1.Iw8SnAlpha50
	rcv.Iw8SnDelta = stage1.Iw8SnDelta
	rcv.Iw8SnHdromeo = stage1.Iw8SnHdromeo
	rcv.Iw8SnXmike109 = stage1.Iw8SnXmike109
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sn_alpha50")
	delete(stage2, "iw8_sn_delta")
	delete(stage2, "iw8_sn_hdromeo")
	delete(stage2, "iw8_sn_xmike109")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniper) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sn alpha50
		Iw8SnAlpha50 *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50 `json:"iw8_sn_alpha50,omitempty"`

		// iw8 sn delta
		Iw8SnDelta *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta `json:"iw8_sn_delta,omitempty"`

		// iw8 sn hdromeo
		Iw8SnHdromeo *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo `json:"iw8_sn_hdromeo,omitempty"`

		// iw8 sn xmike109
		Iw8SnXmike109 *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109 `json:"iw8_sn_xmike109,omitempty"`
	}

	stage1.Iw8SnAlpha50 = m.Iw8SnAlpha50
	stage1.Iw8SnDelta = m.Iw8SnDelta
	stage1.Iw8SnHdromeo = m.Iw8SnHdromeo
	stage1.Iw8SnXmike109 = m.Iw8SnXmike109

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8SnAlpha50(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnHdromeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnXmike109(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) validateIw8SnAlpha50(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnAlpha50) { // not required
		return nil
	}

	if m.Iw8SnAlpha50 != nil {
		if err := m.Iw8SnAlpha50.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_alpha50")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) validateIw8SnDelta(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnDelta) { // not required
		return nil
	}

	if m.Iw8SnDelta != nil {
		if err := m.Iw8SnDelta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_delta")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) validateIw8SnHdromeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnHdromeo) { // not required
		return nil
	}

	if m.Iw8SnHdromeo != nil {
		if err := m.Iw8SnHdromeo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_hdromeo")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) validateIw8SnXmike109(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnXmike109) { // not required
		return nil
	}

	if m.Iw8SnXmike109 != nil {
		if err := m.Iw8SnXmike109.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_xmike109")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniper) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50 gamer stats response data lifetime item data weapon sniper iw8 sn alpha50
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn alpha50 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn alpha50
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_alpha50" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties gamer stats response data lifetime item data weapon sniper iw8 sn alpha50 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn alpha50 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn alpha50 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnAlpha50Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta gamer stats response data lifetime item data weapon sniper iw8 sn delta
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn delta additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn delta
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_delta" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDelta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties gamer stats response data lifetime item data weapon sniper iw8 sn delta properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn delta properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn delta properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnDeltaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo gamer stats response data lifetime item data weapon sniper iw8 sn hdromeo
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn hdromeo additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn hdromeo
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_hdromeo" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties gamer stats response data lifetime item data weapon sniper iw8 sn hdromeo properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn hdromeo properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn hdromeo properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnHdromeoProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109 gamer stats response data lifetime item data weapon sniper iw8 sn xmike109
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109 struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties `json:"properties,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn xmike109 additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn xmike109
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_xmike109" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties gamer stats response data lifetime item data weapon sniper iw8 sn xmike109 properties
//
// swagger:model GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties
type GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// gamer stats response data lifetime item data weapon sniper iw8 sn xmike109 properties additional properties
	GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime item data weapon sniper iw8 sn xmike109 properties
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeItemDataWeaponSniperIw8SnXmike109Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeMode gamer stats response data lifetime mode
//
// swagger:model GamerStatsResponseDataLifetimeMode
type GamerStatsResponseDataLifetimeMode struct {

	// arena
	Arena *GamerStatsResponseDataLifetimeModeArena `json:"arena,omitempty"`

	// arm
	Arm *GamerStatsResponseDataLifetimeModeArm `json:"arm,omitempty"`

	// br
	Br *GamerStatsResponseDataLifetimeModeBr `json:"br,omitempty"`

	// br all
	BrAll *GamerStatsResponseDataLifetimeModeBrAll `json:"br_all,omitempty"`

	// br dmz
	BrDmz *GamerStatsResponseDataLifetimeModeBrDmz `json:"br_dmz,omitempty"`

	// conf
	Conf *GamerStatsResponseDataLifetimeModeConf `json:"conf,omitempty"`

	// cyber
	Cyber *GamerStatsResponseDataLifetimeModeCyber `json:"cyber,omitempty"`

	// dom
	Dom *GamerStatsResponseDataLifetimeModeDom `json:"dom,omitempty"`

	// grnd
	Grnd *GamerStatsResponseDataLifetimeModeGrnd `json:"grnd,omitempty"`

	// gun
	Gun *GamerStatsResponseDataLifetimeModeGun `json:"gun,omitempty"`

	// hc conf
	HcConf *GamerStatsResponseDataLifetimeModeHcConf `json:"hc_conf,omitempty"`

	// hc cyber
	HcCyber *GamerStatsResponseDataLifetimeModeHcCyber `json:"hc_cyber,omitempty"`

	// hc dom
	HcDom *GamerStatsResponseDataLifetimeModeHcDom `json:"hc_dom,omitempty"`

	// hc hq
	HcHq *GamerStatsResponseDataLifetimeModeHcHq `json:"hc_hq,omitempty"`

	// hc sd
	HcSd *GamerStatsResponseDataLifetimeModeHcSd `json:"hc_sd,omitempty"`

	// hc war
	HcWar *GamerStatsResponseDataLifetimeModeHcWar `json:"hc_war,omitempty"`

	// hq
	Hq *GamerStatsResponseDataLifetimeModeHq `json:"hq,omitempty"`

	// infect
	Infect *GamerStatsResponseDataLifetimeModeInfect `json:"infect,omitempty"`

	// koth
	Koth *GamerStatsResponseDataLifetimeModeKoth `json:"koth,omitempty"`

	// sd
	Sd *GamerStatsResponseDataLifetimeModeSd `json:"sd,omitempty"`

	// war
	War *GamerStatsResponseDataLifetimeModeWar `json:"war,omitempty"`

	// gamer stats response data lifetime mode additional properties
	GamerStatsResponseDataLifetimeModeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeMode) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// arena
		Arena *GamerStatsResponseDataLifetimeModeArena `json:"arena,omitempty"`

		// arm
		Arm *GamerStatsResponseDataLifetimeModeArm `json:"arm,omitempty"`

		// br
		Br *GamerStatsResponseDataLifetimeModeBr `json:"br,omitempty"`

		// br all
		BrAll *GamerStatsResponseDataLifetimeModeBrAll `json:"br_all,omitempty"`

		// br dmz
		BrDmz *GamerStatsResponseDataLifetimeModeBrDmz `json:"br_dmz,omitempty"`

		// conf
		Conf *GamerStatsResponseDataLifetimeModeConf `json:"conf,omitempty"`

		// cyber
		Cyber *GamerStatsResponseDataLifetimeModeCyber `json:"cyber,omitempty"`

		// dom
		Dom *GamerStatsResponseDataLifetimeModeDom `json:"dom,omitempty"`

		// grnd
		Grnd *GamerStatsResponseDataLifetimeModeGrnd `json:"grnd,omitempty"`

		// gun
		Gun *GamerStatsResponseDataLifetimeModeGun `json:"gun,omitempty"`

		// hc conf
		HcConf *GamerStatsResponseDataLifetimeModeHcConf `json:"hc_conf,omitempty"`

		// hc cyber
		HcCyber *GamerStatsResponseDataLifetimeModeHcCyber `json:"hc_cyber,omitempty"`

		// hc dom
		HcDom *GamerStatsResponseDataLifetimeModeHcDom `json:"hc_dom,omitempty"`

		// hc hq
		HcHq *GamerStatsResponseDataLifetimeModeHcHq `json:"hc_hq,omitempty"`

		// hc sd
		HcSd *GamerStatsResponseDataLifetimeModeHcSd `json:"hc_sd,omitempty"`

		// hc war
		HcWar *GamerStatsResponseDataLifetimeModeHcWar `json:"hc_war,omitempty"`

		// hq
		Hq *GamerStatsResponseDataLifetimeModeHq `json:"hq,omitempty"`

		// infect
		Infect *GamerStatsResponseDataLifetimeModeInfect `json:"infect,omitempty"`

		// koth
		Koth *GamerStatsResponseDataLifetimeModeKoth `json:"koth,omitempty"`

		// sd
		Sd *GamerStatsResponseDataLifetimeModeSd `json:"sd,omitempty"`

		// war
		War *GamerStatsResponseDataLifetimeModeWar `json:"war,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeMode

	rcv.Arena = stage1.Arena
	rcv.Arm = stage1.Arm
	rcv.Br = stage1.Br
	rcv.BrAll = stage1.BrAll
	rcv.BrDmz = stage1.BrDmz
	rcv.Conf = stage1.Conf
	rcv.Cyber = stage1.Cyber
	rcv.Dom = stage1.Dom
	rcv.Grnd = stage1.Grnd
	rcv.Gun = stage1.Gun
	rcv.HcConf = stage1.HcConf
	rcv.HcCyber = stage1.HcCyber
	rcv.HcDom = stage1.HcDom
	rcv.HcHq = stage1.HcHq
	rcv.HcSd = stage1.HcSd
	rcv.HcWar = stage1.HcWar
	rcv.Hq = stage1.Hq
	rcv.Infect = stage1.Infect
	rcv.Koth = stage1.Koth
	rcv.Sd = stage1.Sd
	rcv.War = stage1.War
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "arena")
	delete(stage2, "arm")
	delete(stage2, "br")
	delete(stage2, "br_all")
	delete(stage2, "br_dmz")
	delete(stage2, "conf")
	delete(stage2, "cyber")
	delete(stage2, "dom")
	delete(stage2, "grnd")
	delete(stage2, "gun")
	delete(stage2, "hc_conf")
	delete(stage2, "hc_cyber")
	delete(stage2, "hc_dom")
	delete(stage2, "hc_hq")
	delete(stage2, "hc_sd")
	delete(stage2, "hc_war")
	delete(stage2, "hq")
	delete(stage2, "infect")
	delete(stage2, "koth")
	delete(stage2, "sd")
	delete(stage2, "war")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeMode) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// arena
		Arena *GamerStatsResponseDataLifetimeModeArena `json:"arena,omitempty"`

		// arm
		Arm *GamerStatsResponseDataLifetimeModeArm `json:"arm,omitempty"`

		// br
		Br *GamerStatsResponseDataLifetimeModeBr `json:"br,omitempty"`

		// br all
		BrAll *GamerStatsResponseDataLifetimeModeBrAll `json:"br_all,omitempty"`

		// br dmz
		BrDmz *GamerStatsResponseDataLifetimeModeBrDmz `json:"br_dmz,omitempty"`

		// conf
		Conf *GamerStatsResponseDataLifetimeModeConf `json:"conf,omitempty"`

		// cyber
		Cyber *GamerStatsResponseDataLifetimeModeCyber `json:"cyber,omitempty"`

		// dom
		Dom *GamerStatsResponseDataLifetimeModeDom `json:"dom,omitempty"`

		// grnd
		Grnd *GamerStatsResponseDataLifetimeModeGrnd `json:"grnd,omitempty"`

		// gun
		Gun *GamerStatsResponseDataLifetimeModeGun `json:"gun,omitempty"`

		// hc conf
		HcConf *GamerStatsResponseDataLifetimeModeHcConf `json:"hc_conf,omitempty"`

		// hc cyber
		HcCyber *GamerStatsResponseDataLifetimeModeHcCyber `json:"hc_cyber,omitempty"`

		// hc dom
		HcDom *GamerStatsResponseDataLifetimeModeHcDom `json:"hc_dom,omitempty"`

		// hc hq
		HcHq *GamerStatsResponseDataLifetimeModeHcHq `json:"hc_hq,omitempty"`

		// hc sd
		HcSd *GamerStatsResponseDataLifetimeModeHcSd `json:"hc_sd,omitempty"`

		// hc war
		HcWar *GamerStatsResponseDataLifetimeModeHcWar `json:"hc_war,omitempty"`

		// hq
		Hq *GamerStatsResponseDataLifetimeModeHq `json:"hq,omitempty"`

		// infect
		Infect *GamerStatsResponseDataLifetimeModeInfect `json:"infect,omitempty"`

		// koth
		Koth *GamerStatsResponseDataLifetimeModeKoth `json:"koth,omitempty"`

		// sd
		Sd *GamerStatsResponseDataLifetimeModeSd `json:"sd,omitempty"`

		// war
		War *GamerStatsResponseDataLifetimeModeWar `json:"war,omitempty"`
	}

	stage1.Arena = m.Arena
	stage1.Arm = m.Arm
	stage1.Br = m.Br
	stage1.BrAll = m.BrAll
	stage1.BrDmz = m.BrDmz
	stage1.Conf = m.Conf
	stage1.Cyber = m.Cyber
	stage1.Dom = m.Dom
	stage1.Grnd = m.Grnd
	stage1.Gun = m.Gun
	stage1.HcConf = m.HcConf
	stage1.HcCyber = m.HcCyber
	stage1.HcDom = m.HcDom
	stage1.HcHq = m.HcHq
	stage1.HcSd = m.HcSd
	stage1.HcWar = m.HcWar
	stage1.Hq = m.Hq
	stage1.Infect = m.Infect
	stage1.Koth = m.Koth
	stage1.Sd = m.Sd
	stage1.War = m.War

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode
func (m *GamerStatsResponseDataLifetimeMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArena(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrDmz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCyber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcCyber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcDom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcHq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcSd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcWar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKoth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWar(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateArena(formats strfmt.Registry) error {

	if swag.IsZero(m.Arena) { // not required
		return nil
	}

	if m.Arena != nil {
		if err := m.Arena.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "arena")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateArm(formats strfmt.Registry) error {

	if swag.IsZero(m.Arm) { // not required
		return nil
	}

	if m.Arm != nil {
		if err := m.Arm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "arm")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateBr(formats strfmt.Registry) error {

	if swag.IsZero(m.Br) { // not required
		return nil
	}

	if m.Br != nil {
		if err := m.Br.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "br")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateBrAll(formats strfmt.Registry) error {

	if swag.IsZero(m.BrAll) { // not required
		return nil
	}

	if m.BrAll != nil {
		if err := m.BrAll.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "br_all")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateBrDmz(formats strfmt.Registry) error {

	if swag.IsZero(m.BrDmz) { // not required
		return nil
	}

	if m.BrDmz != nil {
		if err := m.BrDmz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "br_dmz")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateConf(formats strfmt.Registry) error {

	if swag.IsZero(m.Conf) { // not required
		return nil
	}

	if m.Conf != nil {
		if err := m.Conf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "conf")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateCyber(formats strfmt.Registry) error {

	if swag.IsZero(m.Cyber) { // not required
		return nil
	}

	if m.Cyber != nil {
		if err := m.Cyber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "cyber")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateDom(formats strfmt.Registry) error {

	if swag.IsZero(m.Dom) { // not required
		return nil
	}

	if m.Dom != nil {
		if err := m.Dom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "dom")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateGrnd(formats strfmt.Registry) error {

	if swag.IsZero(m.Grnd) { // not required
		return nil
	}

	if m.Grnd != nil {
		if err := m.Grnd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "grnd")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateGun(formats strfmt.Registry) error {

	if swag.IsZero(m.Gun) { // not required
		return nil
	}

	if m.Gun != nil {
		if err := m.Gun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "gun")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHcConf(formats strfmt.Registry) error {

	if swag.IsZero(m.HcConf) { // not required
		return nil
	}

	if m.HcConf != nil {
		if err := m.HcConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_conf")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHcCyber(formats strfmt.Registry) error {

	if swag.IsZero(m.HcCyber) { // not required
		return nil
	}

	if m.HcCyber != nil {
		if err := m.HcCyber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_cyber")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHcDom(formats strfmt.Registry) error {

	if swag.IsZero(m.HcDom) { // not required
		return nil
	}

	if m.HcDom != nil {
		if err := m.HcDom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_dom")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHcHq(formats strfmt.Registry) error {

	if swag.IsZero(m.HcHq) { // not required
		return nil
	}

	if m.HcHq != nil {
		if err := m.HcHq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_hq")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHcSd(formats strfmt.Registry) error {

	if swag.IsZero(m.HcSd) { // not required
		return nil
	}

	if m.HcSd != nil {
		if err := m.HcSd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_sd")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHcWar(formats strfmt.Registry) error {

	if swag.IsZero(m.HcWar) { // not required
		return nil
	}

	if m.HcWar != nil {
		if err := m.HcWar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_war")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateHq(formats strfmt.Registry) error {

	if swag.IsZero(m.Hq) { // not required
		return nil
	}

	if m.Hq != nil {
		if err := m.Hq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hq")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateInfect(formats strfmt.Registry) error {

	if swag.IsZero(m.Infect) { // not required
		return nil
	}

	if m.Infect != nil {
		if err := m.Infect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "infect")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateKoth(formats strfmt.Registry) error {

	if swag.IsZero(m.Koth) { // not required
		return nil
	}

	if m.Koth != nil {
		if err := m.Koth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "koth")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateSd(formats strfmt.Registry) error {

	if swag.IsZero(m.Sd) { // not required
		return nil
	}

	if m.Sd != nil {
		if err := m.Sd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "sd")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeMode) validateWar(formats strfmt.Registry) error {

	if swag.IsZero(m.War) { // not required
		return nil
	}

	if m.War != nil {
		if err := m.War.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "war")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeMode) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeArena gamer stats response data lifetime mode arena
//
// swagger:model GamerStatsResponseDataLifetimeModeArena
type GamerStatsResponseDataLifetimeModeArena struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeArenaProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode arena additional properties
	GamerStatsResponseDataLifetimeModeArenaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeArena) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeArenaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeArena

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeArenaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeArena) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeArenaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeArenaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeArenaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode arena
func (m *GamerStatsResponseDataLifetimeModeArena) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeArena) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "arena" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArena) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArena) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeArena
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeArenaProperties gamer stats response data lifetime mode arena properties
//
// swagger:model GamerStatsResponseDataLifetimeModeArenaProperties
type GamerStatsResponseDataLifetimeModeArenaProperties struct {

	// assists
	Assists float64 `json:"assists,omitempty"`

	// damage
	Damage float64 `json:"damage,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode arena properties additional properties
	GamerStatsResponseDataLifetimeModeArenaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeArenaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// damage
		Damage float64 `json:"damage,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeArenaProperties

	rcv.Assists = stage1.Assists
	rcv.Damage = stage1.Damage
	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "assists")
	delete(stage2, "damage")
	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeArenaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeArenaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// damage
		Damage float64 `json:"damage,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Assists = m.Assists
	stage1.Damage = m.Damage
	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeArenaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeArenaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode arena properties
func (m *GamerStatsResponseDataLifetimeModeArenaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArenaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArenaProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeArenaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeArm gamer stats response data lifetime mode arm
//
// swagger:model GamerStatsResponseDataLifetimeModeArm
type GamerStatsResponseDataLifetimeModeArm struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeArmProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode arm additional properties
	GamerStatsResponseDataLifetimeModeArmAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeArm) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeArmProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeArm

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeArmAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeArm) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeArmProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeArmAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeArmAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode arm
func (m *GamerStatsResponseDataLifetimeModeArm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeArm) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "arm" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArm) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeArm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeArmProperties gamer stats response data lifetime mode arm properties
//
// swagger:model GamerStatsResponseDataLifetimeModeArmProperties
type GamerStatsResponseDataLifetimeModeArmProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode arm properties additional properties
	GamerStatsResponseDataLifetimeModeArmPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeArmProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeArmProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeArmPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeArmProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeArmPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeArmPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode arm properties
func (m *GamerStatsResponseDataLifetimeModeArmProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArmProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeArmProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeArmProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeBr gamer stats response data lifetime mode br
//
// swagger:model GamerStatsResponseDataLifetimeModeBr
type GamerStatsResponseDataLifetimeModeBr struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeBrProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode br additional properties
	GamerStatsResponseDataLifetimeModeBrAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeBr) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeBrProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeBr

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeBrAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeBr) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeBrProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeBrAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeBrAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode br
func (m *GamerStatsResponseDataLifetimeModeBr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeBr) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "br" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBr) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeBr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeBrAll gamer stats response data lifetime mode br all
//
// swagger:model GamerStatsResponseDataLifetimeModeBrAll
type GamerStatsResponseDataLifetimeModeBrAll struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeBrAllProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode br all additional properties
	GamerStatsResponseDataLifetimeModeBrAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeBrAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeBrAllProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeBrAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeBrAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeBrAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeBrAllProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeBrAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeBrAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode br all
func (m *GamerStatsResponseDataLifetimeModeBrAll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeBrAll) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "br_all" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrAll) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeBrAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeBrAllProperties gamer stats response data lifetime mode br all properties
//
// swagger:model GamerStatsResponseDataLifetimeModeBrAllProperties
type GamerStatsResponseDataLifetimeModeBrAllProperties struct {

	// cash
	Cash float64 `json:"cash,omitempty"`

	// contracts
	Contracts float64 `json:"contracts,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// downs
	Downs float64 `json:"downs,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// tokens
	Tokens float64 `json:"tokens,omitempty"`

	// top five
	TopFive float64 `json:"topFive,omitempty"`

	// top ten
	TopTen float64 `json:"topTen,omitempty"`

	// top twenty five
	TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// gamer stats response data lifetime mode br all properties additional properties
	GamerStatsResponseDataLifetimeModeBrAllPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeBrAllProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeBrAllProperties

	rcv.Cash = stage1.Cash
	rcv.Contracts = stage1.Contracts
	rcv.Deaths = stage1.Deaths
	rcv.Downs = stage1.Downs
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	rcv.Tokens = stage1.Tokens
	rcv.TopFive = stage1.TopFive
	rcv.TopTen = stage1.TopTen
	rcv.TopTwentyFive = stage1.TopTwentyFive
	rcv.Wins = stage1.Wins
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cash")
	delete(stage2, "contracts")
	delete(stage2, "deaths")
	delete(stage2, "downs")
	delete(stage2, "gamesPlayed")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	delete(stage2, "tokens")
	delete(stage2, "topFive")
	delete(stage2, "topTen")
	delete(stage2, "topTwentyFive")
	delete(stage2, "wins")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeBrAllPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeBrAllProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}

	stage1.Cash = m.Cash
	stage1.Contracts = m.Contracts
	stage1.Deaths = m.Deaths
	stage1.Downs = m.Downs
	stage1.GamesPlayed = m.GamesPlayed
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed
	stage1.Tokens = m.Tokens
	stage1.TopFive = m.TopFive
	stage1.TopTen = m.TopTen
	stage1.TopTwentyFive = m.TopTwentyFive
	stage1.Wins = m.Wins

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeBrAllPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeBrAllPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode br all properties
func (m *GamerStatsResponseDataLifetimeModeBrAllProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrAllProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrAllProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeBrAllProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeBrDmz gamer stats response data lifetime mode br dmz
//
// swagger:model GamerStatsResponseDataLifetimeModeBrDmz
type GamerStatsResponseDataLifetimeModeBrDmz struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeBrDmzProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode br dmz additional properties
	GamerStatsResponseDataLifetimeModeBrDmzAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeBrDmz) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeBrDmzProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeBrDmz

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeBrDmzAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeBrDmz) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeBrDmzProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeBrDmzAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeBrDmzAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode br dmz
func (m *GamerStatsResponseDataLifetimeModeBrDmz) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeBrDmz) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "br_dmz" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrDmz) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrDmz) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeBrDmz
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeBrDmzProperties gamer stats response data lifetime mode br dmz properties
//
// swagger:model GamerStatsResponseDataLifetimeModeBrDmzProperties
type GamerStatsResponseDataLifetimeModeBrDmzProperties struct {

	// cash
	Cash float64 `json:"cash,omitempty"`

	// contracts
	Contracts float64 `json:"contracts,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// downs
	Downs float64 `json:"downs,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// tokens
	Tokens float64 `json:"tokens,omitempty"`

	// top five
	TopFive float64 `json:"topFive,omitempty"`

	// top ten
	TopTen float64 `json:"topTen,omitempty"`

	// top twenty five
	TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// gamer stats response data lifetime mode br dmz properties additional properties
	GamerStatsResponseDataLifetimeModeBrDmzPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeBrDmzProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeBrDmzProperties

	rcv.Cash = stage1.Cash
	rcv.Contracts = stage1.Contracts
	rcv.Deaths = stage1.Deaths
	rcv.Downs = stage1.Downs
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	rcv.Tokens = stage1.Tokens
	rcv.TopFive = stage1.TopFive
	rcv.TopTen = stage1.TopTen
	rcv.TopTwentyFive = stage1.TopTwentyFive
	rcv.Wins = stage1.Wins
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cash")
	delete(stage2, "contracts")
	delete(stage2, "deaths")
	delete(stage2, "downs")
	delete(stage2, "gamesPlayed")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	delete(stage2, "tokens")
	delete(stage2, "topFive")
	delete(stage2, "topTen")
	delete(stage2, "topTwentyFive")
	delete(stage2, "wins")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeBrDmzPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeBrDmzProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}

	stage1.Cash = m.Cash
	stage1.Contracts = m.Contracts
	stage1.Deaths = m.Deaths
	stage1.Downs = m.Downs
	stage1.GamesPlayed = m.GamesPlayed
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed
	stage1.Tokens = m.Tokens
	stage1.TopFive = m.TopFive
	stage1.TopTen = m.TopTen
	stage1.TopTwentyFive = m.TopTwentyFive
	stage1.Wins = m.Wins

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeBrDmzPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeBrDmzPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode br dmz properties
func (m *GamerStatsResponseDataLifetimeModeBrDmzProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrDmzProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrDmzProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeBrDmzProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeBrProperties gamer stats response data lifetime mode br properties
//
// swagger:model GamerStatsResponseDataLifetimeModeBrProperties
type GamerStatsResponseDataLifetimeModeBrProperties struct {

	// cash
	Cash float64 `json:"cash,omitempty"`

	// contracts
	Contracts float64 `json:"contracts,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// downs
	Downs float64 `json:"downs,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// tokens
	Tokens float64 `json:"tokens,omitempty"`

	// top five
	TopFive float64 `json:"topFive,omitempty"`

	// top ten
	TopTen float64 `json:"topTen,omitempty"`

	// top twenty five
	TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// gamer stats response data lifetime mode br properties additional properties
	GamerStatsResponseDataLifetimeModeBrPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeBrProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeBrProperties

	rcv.Cash = stage1.Cash
	rcv.Contracts = stage1.Contracts
	rcv.Deaths = stage1.Deaths
	rcv.Downs = stage1.Downs
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	rcv.Tokens = stage1.Tokens
	rcv.TopFive = stage1.TopFive
	rcv.TopTen = stage1.TopTen
	rcv.TopTwentyFive = stage1.TopTwentyFive
	rcv.Wins = stage1.Wins
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cash")
	delete(stage2, "contracts")
	delete(stage2, "deaths")
	delete(stage2, "downs")
	delete(stage2, "gamesPlayed")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	delete(stage2, "tokens")
	delete(stage2, "topFive")
	delete(stage2, "topTen")
	delete(stage2, "topTwentyFive")
	delete(stage2, "wins")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeBrPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeBrProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}

	stage1.Cash = m.Cash
	stage1.Contracts = m.Contracts
	stage1.Deaths = m.Deaths
	stage1.Downs = m.Downs
	stage1.GamesPlayed = m.GamesPlayed
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed
	stage1.Tokens = m.Tokens
	stage1.TopFive = m.TopFive
	stage1.TopTen = m.TopTen
	stage1.TopTwentyFive = m.TopTwentyFive
	stage1.Wins = m.Wins

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeBrPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeBrPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode br properties
func (m *GamerStatsResponseDataLifetimeModeBrProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeBrProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeBrProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeConf gamer stats response data lifetime mode conf
//
// swagger:model GamerStatsResponseDataLifetimeModeConf
type GamerStatsResponseDataLifetimeModeConf struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeConfProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode conf additional properties
	GamerStatsResponseDataLifetimeModeConfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeConf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeConfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeConf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeConfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeConf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeConfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeConfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeConfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode conf
func (m *GamerStatsResponseDataLifetimeModeConf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeConf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "conf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeConf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeConf) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeConf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeConfProperties gamer stats response data lifetime mode conf properties
//
// swagger:model GamerStatsResponseDataLifetimeModeConfProperties
type GamerStatsResponseDataLifetimeModeConfProperties struct {

	// confirms
	Confirms float64 `json:"confirms,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// denies
	Denies float64 `json:"denies,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode conf properties additional properties
	GamerStatsResponseDataLifetimeModeConfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeConfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeConfProperties

	rcv.Confirms = stage1.Confirms
	rcv.Deaths = stage1.Deaths
	rcv.Denies = stage1.Denies
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "confirms")
	delete(stage2, "deaths")
	delete(stage2, "denies")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeConfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeConfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Confirms = m.Confirms
	stage1.Deaths = m.Deaths
	stage1.Denies = m.Denies
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeConfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeConfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode conf properties
func (m *GamerStatsResponseDataLifetimeModeConfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeConfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeConfProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeConfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeCyber gamer stats response data lifetime mode cyber
//
// swagger:model GamerStatsResponseDataLifetimeModeCyber
type GamerStatsResponseDataLifetimeModeCyber struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeCyberProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode cyber additional properties
	GamerStatsResponseDataLifetimeModeCyberAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeCyber) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeCyberProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeCyber

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeCyberAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeCyber) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeCyberProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeCyberAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeCyberAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode cyber
func (m *GamerStatsResponseDataLifetimeModeCyber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeCyber) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "cyber" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeCyber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeCyber) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeCyber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeCyberProperties gamer stats response data lifetime mode cyber properties
//
// swagger:model GamerStatsResponseDataLifetimeModeCyberProperties
type GamerStatsResponseDataLifetimeModeCyberProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode cyber properties additional properties
	GamerStatsResponseDataLifetimeModeCyberPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeCyberProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeCyberProperties

	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeCyberPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeCyberProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeCyberPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeCyberPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode cyber properties
func (m *GamerStatsResponseDataLifetimeModeCyberProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeCyberProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeCyberProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeCyberProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeDom gamer stats response data lifetime mode dom
//
// swagger:model GamerStatsResponseDataLifetimeModeDom
type GamerStatsResponseDataLifetimeModeDom struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeDomProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode dom additional properties
	GamerStatsResponseDataLifetimeModeDomAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeDom) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeDomProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeDom

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeDomAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeDom) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeDomProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeDomAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeDomAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode dom
func (m *GamerStatsResponseDataLifetimeModeDom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeDom) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "dom" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeDom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeDom) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeDom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeDomProperties gamer stats response data lifetime mode dom properties
//
// swagger:model GamerStatsResponseDataLifetimeModeDomProperties
type GamerStatsResponseDataLifetimeModeDomProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode dom properties additional properties
	GamerStatsResponseDataLifetimeModeDomPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeDomProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeDomProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeDomPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeDomProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeDomPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeDomPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode dom properties
func (m *GamerStatsResponseDataLifetimeModeDomProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeDomProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeDomProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeDomProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeGrnd gamer stats response data lifetime mode grnd
//
// swagger:model GamerStatsResponseDataLifetimeModeGrnd
type GamerStatsResponseDataLifetimeModeGrnd struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeGrndProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode grnd additional properties
	GamerStatsResponseDataLifetimeModeGrndAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeGrnd) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeGrndProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeGrnd

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeGrndAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeGrnd) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeGrndProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeGrndAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeGrndAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode grnd
func (m *GamerStatsResponseDataLifetimeModeGrnd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeGrnd) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "grnd" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGrnd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGrnd) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeGrnd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeGrndProperties gamer stats response data lifetime mode grnd properties
//
// swagger:model GamerStatsResponseDataLifetimeModeGrndProperties
type GamerStatsResponseDataLifetimeModeGrndProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// obj time
	ObjTime float64 `json:"objTime,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode grnd properties additional properties
	GamerStatsResponseDataLifetimeModeGrndPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeGrndProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeGrndProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.ObjTime = stage1.ObjTime
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "objTime")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeGrndPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeGrndProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.ObjTime = m.ObjTime
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeGrndPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeGrndPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode grnd properties
func (m *GamerStatsResponseDataLifetimeModeGrndProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGrndProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGrndProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeGrndProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeGun gamer stats response data lifetime mode gun
//
// swagger:model GamerStatsResponseDataLifetimeModeGun
type GamerStatsResponseDataLifetimeModeGun struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeGunProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode gun additional properties
	GamerStatsResponseDataLifetimeModeGunAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeGun) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeGunProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeGun

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeGunAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeGun) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeGunProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeGunAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeGunAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode gun
func (m *GamerStatsResponseDataLifetimeModeGun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeGun) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "gun" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGun) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeGun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeGunProperties gamer stats response data lifetime mode gun properties
//
// swagger:model GamerStatsResponseDataLifetimeModeGunProperties
type GamerStatsResponseDataLifetimeModeGunProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// set backs
	SetBacks float64 `json:"setBacks,omitempty"`

	// stabs
	Stabs float64 `json:"stabs,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode gun properties additional properties
	GamerStatsResponseDataLifetimeModeGunPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeGunProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// set backs
		SetBacks float64 `json:"setBacks,omitempty"`

		// stabs
		Stabs float64 `json:"stabs,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeGunProperties

	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.SetBacks = stage1.SetBacks
	rcv.Stabs = stage1.Stabs
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "setBacks")
	delete(stage2, "stabs")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeGunPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeGunProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// set backs
		SetBacks float64 `json:"setBacks,omitempty"`

		// stabs
		Stabs float64 `json:"stabs,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.SetBacks = m.SetBacks
	stage1.Stabs = m.Stabs
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeGunPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeGunPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode gun properties
func (m *GamerStatsResponseDataLifetimeModeGunProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGunProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeGunProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeGunProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcConf gamer stats response data lifetime mode hc conf
//
// swagger:model GamerStatsResponseDataLifetimeModeHcConf
type GamerStatsResponseDataLifetimeModeHcConf struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHcConfProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hc conf additional properties
	GamerStatsResponseDataLifetimeModeHcConfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcConf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcConfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcConf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcConfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcConf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcConfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcConfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcConfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc conf
func (m *GamerStatsResponseDataLifetimeModeHcConf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHcConf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_conf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcConf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcConf) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcConf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcConfProperties gamer stats response data lifetime mode hc conf properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHcConfProperties
type GamerStatsResponseDataLifetimeModeHcConfProperties struct {

	// confirms
	Confirms float64 `json:"confirms,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// denies
	Denies float64 `json:"denies,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hc conf properties additional properties
	GamerStatsResponseDataLifetimeModeHcConfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcConfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcConfProperties

	rcv.Confirms = stage1.Confirms
	rcv.Deaths = stage1.Deaths
	rcv.Denies = stage1.Denies
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "confirms")
	delete(stage2, "deaths")
	delete(stage2, "denies")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcConfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcConfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Confirms = m.Confirms
	stage1.Deaths = m.Deaths
	stage1.Denies = m.Denies
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcConfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcConfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc conf properties
func (m *GamerStatsResponseDataLifetimeModeHcConfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcConfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcConfProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcConfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcCyber gamer stats response data lifetime mode hc cyber
//
// swagger:model GamerStatsResponseDataLifetimeModeHcCyber
type GamerStatsResponseDataLifetimeModeHcCyber struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHcCyberProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hc cyber additional properties
	GamerStatsResponseDataLifetimeModeHcCyberAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcCyber) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcCyberProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcCyber

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcCyberAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcCyber) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcCyberProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcCyberAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcCyberAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc cyber
func (m *GamerStatsResponseDataLifetimeModeHcCyber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHcCyber) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_cyber" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcCyber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcCyber) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcCyber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcCyberProperties gamer stats response data lifetime mode hc cyber properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHcCyberProperties
type GamerStatsResponseDataLifetimeModeHcCyberProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hc cyber properties additional properties
	GamerStatsResponseDataLifetimeModeHcCyberPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcCyberProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcCyberProperties

	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcCyberPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcCyberProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcCyberPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcCyberPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc cyber properties
func (m *GamerStatsResponseDataLifetimeModeHcCyberProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcCyberProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcCyberProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcCyberProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcDom gamer stats response data lifetime mode hc dom
//
// swagger:model GamerStatsResponseDataLifetimeModeHcDom
type GamerStatsResponseDataLifetimeModeHcDom struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHcDomProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hc dom additional properties
	GamerStatsResponseDataLifetimeModeHcDomAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcDom) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcDomProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcDom

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcDomAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcDom) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcDomProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcDomAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcDomAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc dom
func (m *GamerStatsResponseDataLifetimeModeHcDom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHcDom) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_dom" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcDom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcDom) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcDom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcDomProperties gamer stats response data lifetime mode hc dom properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHcDomProperties
type GamerStatsResponseDataLifetimeModeHcDomProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hc dom properties additional properties
	GamerStatsResponseDataLifetimeModeHcDomPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcDomProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcDomProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcDomPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcDomProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcDomPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcDomPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc dom properties
func (m *GamerStatsResponseDataLifetimeModeHcDomProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcDomProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcDomProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcDomProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcHq gamer stats response data lifetime mode hc hq
//
// swagger:model GamerStatsResponseDataLifetimeModeHcHq
type GamerStatsResponseDataLifetimeModeHcHq struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHcHqProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hc hq additional properties
	GamerStatsResponseDataLifetimeModeHcHqAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcHq) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcHqProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcHq

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcHqAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcHq) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcHqProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcHqAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcHqAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc hq
func (m *GamerStatsResponseDataLifetimeModeHcHq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHcHq) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_hq" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcHq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcHq) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcHq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcHqProperties gamer stats response data lifetime mode hc hq properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHcHqProperties
type GamerStatsResponseDataLifetimeModeHcHqProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hc hq properties additional properties
	GamerStatsResponseDataLifetimeModeHcHqPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcHqProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcHqProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcHqPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcHqProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcHqPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcHqPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc hq properties
func (m *GamerStatsResponseDataLifetimeModeHcHqProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcHqProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcHqProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcHqProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcSd gamer stats response data lifetime mode hc sd
//
// swagger:model GamerStatsResponseDataLifetimeModeHcSd
type GamerStatsResponseDataLifetimeModeHcSd struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHcSdProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hc sd additional properties
	GamerStatsResponseDataLifetimeModeHcSdAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcSd) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcSdProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcSd

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcSdAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcSd) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcSdProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcSdAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcSdAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc sd
func (m *GamerStatsResponseDataLifetimeModeHcSd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHcSd) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_sd" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcSd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcSd) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcSd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcSdProperties gamer stats response data lifetime mode hc sd properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHcSdProperties
type GamerStatsResponseDataLifetimeModeHcSdProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defuses
	Defuses float64 `json:"defuses,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hc sd properties additional properties
	GamerStatsResponseDataLifetimeModeHcSdPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcSdProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcSdProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defuses = stage1.Defuses
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defuses")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcSdPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcSdProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defuses = m.Defuses
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcSdPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcSdPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc sd properties
func (m *GamerStatsResponseDataLifetimeModeHcSdProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcSdProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcSdProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcSdProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcWar gamer stats response data lifetime mode hc war
//
// swagger:model GamerStatsResponseDataLifetimeModeHcWar
type GamerStatsResponseDataLifetimeModeHcWar struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHcWarProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hc war additional properties
	GamerStatsResponseDataLifetimeModeHcWarAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcWar) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcWarProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcWar

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcWarAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcWar) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHcWarProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcWarAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcWarAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc war
func (m *GamerStatsResponseDataLifetimeModeHcWar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHcWar) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hc_war" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcWar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcWar) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcWar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHcWarProperties gamer stats response data lifetime mode hc war properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHcWarProperties
type GamerStatsResponseDataLifetimeModeHcWarProperties struct {

	// assists
	Assists float64 `json:"assists,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hc war properties additional properties
	GamerStatsResponseDataLifetimeModeHcWarPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHcWarProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHcWarProperties

	rcv.Assists = stage1.Assists
	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "assists")
	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHcWarPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHcWarProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Assists = m.Assists
	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHcWarPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHcWarPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hc war properties
func (m *GamerStatsResponseDataLifetimeModeHcWarProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcWarProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHcWarProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHcWarProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHq gamer stats response data lifetime mode hq
//
// swagger:model GamerStatsResponseDataLifetimeModeHq
type GamerStatsResponseDataLifetimeModeHq struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeHqProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode hq additional properties
	GamerStatsResponseDataLifetimeModeHqAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHq) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHqProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHq

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHqAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHq) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeHqProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHqAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHqAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hq
func (m *GamerStatsResponseDataLifetimeModeHq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeHq) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "hq" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHq) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeHqProperties gamer stats response data lifetime mode hq properties
//
// swagger:model GamerStatsResponseDataLifetimeModeHqProperties
type GamerStatsResponseDataLifetimeModeHqProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode hq properties additional properties
	GamerStatsResponseDataLifetimeModeHqPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeHqProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeHqProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeHqPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeHqProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeHqPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeHqPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode hq properties
func (m *GamerStatsResponseDataLifetimeModeHqProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHqProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeHqProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeHqProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeInfect gamer stats response data lifetime mode infect
//
// swagger:model GamerStatsResponseDataLifetimeModeInfect
type GamerStatsResponseDataLifetimeModeInfect struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeInfectProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode infect additional properties
	GamerStatsResponseDataLifetimeModeInfectAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeInfect) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeInfectProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeInfect

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeInfectAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeInfect) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeInfectProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeInfectAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeInfectAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode infect
func (m *GamerStatsResponseDataLifetimeModeInfect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeInfect) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "infect" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeInfect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeInfect) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeInfect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeInfectProperties gamer stats response data lifetime mode infect properties
//
// swagger:model GamerStatsResponseDataLifetimeModeInfectProperties
type GamerStatsResponseDataLifetimeModeInfectProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// infected
	Infected float64 `json:"infected,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time
	Time float64 `json:"time,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode infect properties additional properties
	GamerStatsResponseDataLifetimeModeInfectPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeInfectProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// infected
		Infected float64 `json:"infected,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time
		Time float64 `json:"time,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeInfectProperties

	rcv.Deaths = stage1.Deaths
	rcv.Infected = stage1.Infected
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.Time = stage1.Time
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "infected")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "time")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeInfectPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeInfectProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// infected
		Infected float64 `json:"infected,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time
		Time float64 `json:"time,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Infected = m.Infected
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.Time = m.Time
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeInfectPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeInfectPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode infect properties
func (m *GamerStatsResponseDataLifetimeModeInfectProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeInfectProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeInfectProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeInfectProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeKoth gamer stats response data lifetime mode koth
//
// swagger:model GamerStatsResponseDataLifetimeModeKoth
type GamerStatsResponseDataLifetimeModeKoth struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeKothProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode koth additional properties
	GamerStatsResponseDataLifetimeModeKothAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeKoth) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeKothProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeKoth

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeKothAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeKoth) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeKothProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeKothAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeKothAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode koth
func (m *GamerStatsResponseDataLifetimeModeKoth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeKoth) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "koth" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeKoth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeKoth) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeKoth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeKothProperties gamer stats response data lifetime mode koth properties
//
// swagger:model GamerStatsResponseDataLifetimeModeKothProperties
type GamerStatsResponseDataLifetimeModeKothProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// obj time
	ObjTime float64 `json:"objTime,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode koth properties additional properties
	GamerStatsResponseDataLifetimeModeKothPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeKothProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeKothProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.ObjTime = stage1.ObjTime
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "objTime")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeKothPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeKothProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.ObjTime = m.ObjTime
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeKothPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeKothPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode koth properties
func (m *GamerStatsResponseDataLifetimeModeKothProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeKothProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeKothProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeKothProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeSd gamer stats response data lifetime mode sd
//
// swagger:model GamerStatsResponseDataLifetimeModeSd
type GamerStatsResponseDataLifetimeModeSd struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeSdProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode sd additional properties
	GamerStatsResponseDataLifetimeModeSdAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeSd) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeSdProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeSd

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeSdAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeSd) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeSdProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeSdAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeSdAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode sd
func (m *GamerStatsResponseDataLifetimeModeSd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeSd) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "sd" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeSd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeSd) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeSd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeSdProperties gamer stats response data lifetime mode sd properties
//
// swagger:model GamerStatsResponseDataLifetimeModeSdProperties
type GamerStatsResponseDataLifetimeModeSdProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defuses
	Defuses float64 `json:"defuses,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode sd properties additional properties
	GamerStatsResponseDataLifetimeModeSdPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeSdProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeSdProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defuses = stage1.Defuses
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defuses")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeSdPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeSdProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defuses = m.Defuses
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeSdPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeSdPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode sd properties
func (m *GamerStatsResponseDataLifetimeModeSdProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeSdProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeSdProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeSdProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeWar gamer stats response data lifetime mode war
//
// swagger:model GamerStatsResponseDataLifetimeModeWar
type GamerStatsResponseDataLifetimeModeWar struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeModeWarProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime mode war additional properties
	GamerStatsResponseDataLifetimeModeWarAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeWar) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeWarProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeWar

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeWarAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeWar) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeModeWarProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeWarAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeWarAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode war
func (m *GamerStatsResponseDataLifetimeModeWar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeModeWar) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "mode" + "." + "war" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeWar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeWar) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeWar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeModeWarProperties gamer stats response data lifetime mode war properties
//
// swagger:model GamerStatsResponseDataLifetimeModeWarProperties
type GamerStatsResponseDataLifetimeModeWarProperties struct {

	// assists
	Assists float64 `json:"assists,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// gamer stats response data lifetime mode war properties additional properties
	GamerStatsResponseDataLifetimeModeWarPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeModeWarProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeModeWarProperties

	rcv.Assists = stage1.Assists
	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "assists")
	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeModeWarPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeModeWarProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Assists = m.Assists
	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeModeWarPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeModeWarPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime mode war properties
func (m *GamerStatsResponseDataLifetimeModeWarProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeWarProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeModeWarProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeModeWarProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakData gamer stats response data lifetime scorestreak data
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakData
type GamerStatsResponseDataLifetimeScorestreakData struct {

	// lethal scorestreak data
	LethalScorestreakData *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData `json:"lethalScorestreakData,omitempty"`

	// support scorestreak data
	SupportScorestreakData *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData `json:"supportScorestreakData,omitempty"`

	// gamer stats response data lifetime scorestreak data additional properties
	GamerStatsResponseDataLifetimeScorestreakDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// lethal scorestreak data
		LethalScorestreakData *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData `json:"lethalScorestreakData,omitempty"`

		// support scorestreak data
		SupportScorestreakData *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData `json:"supportScorestreakData,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakData

	rcv.LethalScorestreakData = stage1.LethalScorestreakData
	rcv.SupportScorestreakData = stage1.SupportScorestreakData
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "lethalScorestreakData")
	delete(stage2, "supportScorestreakData")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// lethal scorestreak data
		LethalScorestreakData *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData `json:"lethalScorestreakData,omitempty"`

		// support scorestreak data
		SupportScorestreakData *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData `json:"supportScorestreakData,omitempty"`
	}

	stage1.LethalScorestreakData = m.LethalScorestreakData
	stage1.SupportScorestreakData = m.SupportScorestreakData

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data
func (m *GamerStatsResponseDataLifetimeScorestreakData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLethalScorestreakData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportScorestreakData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakData) validateLethalScorestreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.LethalScorestreakData) { // not required
		return nil
	}

	if m.LethalScorestreakData != nil {
		if err := m.LethalScorestreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakData) validateSupportScorestreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportScorestreakData) { // not required
		return nil
	}

	if m.SupportScorestreakData != nil {
		if err := m.SupportScorestreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData gamer stats response data lifetime scorestreak data lethal scorestreak data
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData struct {

	// bradley
	Bradley *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley `json:"bradley,omitempty"`

	// chopper gunner
	ChopperGunner *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner `json:"chopper_gunner,omitempty"`

	// chopper support
	ChopperSupport *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport `json:"chopper_support,omitempty"`

	// cruise predator
	CruisePredator *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator `json:"cruise_predator,omitempty"`

	// gunship
	Gunship *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship `json:"gunship,omitempty"`

	// hover jet
	HoverJet *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet `json:"hover_jet,omitempty"`

	// juggernaut
	Juggernaut *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut `json:"juggernaut,omitempty"`

	// manual turret
	ManualTurret *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret `json:"manual_turret,omitempty"`

	// nuke
	Nuke *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke `json:"nuke,omitempty"`

	// pac sentry
	PacSentry *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry `json:"pac_sentry,omitempty"`

	// precision airstrike
	PrecisionAirstrike *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike `json:"precision_airstrike,omitempty"`

	// sentry gun
	SentryGun *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun `json:"sentry_gun,omitempty"`

	// toma strike
	TomaStrike *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike `json:"toma_strike,omitempty"`

	// white phosphorus
	WhitePhosphorus *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus `json:"white_phosphorus,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// bradley
		Bradley *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley `json:"bradley,omitempty"`

		// chopper gunner
		ChopperGunner *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner `json:"chopper_gunner,omitempty"`

		// chopper support
		ChopperSupport *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport `json:"chopper_support,omitempty"`

		// cruise predator
		CruisePredator *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator `json:"cruise_predator,omitempty"`

		// gunship
		Gunship *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship `json:"gunship,omitempty"`

		// hover jet
		HoverJet *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet `json:"hover_jet,omitempty"`

		// juggernaut
		Juggernaut *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut `json:"juggernaut,omitempty"`

		// manual turret
		ManualTurret *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret `json:"manual_turret,omitempty"`

		// nuke
		Nuke *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke `json:"nuke,omitempty"`

		// pac sentry
		PacSentry *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry `json:"pac_sentry,omitempty"`

		// precision airstrike
		PrecisionAirstrike *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike `json:"precision_airstrike,omitempty"`

		// sentry gun
		SentryGun *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun `json:"sentry_gun,omitempty"`

		// toma strike
		TomaStrike *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike `json:"toma_strike,omitempty"`

		// white phosphorus
		WhitePhosphorus *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus `json:"white_phosphorus,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData

	rcv.Bradley = stage1.Bradley
	rcv.ChopperGunner = stage1.ChopperGunner
	rcv.ChopperSupport = stage1.ChopperSupport
	rcv.CruisePredator = stage1.CruisePredator
	rcv.Gunship = stage1.Gunship
	rcv.HoverJet = stage1.HoverJet
	rcv.Juggernaut = stage1.Juggernaut
	rcv.ManualTurret = stage1.ManualTurret
	rcv.Nuke = stage1.Nuke
	rcv.PacSentry = stage1.PacSentry
	rcv.PrecisionAirstrike = stage1.PrecisionAirstrike
	rcv.SentryGun = stage1.SentryGun
	rcv.TomaStrike = stage1.TomaStrike
	rcv.WhitePhosphorus = stage1.WhitePhosphorus
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "bradley")
	delete(stage2, "chopper_gunner")
	delete(stage2, "chopper_support")
	delete(stage2, "cruise_predator")
	delete(stage2, "gunship")
	delete(stage2, "hover_jet")
	delete(stage2, "juggernaut")
	delete(stage2, "manual_turret")
	delete(stage2, "nuke")
	delete(stage2, "pac_sentry")
	delete(stage2, "precision_airstrike")
	delete(stage2, "sentry_gun")
	delete(stage2, "toma_strike")
	delete(stage2, "white_phosphorus")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// bradley
		Bradley *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley `json:"bradley,omitempty"`

		// chopper gunner
		ChopperGunner *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner `json:"chopper_gunner,omitempty"`

		// chopper support
		ChopperSupport *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport `json:"chopper_support,omitempty"`

		// cruise predator
		CruisePredator *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator `json:"cruise_predator,omitempty"`

		// gunship
		Gunship *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship `json:"gunship,omitempty"`

		// hover jet
		HoverJet *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet `json:"hover_jet,omitempty"`

		// juggernaut
		Juggernaut *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut `json:"juggernaut,omitempty"`

		// manual turret
		ManualTurret *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret `json:"manual_turret,omitempty"`

		// nuke
		Nuke *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke `json:"nuke,omitempty"`

		// pac sentry
		PacSentry *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry `json:"pac_sentry,omitempty"`

		// precision airstrike
		PrecisionAirstrike *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike `json:"precision_airstrike,omitempty"`

		// sentry gun
		SentryGun *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun `json:"sentry_gun,omitempty"`

		// toma strike
		TomaStrike *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike `json:"toma_strike,omitempty"`

		// white phosphorus
		WhitePhosphorus *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus `json:"white_phosphorus,omitempty"`
	}

	stage1.Bradley = m.Bradley
	stage1.ChopperGunner = m.ChopperGunner
	stage1.ChopperSupport = m.ChopperSupport
	stage1.CruisePredator = m.CruisePredator
	stage1.Gunship = m.Gunship
	stage1.HoverJet = m.HoverJet
	stage1.Juggernaut = m.Juggernaut
	stage1.ManualTurret = m.ManualTurret
	stage1.Nuke = m.Nuke
	stage1.PacSentry = m.PacSentry
	stage1.PrecisionAirstrike = m.PrecisionAirstrike
	stage1.SentryGun = m.SentryGun
	stage1.TomaStrike = m.TomaStrike
	stage1.WhitePhosphorus = m.WhitePhosphorus

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBradley(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChopperGunner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChopperSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCruisePredator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGunship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoverJet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJuggernaut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualTurret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNuke(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacSentry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecisionAirstrike(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentryGun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTomaStrike(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitePhosphorus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateBradley(formats strfmt.Registry) error {

	if swag.IsZero(m.Bradley) { // not required
		return nil
	}

	if m.Bradley != nil {
		if err := m.Bradley.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "bradley")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateChopperGunner(formats strfmt.Registry) error {

	if swag.IsZero(m.ChopperGunner) { // not required
		return nil
	}

	if m.ChopperGunner != nil {
		if err := m.ChopperGunner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_gunner")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateChopperSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.ChopperSupport) { // not required
		return nil
	}

	if m.ChopperSupport != nil {
		if err := m.ChopperSupport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_support")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateCruisePredator(formats strfmt.Registry) error {

	if swag.IsZero(m.CruisePredator) { // not required
		return nil
	}

	if m.CruisePredator != nil {
		if err := m.CruisePredator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "cruise_predator")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateGunship(formats strfmt.Registry) error {

	if swag.IsZero(m.Gunship) { // not required
		return nil
	}

	if m.Gunship != nil {
		if err := m.Gunship.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "gunship")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateHoverJet(formats strfmt.Registry) error {

	if swag.IsZero(m.HoverJet) { // not required
		return nil
	}

	if m.HoverJet != nil {
		if err := m.HoverJet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "hover_jet")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateJuggernaut(formats strfmt.Registry) error {

	if swag.IsZero(m.Juggernaut) { // not required
		return nil
	}

	if m.Juggernaut != nil {
		if err := m.Juggernaut.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "juggernaut")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateManualTurret(formats strfmt.Registry) error {

	if swag.IsZero(m.ManualTurret) { // not required
		return nil
	}

	if m.ManualTurret != nil {
		if err := m.ManualTurret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "manual_turret")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateNuke(formats strfmt.Registry) error {

	if swag.IsZero(m.Nuke) { // not required
		return nil
	}

	if m.Nuke != nil {
		if err := m.Nuke.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "nuke")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validatePacSentry(formats strfmt.Registry) error {

	if swag.IsZero(m.PacSentry) { // not required
		return nil
	}

	if m.PacSentry != nil {
		if err := m.PacSentry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "pac_sentry")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validatePrecisionAirstrike(formats strfmt.Registry) error {

	if swag.IsZero(m.PrecisionAirstrike) { // not required
		return nil
	}

	if m.PrecisionAirstrike != nil {
		if err := m.PrecisionAirstrike.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "precision_airstrike")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateSentryGun(formats strfmt.Registry) error {

	if swag.IsZero(m.SentryGun) { // not required
		return nil
	}

	if m.SentryGun != nil {
		if err := m.SentryGun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "sentry_gun")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateTomaStrike(formats strfmt.Registry) error {

	if swag.IsZero(m.TomaStrike) { // not required
		return nil
	}

	if m.TomaStrike != nil {
		if err := m.TomaStrike.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "toma_strike")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) validateWhitePhosphorus(formats strfmt.Registry) error {

	if swag.IsZero(m.WhitePhosphorus) { // not required
		return nil
	}

	if m.WhitePhosphorus != nil {
		if err := m.WhitePhosphorus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "white_phosphorus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley gamer stats response data lifetime scorestreak data lethal scorestreak data bradley
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data bradley additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data bradley
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "bradley" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradley
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties gamer stats response data lifetime scorestreak data lethal scorestreak data bradley properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data bradley properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data bradley properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataBradleyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner gamer stats response data lifetime scorestreak data lethal scorestreak data chopper gunner
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data chopper gunner additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data chopper gunner
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_gunner" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties gamer stats response data lifetime scorestreak data lethal scorestreak data chopper gunner properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data chopper gunner properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data chopper gunner properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport gamer stats response data lifetime scorestreak data lethal scorestreak data chopper support
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data chopper support additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data chopper support
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_support" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties gamer stats response data lifetime scorestreak data lethal scorestreak data chopper support properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data chopper support properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data chopper support properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator gamer stats response data lifetime scorestreak data lethal scorestreak data cruise predator
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data cruise predator additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data cruise predator
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "cruise_predator" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties gamer stats response data lifetime scorestreak data lethal scorestreak data cruise predator properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data cruise predator properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data cruise predator properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship gamer stats response data lifetime scorestreak data lethal scorestreak data gunship
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data gunship additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data gunship
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "gunship" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties gamer stats response data lifetime scorestreak data lethal scorestreak data gunship properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data gunship properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data gunship properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataGunshipProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet gamer stats response data lifetime scorestreak data lethal scorestreak data hover jet
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data hover jet additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data hover jet
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "hover_jet" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties gamer stats response data lifetime scorestreak data lethal scorestreak data hover jet properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data hover jet properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data hover jet properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataHoverJetProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut gamer stats response data lifetime scorestreak data lethal scorestreak data juggernaut
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data juggernaut additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data juggernaut
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "juggernaut" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernaut
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties gamer stats response data lifetime scorestreak data lethal scorestreak data juggernaut properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data juggernaut properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data juggernaut properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataJuggernautProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret gamer stats response data lifetime scorestreak data lethal scorestreak data manual turret
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data manual turret additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data manual turret
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "manual_turret" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties gamer stats response data lifetime scorestreak data lethal scorestreak data manual turret properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data manual turret properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data manual turret properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataManualTurretProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke gamer stats response data lifetime scorestreak data lethal scorestreak data nuke
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data nuke additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data nuke
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "nuke" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNuke
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties gamer stats response data lifetime scorestreak data lethal scorestreak data nuke properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data nuke properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data nuke properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataNukeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry gamer stats response data lifetime scorestreak data lethal scorestreak data pac sentry
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data pac sentry additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data pac sentry
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "pac_sentry" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties gamer stats response data lifetime scorestreak data lethal scorestreak data pac sentry properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data pac sentry properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data pac sentry properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPacSentryProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike gamer stats response data lifetime scorestreak data lethal scorestreak data precision airstrike
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data precision airstrike additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data precision airstrike
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "precision_airstrike" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties gamer stats response data lifetime scorestreak data lethal scorestreak data precision airstrike properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data precision airstrike properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data precision airstrike properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun gamer stats response data lifetime scorestreak data lethal scorestreak data sentry gun
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data sentry gun additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data sentry gun
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "sentry_gun" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties gamer stats response data lifetime scorestreak data lethal scorestreak data sentry gun properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data sentry gun properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data sentry gun properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataSentryGunProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike gamer stats response data lifetime scorestreak data lethal scorestreak data toma strike
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data toma strike additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data toma strike
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "toma_strike" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrike
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties gamer stats response data lifetime scorestreak data lethal scorestreak data toma strike properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data toma strike properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data toma strike properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus gamer stats response data lifetime scorestreak data lethal scorestreak data white phosphorus
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data white phosphorus additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data white phosphorus
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "white_phosphorus" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties gamer stats response data lifetime scorestreak data lethal scorestreak data white phosphorus properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties
type GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data lethal scorestreak data white phosphorus properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data lethal scorestreak data white phosphorus properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData gamer stats response data lifetime scorestreak data support scorestreak data
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData struct {

	// airdrop
	Airdrop *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop `json:"airdrop,omitempty"`

	// airdrop multiple
	AirdropMultiple *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple `json:"airdrop_multiple,omitempty"`

	// directional uav
	DirectionalUav *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav `json:"directional_uav,omitempty"`

	// radar drone overwatch
	RadarDroneOverwatch *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch `json:"radar_drone_overwatch,omitempty"`

	// scrambler drone guard
	ScramblerDroneGuard *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard `json:"scrambler_drone_guard,omitempty"`

	// uav
	Uav *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav `json:"uav,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// airdrop
		Airdrop *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop `json:"airdrop,omitempty"`

		// airdrop multiple
		AirdropMultiple *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple `json:"airdrop_multiple,omitempty"`

		// directional uav
		DirectionalUav *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav `json:"directional_uav,omitempty"`

		// radar drone overwatch
		RadarDroneOverwatch *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch `json:"radar_drone_overwatch,omitempty"`

		// scrambler drone guard
		ScramblerDroneGuard *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard `json:"scrambler_drone_guard,omitempty"`

		// uav
		Uav *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav `json:"uav,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData

	rcv.Airdrop = stage1.Airdrop
	rcv.AirdropMultiple = stage1.AirdropMultiple
	rcv.DirectionalUav = stage1.DirectionalUav
	rcv.RadarDroneOverwatch = stage1.RadarDroneOverwatch
	rcv.ScramblerDroneGuard = stage1.ScramblerDroneGuard
	rcv.Uav = stage1.Uav
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "airdrop")
	delete(stage2, "airdrop_multiple")
	delete(stage2, "directional_uav")
	delete(stage2, "radar_drone_overwatch")
	delete(stage2, "scrambler_drone_guard")
	delete(stage2, "uav")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// airdrop
		Airdrop *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop `json:"airdrop,omitempty"`

		// airdrop multiple
		AirdropMultiple *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple `json:"airdrop_multiple,omitempty"`

		// directional uav
		DirectionalUav *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav `json:"directional_uav,omitempty"`

		// radar drone overwatch
		RadarDroneOverwatch *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch `json:"radar_drone_overwatch,omitempty"`

		// scrambler drone guard
		ScramblerDroneGuard *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard `json:"scrambler_drone_guard,omitempty"`

		// uav
		Uav *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav `json:"uav,omitempty"`
	}

	stage1.Airdrop = m.Airdrop
	stage1.AirdropMultiple = m.AirdropMultiple
	stage1.DirectionalUav = m.DirectionalUav
	stage1.RadarDroneOverwatch = m.RadarDroneOverwatch
	stage1.ScramblerDroneGuard = m.ScramblerDroneGuard
	stage1.Uav = m.Uav

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirdrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirdropMultiple(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectionalUav(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadarDroneOverwatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScramblerDroneGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUav(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) validateAirdrop(formats strfmt.Registry) error {

	if swag.IsZero(m.Airdrop) { // not required
		return nil
	}

	if m.Airdrop != nil {
		if err := m.Airdrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) validateAirdropMultiple(formats strfmt.Registry) error {

	if swag.IsZero(m.AirdropMultiple) { // not required
		return nil
	}

	if m.AirdropMultiple != nil {
		if err := m.AirdropMultiple.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop_multiple")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) validateDirectionalUav(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectionalUav) { // not required
		return nil
	}

	if m.DirectionalUav != nil {
		if err := m.DirectionalUav.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "directional_uav")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) validateRadarDroneOverwatch(formats strfmt.Registry) error {

	if swag.IsZero(m.RadarDroneOverwatch) { // not required
		return nil
	}

	if m.RadarDroneOverwatch != nil {
		if err := m.RadarDroneOverwatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "radar_drone_overwatch")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) validateScramblerDroneGuard(formats strfmt.Registry) error {

	if swag.IsZero(m.ScramblerDroneGuard) { // not required
		return nil
	}

	if m.ScramblerDroneGuard != nil {
		if err := m.ScramblerDroneGuard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "scrambler_drone_guard")
			}
			return err
		}
	}

	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) validateUav(formats strfmt.Registry) error {

	if swag.IsZero(m.Uav) { // not required
		return nil
	}

	if m.Uav != nil {
		if err := m.Uav.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "uav")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop gamer stats response data lifetime scorestreak data support scorestreak data airdrop
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data airdrop additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data airdrop
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple gamer stats response data lifetime scorestreak data support scorestreak data airdrop multiple
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data airdrop multiple additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data airdrop multiple
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop_multiple" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiple
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties gamer stats response data lifetime scorestreak data support scorestreak data airdrop multiple properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data airdrop multiple properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data airdrop multiple properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties gamer stats response data lifetime scorestreak data support scorestreak data airdrop properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data airdrop properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data airdrop properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataAirdropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav gamer stats response data lifetime scorestreak data support scorestreak data directional uav
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data directional uav additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data directional uav
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "directional_uav" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUav
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties gamer stats response data lifetime scorestreak data support scorestreak data directional uav properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data directional uav properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data directional uav properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch gamer stats response data lifetime scorestreak data support scorestreak data radar drone overwatch
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data radar drone overwatch additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data radar drone overwatch
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "radar_drone_overwatch" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties gamer stats response data lifetime scorestreak data support scorestreak data radar drone overwatch properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data radar drone overwatch properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data radar drone overwatch properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard gamer stats response data lifetime scorestreak data support scorestreak data scrambler drone guard
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data scrambler drone guard additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data scrambler drone guard
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "scrambler_drone_guard" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties gamer stats response data lifetime scorestreak data support scorestreak data scrambler drone guard properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data scrambler drone guard properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data scrambler drone guard properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav gamer stats response data lifetime scorestreak data support scorestreak data uav
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav struct {

	// properties
	Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties `json:"properties,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data uav additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data uav
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "uav" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUav
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties gamer stats response data lifetime scorestreak data support scorestreak data uav properties
//
// swagger:model GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties
type GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// gamer stats response data lifetime scorestreak data support scorestreak data uav properties additional properties
	GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data lifetime scorestreak data support scorestreak data uav properties
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataLifetimeScorestreakDataSupportScorestreakDataUavProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataWeekly gamer stats response data weekly
//
// swagger:model GamerStatsResponseDataWeekly
type GamerStatsResponseDataWeekly struct {

	// all
	All *GamerStatsResponseDataWeeklyAll `json:"all,omitempty"`

	// map
	Map interface{} `json:"map,omitempty"`

	// mode
	Mode interface{} `json:"mode,omitempty"`

	// gamer stats response data weekly additional properties
	GamerStatsResponseDataWeeklyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataWeekly) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// all
		All *GamerStatsResponseDataWeeklyAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataWeekly

	rcv.All = stage1.All
	rcv.Map = stage1.Map
	rcv.Mode = stage1.Mode
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "all")
	delete(stage2, "map")
	delete(stage2, "mode")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataWeeklyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataWeekly) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// all
		All *GamerStatsResponseDataWeeklyAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}

	stage1.All = m.All
	stage1.Map = m.Map
	stage1.Mode = m.Mode

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataWeeklyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataWeeklyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data weekly
func (m *GamerStatsResponseDataWeekly) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerStatsResponseDataWeekly) validateAll(formats strfmt.Registry) error {

	if swag.IsZero(m.All) { // not required
		return nil
	}

	if m.All != nil {
		if err := m.All.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "weekly" + "." + "all")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataWeekly) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataWeekly) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataWeekly
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerStatsResponseDataWeeklyAll gamer stats response data weekly all
//
// swagger:model GamerStatsResponseDataWeeklyAll
type GamerStatsResponseDataWeeklyAll struct {

	// properties
	Properties interface{} `json:"properties,omitempty"`

	// gamer stats response data weekly all additional properties
	GamerStatsResponseDataWeeklyAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerStatsResponseDataWeeklyAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerStatsResponseDataWeeklyAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerStatsResponseDataWeeklyAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerStatsResponseDataWeeklyAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerStatsResponseDataWeeklyAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerStatsResponseDataWeeklyAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer stats response data weekly all
func (m *GamerStatsResponseDataWeeklyAll) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerStatsResponseDataWeeklyAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerStatsResponseDataWeeklyAll) UnmarshalBinary(b []byte) error {
	var res GamerStatsResponseDataWeeklyAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
