// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GamerMatchListResponse gamer match list response
//
// swagger:model gamerMatchListResponse
type GamerMatchListResponse struct {

	// data
	Data []*GamerMatchListResponseDataItems0 `json:"data"`

	// status
	Status string `json:"status,omitempty"`

	// gamer match list response additional properties
	GamerMatchListResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerMatchListResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data []*GamerMatchListResponseDataItems0 `json:"data"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerMatchListResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerMatchListResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerMatchListResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data []*GamerMatchListResponseDataItems0 `json:"data"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerMatchListResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerMatchListResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer match list response
func (m *GamerMatchListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerMatchListResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerMatchListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerMatchListResponse) UnmarshalBinary(b []byte) error {
	var res GamerMatchListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerMatchListResponseDataItems0 gamer match list response data items0
//
// swagger:model GamerMatchListResponseDataItems0
type GamerMatchListResponseDataItems0 struct {

	// map
	Map string `json:"map,omitempty"`

	// match Id
	MatchID string `json:"matchId,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// gamer match list response data items0 additional properties
	GamerMatchListResponseDataItems0AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerMatchListResponseDataItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// map
		Map string `json:"map,omitempty"`

		// match Id
		MatchID string `json:"matchId,omitempty"`

		// platform
		Platform string `json:"platform,omitempty"`

		// timestamp
		Timestamp int64 `json:"timestamp,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerMatchListResponseDataItems0

	rcv.Map = stage1.Map
	rcv.MatchID = stage1.MatchID
	rcv.Platform = stage1.Platform
	rcv.Timestamp = stage1.Timestamp
	rcv.Title = stage1.Title
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "map")
	delete(stage2, "matchId")
	delete(stage2, "platform")
	delete(stage2, "timestamp")
	delete(stage2, "title")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerMatchListResponseDataItems0AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerMatchListResponseDataItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// map
		Map string `json:"map,omitempty"`

		// match Id
		MatchID string `json:"matchId,omitempty"`

		// platform
		Platform string `json:"platform,omitempty"`

		// timestamp
		Timestamp int64 `json:"timestamp,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.Map = m.Map
	stage1.MatchID = m.MatchID
	stage1.Platform = m.Platform
	stage1.Timestamp = m.Timestamp
	stage1.Title = m.Title
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerMatchListResponseDataItems0AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerMatchListResponseDataItems0AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer match list response data items0
func (m *GamerMatchListResponseDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerMatchListResponseDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerMatchListResponseDataItems0) UnmarshalBinary(b []byte) error {
	var res GamerMatchListResponseDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
