// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MapListResponse map list response
//
// swagger:model mapListResponse
type MapListResponse struct {

	// data
	Data *MapListResponseData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// map list response additional properties
	MapListResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *MapListResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data *MapListResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv MapListResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.MapListResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m MapListResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data *MapListResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.MapListResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.MapListResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this map list response
func (m *MapListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapListResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapListResponse) UnmarshalBinary(b []byte) error {
	var res MapListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MapListResponseData map list response data
//
// swagger:model MapListResponseData
type MapListResponseData struct {

	// message
	Message string `json:"message,omitempty"`

	// mp aniyah
	MpAniyah []string `json:"mp_aniyah"`

	// mp aniyah tac
	MpAniyahTac []string `json:"mp_aniyah_tac"`

	// mp backlot2
	MpBacklot2 []string `json:"mp_backlot2"`

	// mp boneyard gw
	MpBoneyardGw []string `json:"mp_boneyard_gw"`

	// mp broadcast2
	MpBroadcast2 []string `json:"mp_broadcast2"`

	// mp cave
	MpCave []string `json:"mp_cave"`

	// mp cave am
	MpCaveAm []string `json:"mp_cave_am"`

	// mp crash2
	MpCrash2 []string `json:"mp_crash2"`

	// mp deadzone
	MpDeadzone []string `json:"mp_deadzone"`

	// mp downtown gw
	MpDowntownGw []string `json:"mp_downtown_gw"`

	// mp emporium
	MpEmporium []string `json:"mp_emporium"`

	// mp euphrates
	MpEuphrates []string `json:"mp_euphrates"`

	// mp farms2 gw
	MpFarms2Gw []string `json:"mp_farms2_gw"`

	// mp garden
	MpGarden []string `json:"mp_garden"`

	// mp hackney am
	MpHackneyAm []string `json:"mp_hackney_am"`

	// mp hackney yard
	MpHackneyYard []string `json:"mp_hackney_yard"`

	// mp harbor
	MpHarbor []string `json:"mp_harbor"`

	// mp hardhat
	MpHardhat []string `json:"mp_hardhat"`

	// mp hideout
	MpHideout []string `json:"mp_hideout"`

	// mp layover gw
	MpLayoverGw []string `json:"mp_layover_gw"`

	// mp m cage
	MpmCage []string `json:"mp_m_cage"`

	// mp m cargo
	MpmCargo []string `json:"mp_m_cargo"`

	// mp m cornfield
	MpmCornfield []string `json:"mp_m_cornfield"`

	// mp m fork
	MpmFork []string `json:"mp_m_fork"`

	// mp m hill
	MpmHill []string `json:"mp_m_hill"`

	// mp m king
	MpmKing []string `json:"mp_m_king"`

	// mp m overunder
	MpmOverunder []string `json:"mp_m_overunder"`

	// mp m overwinter
	MpmOverwinter []string `json:"mp_m_overwinter"`

	// mp m pine
	MpmPine []string `json:"mp_m_pine"`

	// mp m showers
	MpmShowers []string `json:"mp_m_showers"`

	// mp m speed
	MpmSpeed []string `json:"mp_m_speed"`

	// mp m speedball
	MpmSpeedball []string `json:"mp_m_speedball"`

	// mp m stack
	MpmStack []string `json:"mp_m_stack"`

	// mp m stadium
	MpmStadium []string `json:"mp_m_stadium"`

	// mp m train
	MpmTrain []string `json:"mp_m_train"`

	// mp m trench
	MpmTrench []string `json:"mp_m_trench"`

	// mp m wallco2
	MpmWallco2 []string `json:"mp_m_wallco2"`

	// mp malyshev
	MpMalyshev []string `json:"mp_malyshev"`

	// mp oilrig
	MpOilrig []string `json:"mp_oilrig"`

	// mp petrograd
	MpPetrograd []string `json:"mp_petrograd"`

	// mp piccadilly
	MpPiccadilly []string `json:"mp_piccadilly"`

	// mp port2 gw
	MpPort2Gw []string `json:"mp_port2_gw"`

	// mp promenade gw
	MpPromenadeGw []string `json:"mp_promenade_gw"`

	// mp quarry2
	MpQuarry2 []string `json:"mp_quarry2"`

	// mp raid
	MpRaid []string `json:"mp_raid"`

	// mp riverside gw
	MpRiversideGw []string `json:"mp_riverside_gw"`

	// mp runner
	MpRunner []string `json:"mp_runner"`

	// mp runner pm
	MpRunnerPm []string `json:"mp_runner_pm"`

	// mp rust
	MpRust []string `json:"mp_rust"`

	// mp scrapyard
	MpScrapyard []string `json:"mp_scrapyard"`

	// mp shipment
	MpShipment []string `json:"mp_shipment"`

	// mp spear
	MpSpear []string `json:"mp_spear"`

	// mp spear pm
	MpSpearPm []string `json:"mp_spear_pm"`

	// mp vacant
	MpVacant []string `json:"mp_vacant"`

	// mp village2
	MpVillage2 []string `json:"mp_village2"`

	// type
	Type string `json:"type,omitempty"`

	// map list response data additional properties
	MapListResponseDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *MapListResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// message
		Message string `json:"message,omitempty"`

		// mp aniyah
		MpAniyah []string `json:"mp_aniyah"`

		// mp aniyah tac
		MpAniyahTac []string `json:"mp_aniyah_tac"`

		// mp backlot2
		MpBacklot2 []string `json:"mp_backlot2"`

		// mp boneyard gw
		MpBoneyardGw []string `json:"mp_boneyard_gw"`

		// mp broadcast2
		MpBroadcast2 []string `json:"mp_broadcast2"`

		// mp cave
		MpCave []string `json:"mp_cave"`

		// mp cave am
		MpCaveAm []string `json:"mp_cave_am"`

		// mp crash2
		MpCrash2 []string `json:"mp_crash2"`

		// mp deadzone
		MpDeadzone []string `json:"mp_deadzone"`

		// mp downtown gw
		MpDowntownGw []string `json:"mp_downtown_gw"`

		// mp emporium
		MpEmporium []string `json:"mp_emporium"`

		// mp euphrates
		MpEuphrates []string `json:"mp_euphrates"`

		// mp farms2 gw
		MpFarms2Gw []string `json:"mp_farms2_gw"`

		// mp garden
		MpGarden []string `json:"mp_garden"`

		// mp hackney am
		MpHackneyAm []string `json:"mp_hackney_am"`

		// mp hackney yard
		MpHackneyYard []string `json:"mp_hackney_yard"`

		// mp harbor
		MpHarbor []string `json:"mp_harbor"`

		// mp hardhat
		MpHardhat []string `json:"mp_hardhat"`

		// mp hideout
		MpHideout []string `json:"mp_hideout"`

		// mp layover gw
		MpLayoverGw []string `json:"mp_layover_gw"`

		// mp m cage
		MpmCage []string `json:"mp_m_cage"`

		// mp m cargo
		MpmCargo []string `json:"mp_m_cargo"`

		// mp m cornfield
		MpmCornfield []string `json:"mp_m_cornfield"`

		// mp m fork
		MpmFork []string `json:"mp_m_fork"`

		// mp m hill
		MpmHill []string `json:"mp_m_hill"`

		// mp m king
		MpmKing []string `json:"mp_m_king"`

		// mp m overunder
		MpmOverunder []string `json:"mp_m_overunder"`

		// mp m overwinter
		MpmOverwinter []string `json:"mp_m_overwinter"`

		// mp m pine
		MpmPine []string `json:"mp_m_pine"`

		// mp m showers
		MpmShowers []string `json:"mp_m_showers"`

		// mp m speed
		MpmSpeed []string `json:"mp_m_speed"`

		// mp m speedball
		MpmSpeedball []string `json:"mp_m_speedball"`

		// mp m stack
		MpmStack []string `json:"mp_m_stack"`

		// mp m stadium
		MpmStadium []string `json:"mp_m_stadium"`

		// mp m train
		MpmTrain []string `json:"mp_m_train"`

		// mp m trench
		MpmTrench []string `json:"mp_m_trench"`

		// mp m wallco2
		MpmWallco2 []string `json:"mp_m_wallco2"`

		// mp malyshev
		MpMalyshev []string `json:"mp_malyshev"`

		// mp oilrig
		MpOilrig []string `json:"mp_oilrig"`

		// mp petrograd
		MpPetrograd []string `json:"mp_petrograd"`

		// mp piccadilly
		MpPiccadilly []string `json:"mp_piccadilly"`

		// mp port2 gw
		MpPort2Gw []string `json:"mp_port2_gw"`

		// mp promenade gw
		MpPromenadeGw []string `json:"mp_promenade_gw"`

		// mp quarry2
		MpQuarry2 []string `json:"mp_quarry2"`

		// mp raid
		MpRaid []string `json:"mp_raid"`

		// mp riverside gw
		MpRiversideGw []string `json:"mp_riverside_gw"`

		// mp runner
		MpRunner []string `json:"mp_runner"`

		// mp runner pm
		MpRunnerPm []string `json:"mp_runner_pm"`

		// mp rust
		MpRust []string `json:"mp_rust"`

		// mp scrapyard
		MpScrapyard []string `json:"mp_scrapyard"`

		// mp shipment
		MpShipment []string `json:"mp_shipment"`

		// mp spear
		MpSpear []string `json:"mp_spear"`

		// mp spear pm
		MpSpearPm []string `json:"mp_spear_pm"`

		// mp vacant
		MpVacant []string `json:"mp_vacant"`

		// mp village2
		MpVillage2 []string `json:"mp_village2"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv MapListResponseData

	rcv.Message = stage1.Message
	rcv.MpAniyah = stage1.MpAniyah
	rcv.MpAniyahTac = stage1.MpAniyahTac
	rcv.MpBacklot2 = stage1.MpBacklot2
	rcv.MpBoneyardGw = stage1.MpBoneyardGw
	rcv.MpBroadcast2 = stage1.MpBroadcast2
	rcv.MpCave = stage1.MpCave
	rcv.MpCaveAm = stage1.MpCaveAm
	rcv.MpCrash2 = stage1.MpCrash2
	rcv.MpDeadzone = stage1.MpDeadzone
	rcv.MpDowntownGw = stage1.MpDowntownGw
	rcv.MpEmporium = stage1.MpEmporium
	rcv.MpEuphrates = stage1.MpEuphrates
	rcv.MpFarms2Gw = stage1.MpFarms2Gw
	rcv.MpGarden = stage1.MpGarden
	rcv.MpHackneyAm = stage1.MpHackneyAm
	rcv.MpHackneyYard = stage1.MpHackneyYard
	rcv.MpHarbor = stage1.MpHarbor
	rcv.MpHardhat = stage1.MpHardhat
	rcv.MpHideout = stage1.MpHideout
	rcv.MpLayoverGw = stage1.MpLayoverGw
	rcv.MpmCage = stage1.MpmCage
	rcv.MpmCargo = stage1.MpmCargo
	rcv.MpmCornfield = stage1.MpmCornfield
	rcv.MpmFork = stage1.MpmFork
	rcv.MpmHill = stage1.MpmHill
	rcv.MpmKing = stage1.MpmKing
	rcv.MpmOverunder = stage1.MpmOverunder
	rcv.MpmOverwinter = stage1.MpmOverwinter
	rcv.MpmPine = stage1.MpmPine
	rcv.MpmShowers = stage1.MpmShowers
	rcv.MpmSpeed = stage1.MpmSpeed
	rcv.MpmSpeedball = stage1.MpmSpeedball
	rcv.MpmStack = stage1.MpmStack
	rcv.MpmStadium = stage1.MpmStadium
	rcv.MpmTrain = stage1.MpmTrain
	rcv.MpmTrench = stage1.MpmTrench
	rcv.MpmWallco2 = stage1.MpmWallco2
	rcv.MpMalyshev = stage1.MpMalyshev
	rcv.MpOilrig = stage1.MpOilrig
	rcv.MpPetrograd = stage1.MpPetrograd
	rcv.MpPiccadilly = stage1.MpPiccadilly
	rcv.MpPort2Gw = stage1.MpPort2Gw
	rcv.MpPromenadeGw = stage1.MpPromenadeGw
	rcv.MpQuarry2 = stage1.MpQuarry2
	rcv.MpRaid = stage1.MpRaid
	rcv.MpRiversideGw = stage1.MpRiversideGw
	rcv.MpRunner = stage1.MpRunner
	rcv.MpRunnerPm = stage1.MpRunnerPm
	rcv.MpRust = stage1.MpRust
	rcv.MpScrapyard = stage1.MpScrapyard
	rcv.MpShipment = stage1.MpShipment
	rcv.MpSpear = stage1.MpSpear
	rcv.MpSpearPm = stage1.MpSpearPm
	rcv.MpVacant = stage1.MpVacant
	rcv.MpVillage2 = stage1.MpVillage2
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "message")
	delete(stage2, "mp_aniyah")
	delete(stage2, "mp_aniyah_tac")
	delete(stage2, "mp_backlot2")
	delete(stage2, "mp_boneyard_gw")
	delete(stage2, "mp_broadcast2")
	delete(stage2, "mp_cave")
	delete(stage2, "mp_cave_am")
	delete(stage2, "mp_crash2")
	delete(stage2, "mp_deadzone")
	delete(stage2, "mp_downtown_gw")
	delete(stage2, "mp_emporium")
	delete(stage2, "mp_euphrates")
	delete(stage2, "mp_farms2_gw")
	delete(stage2, "mp_garden")
	delete(stage2, "mp_hackney_am")
	delete(stage2, "mp_hackney_yard")
	delete(stage2, "mp_harbor")
	delete(stage2, "mp_hardhat")
	delete(stage2, "mp_hideout")
	delete(stage2, "mp_layover_gw")
	delete(stage2, "mp_m_cage")
	delete(stage2, "mp_m_cargo")
	delete(stage2, "mp_m_cornfield")
	delete(stage2, "mp_m_fork")
	delete(stage2, "mp_m_hill")
	delete(stage2, "mp_m_king")
	delete(stage2, "mp_m_overunder")
	delete(stage2, "mp_m_overwinter")
	delete(stage2, "mp_m_pine")
	delete(stage2, "mp_m_showers")
	delete(stage2, "mp_m_speed")
	delete(stage2, "mp_m_speedball")
	delete(stage2, "mp_m_stack")
	delete(stage2, "mp_m_stadium")
	delete(stage2, "mp_m_train")
	delete(stage2, "mp_m_trench")
	delete(stage2, "mp_m_wallco2")
	delete(stage2, "mp_malyshev")
	delete(stage2, "mp_oilrig")
	delete(stage2, "mp_petrograd")
	delete(stage2, "mp_piccadilly")
	delete(stage2, "mp_port2_gw")
	delete(stage2, "mp_promenade_gw")
	delete(stage2, "mp_quarry2")
	delete(stage2, "mp_raid")
	delete(stage2, "mp_riverside_gw")
	delete(stage2, "mp_runner")
	delete(stage2, "mp_runner_pm")
	delete(stage2, "mp_rust")
	delete(stage2, "mp_scrapyard")
	delete(stage2, "mp_shipment")
	delete(stage2, "mp_spear")
	delete(stage2, "mp_spear_pm")
	delete(stage2, "mp_vacant")
	delete(stage2, "mp_village2")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.MapListResponseDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m MapListResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// message
		Message string `json:"message,omitempty"`

		// mp aniyah
		MpAniyah []string `json:"mp_aniyah"`

		// mp aniyah tac
		MpAniyahTac []string `json:"mp_aniyah_tac"`

		// mp backlot2
		MpBacklot2 []string `json:"mp_backlot2"`

		// mp boneyard gw
		MpBoneyardGw []string `json:"mp_boneyard_gw"`

		// mp broadcast2
		MpBroadcast2 []string `json:"mp_broadcast2"`

		// mp cave
		MpCave []string `json:"mp_cave"`

		// mp cave am
		MpCaveAm []string `json:"mp_cave_am"`

		// mp crash2
		MpCrash2 []string `json:"mp_crash2"`

		// mp deadzone
		MpDeadzone []string `json:"mp_deadzone"`

		// mp downtown gw
		MpDowntownGw []string `json:"mp_downtown_gw"`

		// mp emporium
		MpEmporium []string `json:"mp_emporium"`

		// mp euphrates
		MpEuphrates []string `json:"mp_euphrates"`

		// mp farms2 gw
		MpFarms2Gw []string `json:"mp_farms2_gw"`

		// mp garden
		MpGarden []string `json:"mp_garden"`

		// mp hackney am
		MpHackneyAm []string `json:"mp_hackney_am"`

		// mp hackney yard
		MpHackneyYard []string `json:"mp_hackney_yard"`

		// mp harbor
		MpHarbor []string `json:"mp_harbor"`

		// mp hardhat
		MpHardhat []string `json:"mp_hardhat"`

		// mp hideout
		MpHideout []string `json:"mp_hideout"`

		// mp layover gw
		MpLayoverGw []string `json:"mp_layover_gw"`

		// mp m cage
		MpmCage []string `json:"mp_m_cage"`

		// mp m cargo
		MpmCargo []string `json:"mp_m_cargo"`

		// mp m cornfield
		MpmCornfield []string `json:"mp_m_cornfield"`

		// mp m fork
		MpmFork []string `json:"mp_m_fork"`

		// mp m hill
		MpmHill []string `json:"mp_m_hill"`

		// mp m king
		MpmKing []string `json:"mp_m_king"`

		// mp m overunder
		MpmOverunder []string `json:"mp_m_overunder"`

		// mp m overwinter
		MpmOverwinter []string `json:"mp_m_overwinter"`

		// mp m pine
		MpmPine []string `json:"mp_m_pine"`

		// mp m showers
		MpmShowers []string `json:"mp_m_showers"`

		// mp m speed
		MpmSpeed []string `json:"mp_m_speed"`

		// mp m speedball
		MpmSpeedball []string `json:"mp_m_speedball"`

		// mp m stack
		MpmStack []string `json:"mp_m_stack"`

		// mp m stadium
		MpmStadium []string `json:"mp_m_stadium"`

		// mp m train
		MpmTrain []string `json:"mp_m_train"`

		// mp m trench
		MpmTrench []string `json:"mp_m_trench"`

		// mp m wallco2
		MpmWallco2 []string `json:"mp_m_wallco2"`

		// mp malyshev
		MpMalyshev []string `json:"mp_malyshev"`

		// mp oilrig
		MpOilrig []string `json:"mp_oilrig"`

		// mp petrograd
		MpPetrograd []string `json:"mp_petrograd"`

		// mp piccadilly
		MpPiccadilly []string `json:"mp_piccadilly"`

		// mp port2 gw
		MpPort2Gw []string `json:"mp_port2_gw"`

		// mp promenade gw
		MpPromenadeGw []string `json:"mp_promenade_gw"`

		// mp quarry2
		MpQuarry2 []string `json:"mp_quarry2"`

		// mp raid
		MpRaid []string `json:"mp_raid"`

		// mp riverside gw
		MpRiversideGw []string `json:"mp_riverside_gw"`

		// mp runner
		MpRunner []string `json:"mp_runner"`

		// mp runner pm
		MpRunnerPm []string `json:"mp_runner_pm"`

		// mp rust
		MpRust []string `json:"mp_rust"`

		// mp scrapyard
		MpScrapyard []string `json:"mp_scrapyard"`

		// mp shipment
		MpShipment []string `json:"mp_shipment"`

		// mp spear
		MpSpear []string `json:"mp_spear"`

		// mp spear pm
		MpSpearPm []string `json:"mp_spear_pm"`

		// mp vacant
		MpVacant []string `json:"mp_vacant"`

		// mp village2
		MpVillage2 []string `json:"mp_village2"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.Message = m.Message
	stage1.MpAniyah = m.MpAniyah
	stage1.MpAniyahTac = m.MpAniyahTac
	stage1.MpBacklot2 = m.MpBacklot2
	stage1.MpBoneyardGw = m.MpBoneyardGw
	stage1.MpBroadcast2 = m.MpBroadcast2
	stage1.MpCave = m.MpCave
	stage1.MpCaveAm = m.MpCaveAm
	stage1.MpCrash2 = m.MpCrash2
	stage1.MpDeadzone = m.MpDeadzone
	stage1.MpDowntownGw = m.MpDowntownGw
	stage1.MpEmporium = m.MpEmporium
	stage1.MpEuphrates = m.MpEuphrates
	stage1.MpFarms2Gw = m.MpFarms2Gw
	stage1.MpGarden = m.MpGarden
	stage1.MpHackneyAm = m.MpHackneyAm
	stage1.MpHackneyYard = m.MpHackneyYard
	stage1.MpHarbor = m.MpHarbor
	stage1.MpHardhat = m.MpHardhat
	stage1.MpHideout = m.MpHideout
	stage1.MpLayoverGw = m.MpLayoverGw
	stage1.MpmCage = m.MpmCage
	stage1.MpmCargo = m.MpmCargo
	stage1.MpmCornfield = m.MpmCornfield
	stage1.MpmFork = m.MpmFork
	stage1.MpmHill = m.MpmHill
	stage1.MpmKing = m.MpmKing
	stage1.MpmOverunder = m.MpmOverunder
	stage1.MpmOverwinter = m.MpmOverwinter
	stage1.MpmPine = m.MpmPine
	stage1.MpmShowers = m.MpmShowers
	stage1.MpmSpeed = m.MpmSpeed
	stage1.MpmSpeedball = m.MpmSpeedball
	stage1.MpmStack = m.MpmStack
	stage1.MpmStadium = m.MpmStadium
	stage1.MpmTrain = m.MpmTrain
	stage1.MpmTrench = m.MpmTrench
	stage1.MpmWallco2 = m.MpmWallco2
	stage1.MpMalyshev = m.MpMalyshev
	stage1.MpOilrig = m.MpOilrig
	stage1.MpPetrograd = m.MpPetrograd
	stage1.MpPiccadilly = m.MpPiccadilly
	stage1.MpPort2Gw = m.MpPort2Gw
	stage1.MpPromenadeGw = m.MpPromenadeGw
	stage1.MpQuarry2 = m.MpQuarry2
	stage1.MpRaid = m.MpRaid
	stage1.MpRiversideGw = m.MpRiversideGw
	stage1.MpRunner = m.MpRunner
	stage1.MpRunnerPm = m.MpRunnerPm
	stage1.MpRust = m.MpRust
	stage1.MpScrapyard = m.MpScrapyard
	stage1.MpShipment = m.MpShipment
	stage1.MpSpear = m.MpSpear
	stage1.MpSpearPm = m.MpSpearPm
	stage1.MpVacant = m.MpVacant
	stage1.MpVillage2 = m.MpVillage2
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.MapListResponseDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.MapListResponseDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this map list response data
func (m *MapListResponseData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MapListResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapListResponseData) UnmarshalBinary(b []byte) error {
	var res MapListResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
