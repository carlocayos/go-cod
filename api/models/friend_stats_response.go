// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FriendStatsResponse friend stats response
//
// swagger:model friendStatsResponse
type FriendStatsResponse struct {

	// data
	Data []*FriendStatsResponseDataItems0 `json:"data"`

	// status
	Status string `json:"status,omitempty"`

	// friend stats response additional properties
	FriendStatsResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data []*FriendStatsResponseDataItems0 `json:"data"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data []*FriendStatsResponseDataItems0 `json:"data"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response
func (m *FriendStatsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponse) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0 friend stats response data items0
//
// swagger:model FriendStatsResponseDataItems0
type FriendStatsResponseDataItems0 struct {

	// engagement
	Engagement interface{} `json:"engagement,omitempty"`

	// level
	Level float64 `json:"level,omitempty"`

	// level xp gained
	LevelXpGained float64 `json:"levelXpGained,omitempty"`

	// level xp remainder
	LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

	// lifetime
	Lifetime *FriendStatsResponseDataItems0Lifetime `json:"lifetime,omitempty"`

	// max level
	MaxLevel float64 `json:"maxLevel,omitempty"`

	// max prestige
	MaxPrestige float64 `json:"maxPrestige,omitempty"`

	// p
	P float64 `json:"p,omitempty"`

	// paragon Id
	ParagonID float64 `json:"paragonId,omitempty"`

	// paragon rank
	ParagonRank float64 `json:"paragonRank,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// prestige
	Prestige float64 `json:"prestige,omitempty"`

	// prestige Id
	PrestigeID float64 `json:"prestigeId,omitempty"`

	// s
	S float64 `json:"s,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// total xp
	TotalXp float64 `json:"totalXp,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// weekly
	Weekly *FriendStatsResponseDataItems0Weekly `json:"weekly,omitempty"`

	// friend stats response data items0 additional properties
	FriendStatsResponseDataItems0AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// engagement
		Engagement interface{} `json:"engagement,omitempty"`

		// level
		Level float64 `json:"level,omitempty"`

		// level xp gained
		LevelXpGained float64 `json:"levelXpGained,omitempty"`

		// level xp remainder
		LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

		// lifetime
		Lifetime *FriendStatsResponseDataItems0Lifetime `json:"lifetime,omitempty"`

		// max level
		MaxLevel float64 `json:"maxLevel,omitempty"`

		// max prestige
		MaxPrestige float64 `json:"maxPrestige,omitempty"`

		// p
		P float64 `json:"p,omitempty"`

		// paragon Id
		ParagonID float64 `json:"paragonId,omitempty"`

		// paragon rank
		ParagonRank float64 `json:"paragonRank,omitempty"`

		// platform
		Platform string `json:"platform,omitempty"`

		// prestige
		Prestige float64 `json:"prestige,omitempty"`

		// prestige Id
		PrestigeID float64 `json:"prestigeId,omitempty"`

		// s
		S float64 `json:"s,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// total xp
		TotalXp float64 `json:"totalXp,omitempty"`

		// type
		Type string `json:"type,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// weekly
		Weekly *FriendStatsResponseDataItems0Weekly `json:"weekly,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0

	rcv.Engagement = stage1.Engagement
	rcv.Level = stage1.Level
	rcv.LevelXpGained = stage1.LevelXpGained
	rcv.LevelXpRemainder = stage1.LevelXpRemainder
	rcv.Lifetime = stage1.Lifetime
	rcv.MaxLevel = stage1.MaxLevel
	rcv.MaxPrestige = stage1.MaxPrestige
	rcv.P = stage1.P
	rcv.ParagonID = stage1.ParagonID
	rcv.ParagonRank = stage1.ParagonRank
	rcv.Platform = stage1.Platform
	rcv.Prestige = stage1.Prestige
	rcv.PrestigeID = stage1.PrestigeID
	rcv.S = stage1.S
	rcv.Title = stage1.Title
	rcv.TotalXp = stage1.TotalXp
	rcv.Type = stage1.Type
	rcv.Username = stage1.Username
	rcv.Weekly = stage1.Weekly
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "engagement")
	delete(stage2, "level")
	delete(stage2, "levelXpGained")
	delete(stage2, "levelXpRemainder")
	delete(stage2, "lifetime")
	delete(stage2, "maxLevel")
	delete(stage2, "maxPrestige")
	delete(stage2, "p")
	delete(stage2, "paragonId")
	delete(stage2, "paragonRank")
	delete(stage2, "platform")
	delete(stage2, "prestige")
	delete(stage2, "prestigeId")
	delete(stage2, "s")
	delete(stage2, "title")
	delete(stage2, "totalXp")
	delete(stage2, "type")
	delete(stage2, "username")
	delete(stage2, "weekly")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// engagement
		Engagement interface{} `json:"engagement,omitempty"`

		// level
		Level float64 `json:"level,omitempty"`

		// level xp gained
		LevelXpGained float64 `json:"levelXpGained,omitempty"`

		// level xp remainder
		LevelXpRemainder float64 `json:"levelXpRemainder,omitempty"`

		// lifetime
		Lifetime *FriendStatsResponseDataItems0Lifetime `json:"lifetime,omitempty"`

		// max level
		MaxLevel float64 `json:"maxLevel,omitempty"`

		// max prestige
		MaxPrestige float64 `json:"maxPrestige,omitempty"`

		// p
		P float64 `json:"p,omitempty"`

		// paragon Id
		ParagonID float64 `json:"paragonId,omitempty"`

		// paragon rank
		ParagonRank float64 `json:"paragonRank,omitempty"`

		// platform
		Platform string `json:"platform,omitempty"`

		// prestige
		Prestige float64 `json:"prestige,omitempty"`

		// prestige Id
		PrestigeID float64 `json:"prestigeId,omitempty"`

		// s
		S float64 `json:"s,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// total xp
		TotalXp float64 `json:"totalXp,omitempty"`

		// type
		Type string `json:"type,omitempty"`

		// username
		Username string `json:"username,omitempty"`

		// weekly
		Weekly *FriendStatsResponseDataItems0Weekly `json:"weekly,omitempty"`
	}

	stage1.Engagement = m.Engagement
	stage1.Level = m.Level
	stage1.LevelXpGained = m.LevelXpGained
	stage1.LevelXpRemainder = m.LevelXpRemainder
	stage1.Lifetime = m.Lifetime
	stage1.MaxLevel = m.MaxLevel
	stage1.MaxPrestige = m.MaxPrestige
	stage1.P = m.P
	stage1.ParagonID = m.ParagonID
	stage1.ParagonRank = m.ParagonRank
	stage1.Platform = m.Platform
	stage1.Prestige = m.Prestige
	stage1.PrestigeID = m.PrestigeID
	stage1.S = m.S
	stage1.Title = m.Title
	stage1.TotalXp = m.TotalXp
	stage1.Type = m.Type
	stage1.Username = m.Username
	stage1.Weekly = m.Weekly

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0
func (m *FriendStatsResponseDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0) validateLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifetime) { // not required
		return nil
	}

	if m.Lifetime != nil {
		if err := m.Lifetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0) validateWeekly(formats strfmt.Registry) error {

	if swag.IsZero(m.Weekly) { // not required
		return nil
	}

	if m.Weekly != nil {
		if err := m.Weekly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekly")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0Lifetime friend stats response data items0 lifetime
//
// swagger:model FriendStatsResponseDataItems0Lifetime
type FriendStatsResponseDataItems0Lifetime struct {

	// accolade data
	AccoladeData *FriendStatsResponseDataItems0LifetimeAccoladeData `json:"accoladeData,omitempty"`

	// all
	All *FriendStatsResponseDataItems0LifetimeAll `json:"all,omitempty"`

	// item data
	ItemData *FriendStatsResponseDataItems0LifetimeItemData `json:"itemData,omitempty"`

	// map
	Map interface{} `json:"map,omitempty"`

	// mode
	Mode *FriendStatsResponseDataItems0LifetimeMode `json:"mode,omitempty"`

	// scorestreak data
	ScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakData `json:"scorestreakData,omitempty"`

	// friend stats response data items0 lifetime additional properties
	FriendStatsResponseDataItems0LifetimeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0Lifetime) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accolade data
		AccoladeData *FriendStatsResponseDataItems0LifetimeAccoladeData `json:"accoladeData,omitempty"`

		// all
		All *FriendStatsResponseDataItems0LifetimeAll `json:"all,omitempty"`

		// item data
		ItemData *FriendStatsResponseDataItems0LifetimeItemData `json:"itemData,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode *FriendStatsResponseDataItems0LifetimeMode `json:"mode,omitempty"`

		// scorestreak data
		ScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakData `json:"scorestreakData,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0Lifetime

	rcv.AccoladeData = stage1.AccoladeData
	rcv.All = stage1.All
	rcv.ItemData = stage1.ItemData
	rcv.Map = stage1.Map
	rcv.Mode = stage1.Mode
	rcv.ScorestreakData = stage1.ScorestreakData
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accoladeData")
	delete(stage2, "all")
	delete(stage2, "itemData")
	delete(stage2, "map")
	delete(stage2, "mode")
	delete(stage2, "scorestreakData")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0Lifetime) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accolade data
		AccoladeData *FriendStatsResponseDataItems0LifetimeAccoladeData `json:"accoladeData,omitempty"`

		// all
		All *FriendStatsResponseDataItems0LifetimeAll `json:"all,omitempty"`

		// item data
		ItemData *FriendStatsResponseDataItems0LifetimeItemData `json:"itemData,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode *FriendStatsResponseDataItems0LifetimeMode `json:"mode,omitempty"`

		// scorestreak data
		ScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakData `json:"scorestreakData,omitempty"`
	}

	stage1.AccoladeData = m.AccoladeData
	stage1.All = m.All
	stage1.ItemData = m.ItemData
	stage1.Map = m.Map
	stage1.Mode = m.Mode
	stage1.ScorestreakData = m.ScorestreakData

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime
func (m *FriendStatsResponseDataItems0Lifetime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccoladeData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScorestreakData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0Lifetime) validateAccoladeData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccoladeData) { // not required
		return nil
	}

	if m.AccoladeData != nil {
		if err := m.AccoladeData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "accoladeData")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0Lifetime) validateAll(formats strfmt.Registry) error {

	if swag.IsZero(m.All) { // not required
		return nil
	}

	if m.All != nil {
		if err := m.All.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "all")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0Lifetime) validateItemData(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemData) { // not required
		return nil
	}

	if m.ItemData != nil {
		if err := m.ItemData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0Lifetime) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0Lifetime) validateScorestreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.ScorestreakData) { // not required
		return nil
	}

	if m.ScorestreakData != nil {
		if err := m.ScorestreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0Lifetime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0Lifetime) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0Lifetime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeAccoladeData friend stats response data items0 lifetime accolade data
//
// swagger:model FriendStatsResponseDataItems0LifetimeAccoladeData
type FriendStatsResponseDataItems0LifetimeAccoladeData struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime accolade data additional properties
	FriendStatsResponseDataItems0LifetimeAccoladeDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeAccoladeData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeAccoladeData

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeAccoladeDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeAccoladeData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeAccoladeDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeAccoladeDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime accolade data
func (m *FriendStatsResponseDataItems0LifetimeAccoladeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeAccoladeData) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "accoladeData" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAccoladeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAccoladeData) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeAccoladeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeAccoladeDataProperties friend stats response data items0 lifetime accolade data properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeAccoladeDataProperties
type FriendStatsResponseDataItems0LifetimeAccoladeDataProperties struct {

	// ads kills
	AdsKills float64 `json:"adsKills,omitempty"`

	// ammo box used
	AmmoBoxUsed float64 `json:"ammoBoxUsed,omitempty"`

	// ar deaths
	ArDeaths float64 `json:"arDeaths,omitempty"`

	// ar headshots
	ArHeadshots float64 `json:"arHeadshots,omitempty"`

	// ar kills
	ArKills float64 `json:"arKills,omitempty"`

	// assaults
	Assaults float64 `json:"assaults,omitempty"`

	// avenger kills
	AvengerKills float64 `json:"avengerKills,omitempty"`

	// bomb defused
	BombDefused float64 `json:"bombDefused,omitempty"`

	// bomb detonated
	BombDetonated float64 `json:"bombDetonated,omitempty"`

	// bomb planted
	BombPlanted float64 `json:"bombPlanted,omitempty"`

	// c4 kills
	C4Kills float64 `json:"c4Kills,omitempty"`

	// captures
	Captures float64 `json:"captures,omitempty"`

	// carepackages captured
	CarepackagesCaptured float64 `json:"carepackagesCaptured,omitempty"`

	// carrier kills
	CarrierKills float64 `json:"carrierKills,omitempty"`

	// class changes
	ClassChanges float64 `json:"classChanges,omitempty"`

	// claymore kills
	ClaymoreKills float64 `json:"claymoreKills,omitempty"`

	// clutch
	Clutch float64 `json:"clutch,omitempty"`

	// clutch revives
	ClutchRevives float64 `json:"clutchRevives,omitempty"`

	// comeback kills
	ComebackKills float64 `json:"comebackKills,omitempty"`

	// dead silence kills
	DeadSilenceKills float64 `json:"deadSilenceKills,omitempty"`

	// deaths from behind
	DeathsFromBehind float64 `json:"deathsFromBehind,omitempty"`

	// decoy hits
	DecoyHits float64 `json:"decoyHits,omitempty"`

	// defender kills
	DefenderKills float64 `json:"defenderKills,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// deployable cover used
	DeployableCoverUsed float64 `json:"deployableCoverUsed,omitempty"`

	// destroyed killstreaks
	DestroyedKillstreaks float64 `json:"destroyedKillstreaks,omitempty"`

	// distance traveled in vehicle
	DistanceTraveledInVehicle float64 `json:"distanceTraveledInVehicle,omitempty"`

	// distance travelled
	DistanceTravelled float64 `json:"distanceTravelled,omitempty"`

	// emp drone hits
	EmpDroneHits float64 `json:"empDroneHits,omitempty"`

	// execution kills
	ExecutionKills float64 `json:"executionKills,omitempty"`

	// explosions survived
	ExplosionsSurvived float64 `json:"explosionsSurvived,omitempty"`

	// first infected
	FirstInfected float64 `json:"firstInfected,omitempty"`

	// flashbang hits
	FlashbangHits float64 `json:"flashbangHits,omitempty"`

	// frag kills
	FragKills float64 `json:"fragKills,omitempty"`

	// gas hits
	GasHits float64 `json:"gasHits,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// higher ranked kills
	HigherRankedKills float64 `json:"higherRankedKills,omitempty"`

	// highest avg altitude
	HighestAvgAltitude float64 `json:"highestAvgAltitude,omitempty"`

	// highest multikill
	HighestMultikill float64 `json:"highestMultikill,omitempty"`

	// highest ranked kills
	HighestRankedKills float64 `json:"highestRankedKills,omitempty"`

	// hipfire kills
	HipfireKills float64 `json:"hipfireKills,omitempty"`

	// infected kills
	InfectedKills float64 `json:"infectedKills,omitempty"`

	// kill enemy team
	KillEnemyTeam float64 `json:"killEnemyTeam,omitempty"`

	// kills10 no deaths
	Kills10NoDeaths float64 `json:"kills10NoDeaths,omitempty"`

	// kills from behind
	KillsFromBehind float64 `json:"killsFromBehind,omitempty"`

	// killstreak a u a v assists
	KillstreakAUAVAssists float64 `json:"killstreakAUAVAssists,omitempty"`

	// killstreak air kills
	KillstreakAirKills float64 `json:"killstreakAirKills,omitempty"`

	// killstreak airstrike kills
	KillstreakAirstrikeKills float64 `json:"killstreakAirstrikeKills,omitempty"`

	// killstreak c u a v assists
	KillstreakCUAVAssists float64 `json:"killstreakCUAVAssists,omitempty"`

	// killstreak care package used
	KillstreakCarePackageUsed float64 `json:"killstreakCarePackageUsed,omitempty"`

	// killstreak chopper gunner kills
	KillstreakChopperGunnerKills float64 `json:"killstreakChopperGunnerKills,omitempty"`

	// killstreak chopper support kills
	KillstreakChopperSupportKills float64 `json:"killstreakChopperSupportKills,omitempty"`

	// killstreak cluser strike kills
	KillstreakCluserStrikeKills float64 `json:"killstreakCluserStrikeKills,omitempty"`

	// killstreak cruise missile kills
	KillstreakCruiseMissileKills float64 `json:"killstreakCruiseMissileKills,omitempty"`

	// killstreak emergency airdrop used
	KillstreakEmergencyAirdropUsed float64 `json:"killstreakEmergencyAirdropUsed,omitempty"`

	// killstreak ground kills
	KillstreakGroundKills float64 `json:"killstreakGroundKills,omitempty"`

	// killstreak gunship kills
	KillstreakGunshipKills float64 `json:"killstreakGunshipKills,omitempty"`

	// killstreak juggernaut kills
	KillstreakJuggernautKills float64 `json:"killstreakJuggernautKills,omitempty"`

	// killstreak kills
	KillstreakKills float64 `json:"killstreakKills,omitempty"`

	// killstreak personal u a v kills
	KillstreakPersonalUAVKills float64 `json:"killstreakPersonalUAVKills,omitempty"`

	// killstreak sentry gun kills
	KillstreakSentryGunKills float64 `json:"killstreakSentryGunKills,omitempty"`

	// killstreak shield turret kills
	KillstreakShieldTurretKills float64 `json:"killstreakShieldTurretKills,omitempty"`

	// killstreak tank kills
	KillstreakTankKills float64 `json:"killstreakTankKills,omitempty"`

	// killstreak u a v assists
	KillstreakUAVAssists float64 `json:"killstreakUAVAssists,omitempty"`

	// killstreak v t o l jet kills
	KillstreakVTOLJetKills float64 `json:"killstreakVTOLJetKills,omitempty"`

	// killstreak wheelson kills
	KillstreakWheelsonKills float64 `json:"killstreakWheelsonKills,omitempty"`

	// killstreak white phosphorous kills assists
	KillstreakWhitePhosphorousKillsAssists float64 `json:"killstreakWhitePhosphorousKillsAssists,omitempty"`

	// last survivor
	LastSurvivor float64 `json:"lastSurvivor,omitempty"`

	// launcher deaths
	LauncherDeaths float64 `json:"launcherDeaths,omitempty"`

	// launcher headshots
	LauncherHeadshots float64 `json:"launcherHeadshots,omitempty"`

	// launcher kills
	LauncherKills float64 `json:"launcherKills,omitempty"`

	// least assists
	LeastAssists float64 `json:"leastAssists,omitempty"`

	// least deaths
	LeastDeaths float64 `json:"leastDeaths,omitempty"`

	// least kills
	LeastKills float64 `json:"leastKills,omitempty"`

	// lmg deaths
	LmgDeaths float64 `json:"lmgDeaths,omitempty"`

	// lmg headshots
	LmgHeadshots float64 `json:"lmgHeadshots,omitempty"`

	// lmg kills
	LmgKills float64 `json:"lmgKills,omitempty"`

	// longest life
	LongestLife float64 `json:"longestLife,omitempty"`

	// longest streak
	LongestStreak float64 `json:"longestStreak,omitempty"`

	// longest time spent on weapon
	LongestTimeSpentOnWeapon float64 `json:"longestTimeSpentOnWeapon,omitempty"`

	// longshot kills
	LongshotKills float64 `json:"longshotKills,omitempty"`

	// lower ranked kills
	LowerRankedKills float64 `json:"lowerRankedKills,omitempty"`

	// lowest avg altitude
	LowestAvgAltitude float64 `json:"lowestAvgAltitude,omitempty"`

	// melee deaths
	MeleeDeaths float64 `json:"meleeDeaths,omitempty"`

	// melee kills
	MeleeKills float64 `json:"meleeKills,omitempty"`

	// molotov kills
	MolotovKills float64 `json:"molotovKills,omitempty"`

	// most assists
	MostAssists float64 `json:"mostAssists,omitempty"`

	// most deaths
	MostDeaths float64 `json:"mostDeaths,omitempty"`

	// most kills
	MostKills float64 `json:"mostKills,omitempty"`

	// most kills least deaths
	MostKillsLeastDeaths float64 `json:"mostKillsLeastDeaths,omitempty"`

	// most kills longest streak
	MostKillsLongestStreak float64 `json:"mostKillsLongestStreak,omitempty"`

	// most kills most headshots
	MostKillsMostHeadshots float64 `json:"mostKillsMostHeadshots,omitempty"`

	// most multikills
	MostMultikills float64 `json:"mostMultikills,omitempty"`

	// no deaths from behind
	NoDeathsFromBehind float64 `json:"noDeathsFromBehind,omitempty"`

	// no kill10 deaths
	NoKill10Deaths float64 `json:"noKill10Deaths,omitempty"`

	// no kill no death
	NoKillNoDeath float64 `json:"noKillNoDeath,omitempty"`

	// no kills with death
	NoKillsWithDeath float64 `json:"noKillsWithDeath,omitempty"`

	// one shot one kills
	OneShotOneKills float64 `json:"oneShotOneKills,omitempty"`

	// penetration kills
	PenetrationKills float64 `json:"penetrationKills,omitempty"`

	// pickups
	Pickups float64 `json:"pickups,omitempty"`

	// pistol headshots
	PistolHeadshots float64 `json:"pistolHeadshots,omitempty"`

	// pistol kills
	PistolKills float64 `json:"pistolKills,omitempty"`

	// pistol peaths
	PistolPeaths float64 `json:"pistolPeaths,omitempty"`

	// point blank kills
	PointBlankKills float64 `json:"pointBlankKills,omitempty"`

	// proximity mine kills
	ProximityMineKills float64 `json:"proximityMineKills,omitempty"`

	// recon drone marks
	ReconDroneMarks float64 `json:"reconDroneMarks,omitempty"`

	// reloads
	Reloads float64 `json:"reloads,omitempty"`

	// returns
	Returns float64 `json:"returns,omitempty"`

	// revenge kills
	RevengeKills float64 `json:"revengeKills,omitempty"`

	// riot shield damage absorbed
	RiotShieldDamageAbsorbed float64 `json:"riotShieldDamageAbsorbed,omitempty"`

	// semtex kills
	SemtexKills float64 `json:"semtexKills,omitempty"`

	// setbacks
	Setbacks float64 `json:"setbacks,omitempty"`

	// shortest life
	ShortestLife float64 `json:"shortestLife,omitempty"`

	// shotgun deaths
	ShotgunDeaths float64 `json:"shotgunDeaths,omitempty"`

	// shotgun headshots
	ShotgunHeadshots float64 `json:"shotgunHeadshots,omitempty"`

	// shotgun kills
	ShotgunKills float64 `json:"shotgunKills,omitempty"`

	// shots fired
	ShotsFired float64 `json:"shotsFired,omitempty"`

	// skipped killcams
	SkippedKillcams float64 `json:"skippedKillcams,omitempty"`

	// smg deaths
	SmgDeaths float64 `json:"smgDeaths,omitempty"`

	// smg headshots
	SmgHeadshots float64 `json:"smgHeadshots,omitempty"`

	// smg kills
	SmgKills float64 `json:"smgKills,omitempty"`

	// smokes used
	SmokesUsed float64 `json:"smokesUsed,omitempty"`

	// snapshot hits
	SnapshotHits float64 `json:"snapshotHits,omitempty"`

	// sniper deaths
	SniperDeaths float64 `json:"sniperDeaths,omitempty"`

	// sniper headshots
	SniperHeadshots float64 `json:"sniperHeadshots,omitempty"`

	// sniper kills
	SniperKills float64 `json:"sniperKills,omitempty"`

	// spawn select base
	SpawnSelectBase float64 `json:"spawnSelectBase,omitempty"`

	// spawn select flag
	SpawnSelectFlag float64 `json:"spawnSelectFlag,omitempty"`

	// spawn select squad
	SpawnSelectSquad float64 `json:"spawnSelectSquad,omitempty"`

	// spawn select vehicle
	SpawnSelectVehicle float64 `json:"spawnSelectVehicle,omitempty"`

	// stim damage healed
	StimDamageHealed float64 `json:"stimDamageHealed,omitempty"`

	// stopping power kills
	StoppingPowerKills float64 `json:"stoppingPowerKills,omitempty"`

	// stun hits
	StunHits float64 `json:"stunHits,omitempty"`

	// suicides
	Suicides float64 `json:"suicides,omitempty"`

	// survivor kills
	SurvivorKills float64 `json:"survivorKills,omitempty"`

	// tactical insertion spawns
	TacticalInsertionSpawns float64 `json:"tacticalInsertionSpawns,omitempty"`

	// tags captured
	TagsCaptured float64 `json:"tagsCaptured,omitempty"`

	// tags denied
	TagsDenied float64 `json:"tagsDenied,omitempty"`

	// tags largest bank
	TagsLargestBank float64 `json:"tagsLargestBank,omitempty"`

	// tags mega banked
	TagsMegaBanked float64 `json:"tagsMegaBanked,omitempty"`

	// thermite kills
	ThermiteKills float64 `json:"thermiteKills,omitempty"`

	// throwing knife kills
	ThrowingKnifeKills float64 `json:"throwingKnifeKills,omitempty"`

	// time crouched
	TimeCrouched float64 `json:"timeCrouched,omitempty"`

	// time on point
	TimeOnPoint float64 `json:"timeOnPoint,omitempty"`

	// time prone
	TimeProne float64 `json:"timeProne,omitempty"`

	// time spent as driver
	TimeSpentAsDriver float64 `json:"timeSpentAsDriver,omitempty"`

	// time spent as passenger
	TimeSpentAsPassenger float64 `json:"timeSpentAsPassenger,omitempty"`

	// time watching killcams
	TimeWatchingKillcams float64 `json:"timeWatchingKillcams,omitempty"`

	// times selected as squad leader
	TimesSelectedAsSquadLeader float64 `json:"timesSelectedAsSquadLeader,omitempty"`

	// trophy system hits
	TrophySystemHits float64 `json:"trophySystemHits,omitempty"`

	// weapon pickups
	WeaponPickups float64 `json:"weaponPickups,omitempty"`

	// friend stats response data items0 lifetime accolade data properties additional properties
	FriendStatsResponseDataItems0LifetimeAccoladeDataPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// ads kills
		AdsKills float64 `json:"adsKills,omitempty"`

		// ammo box used
		AmmoBoxUsed float64 `json:"ammoBoxUsed,omitempty"`

		// ar deaths
		ArDeaths float64 `json:"arDeaths,omitempty"`

		// ar headshots
		ArHeadshots float64 `json:"arHeadshots,omitempty"`

		// ar kills
		ArKills float64 `json:"arKills,omitempty"`

		// assaults
		Assaults float64 `json:"assaults,omitempty"`

		// avenger kills
		AvengerKills float64 `json:"avengerKills,omitempty"`

		// bomb defused
		BombDefused float64 `json:"bombDefused,omitempty"`

		// bomb detonated
		BombDetonated float64 `json:"bombDetonated,omitempty"`

		// bomb planted
		BombPlanted float64 `json:"bombPlanted,omitempty"`

		// c4 kills
		C4Kills float64 `json:"c4Kills,omitempty"`

		// captures
		Captures float64 `json:"captures,omitempty"`

		// carepackages captured
		CarepackagesCaptured float64 `json:"carepackagesCaptured,omitempty"`

		// carrier kills
		CarrierKills float64 `json:"carrierKills,omitempty"`

		// class changes
		ClassChanges float64 `json:"classChanges,omitempty"`

		// claymore kills
		ClaymoreKills float64 `json:"claymoreKills,omitempty"`

		// clutch
		Clutch float64 `json:"clutch,omitempty"`

		// clutch revives
		ClutchRevives float64 `json:"clutchRevives,omitempty"`

		// comeback kills
		ComebackKills float64 `json:"comebackKills,omitempty"`

		// dead silence kills
		DeadSilenceKills float64 `json:"deadSilenceKills,omitempty"`

		// deaths from behind
		DeathsFromBehind float64 `json:"deathsFromBehind,omitempty"`

		// decoy hits
		DecoyHits float64 `json:"decoyHits,omitempty"`

		// defender kills
		DefenderKills float64 `json:"defenderKills,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// deployable cover used
		DeployableCoverUsed float64 `json:"deployableCoverUsed,omitempty"`

		// destroyed killstreaks
		DestroyedKillstreaks float64 `json:"destroyedKillstreaks,omitempty"`

		// distance traveled in vehicle
		DistanceTraveledInVehicle float64 `json:"distanceTraveledInVehicle,omitempty"`

		// distance travelled
		DistanceTravelled float64 `json:"distanceTravelled,omitempty"`

		// emp drone hits
		EmpDroneHits float64 `json:"empDroneHits,omitempty"`

		// execution kills
		ExecutionKills float64 `json:"executionKills,omitempty"`

		// explosions survived
		ExplosionsSurvived float64 `json:"explosionsSurvived,omitempty"`

		// first infected
		FirstInfected float64 `json:"firstInfected,omitempty"`

		// flashbang hits
		FlashbangHits float64 `json:"flashbangHits,omitempty"`

		// frag kills
		FragKills float64 `json:"fragKills,omitempty"`

		// gas hits
		GasHits float64 `json:"gasHits,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// higher ranked kills
		HigherRankedKills float64 `json:"higherRankedKills,omitempty"`

		// highest avg altitude
		HighestAvgAltitude float64 `json:"highestAvgAltitude,omitempty"`

		// highest multikill
		HighestMultikill float64 `json:"highestMultikill,omitempty"`

		// highest ranked kills
		HighestRankedKills float64 `json:"highestRankedKills,omitempty"`

		// hipfire kills
		HipfireKills float64 `json:"hipfireKills,omitempty"`

		// infected kills
		InfectedKills float64 `json:"infectedKills,omitempty"`

		// kill enemy team
		KillEnemyTeam float64 `json:"killEnemyTeam,omitempty"`

		// kills10 no deaths
		Kills10NoDeaths float64 `json:"kills10NoDeaths,omitempty"`

		// kills from behind
		KillsFromBehind float64 `json:"killsFromBehind,omitempty"`

		// killstreak a u a v assists
		KillstreakAUAVAssists float64 `json:"killstreakAUAVAssists,omitempty"`

		// killstreak air kills
		KillstreakAirKills float64 `json:"killstreakAirKills,omitempty"`

		// killstreak airstrike kills
		KillstreakAirstrikeKills float64 `json:"killstreakAirstrikeKills,omitempty"`

		// killstreak c u a v assists
		KillstreakCUAVAssists float64 `json:"killstreakCUAVAssists,omitempty"`

		// killstreak care package used
		KillstreakCarePackageUsed float64 `json:"killstreakCarePackageUsed,omitempty"`

		// killstreak chopper gunner kills
		KillstreakChopperGunnerKills float64 `json:"killstreakChopperGunnerKills,omitempty"`

		// killstreak chopper support kills
		KillstreakChopperSupportKills float64 `json:"killstreakChopperSupportKills,omitempty"`

		// killstreak cluser strike kills
		KillstreakCluserStrikeKills float64 `json:"killstreakCluserStrikeKills,omitempty"`

		// killstreak cruise missile kills
		KillstreakCruiseMissileKills float64 `json:"killstreakCruiseMissileKills,omitempty"`

		// killstreak emergency airdrop used
		KillstreakEmergencyAirdropUsed float64 `json:"killstreakEmergencyAirdropUsed,omitempty"`

		// killstreak ground kills
		KillstreakGroundKills float64 `json:"killstreakGroundKills,omitempty"`

		// killstreak gunship kills
		KillstreakGunshipKills float64 `json:"killstreakGunshipKills,omitempty"`

		// killstreak juggernaut kills
		KillstreakJuggernautKills float64 `json:"killstreakJuggernautKills,omitempty"`

		// killstreak kills
		KillstreakKills float64 `json:"killstreakKills,omitempty"`

		// killstreak personal u a v kills
		KillstreakPersonalUAVKills float64 `json:"killstreakPersonalUAVKills,omitempty"`

		// killstreak sentry gun kills
		KillstreakSentryGunKills float64 `json:"killstreakSentryGunKills,omitempty"`

		// killstreak shield turret kills
		KillstreakShieldTurretKills float64 `json:"killstreakShieldTurretKills,omitempty"`

		// killstreak tank kills
		KillstreakTankKills float64 `json:"killstreakTankKills,omitempty"`

		// killstreak u a v assists
		KillstreakUAVAssists float64 `json:"killstreakUAVAssists,omitempty"`

		// killstreak v t o l jet kills
		KillstreakVTOLJetKills float64 `json:"killstreakVTOLJetKills,omitempty"`

		// killstreak wheelson kills
		KillstreakWheelsonKills float64 `json:"killstreakWheelsonKills,omitempty"`

		// killstreak white phosphorous kills assists
		KillstreakWhitePhosphorousKillsAssists float64 `json:"killstreakWhitePhosphorousKillsAssists,omitempty"`

		// last survivor
		LastSurvivor float64 `json:"lastSurvivor,omitempty"`

		// launcher deaths
		LauncherDeaths float64 `json:"launcherDeaths,omitempty"`

		// launcher headshots
		LauncherHeadshots float64 `json:"launcherHeadshots,omitempty"`

		// launcher kills
		LauncherKills float64 `json:"launcherKills,omitempty"`

		// least assists
		LeastAssists float64 `json:"leastAssists,omitempty"`

		// least deaths
		LeastDeaths float64 `json:"leastDeaths,omitempty"`

		// least kills
		LeastKills float64 `json:"leastKills,omitempty"`

		// lmg deaths
		LmgDeaths float64 `json:"lmgDeaths,omitempty"`

		// lmg headshots
		LmgHeadshots float64 `json:"lmgHeadshots,omitempty"`

		// lmg kills
		LmgKills float64 `json:"lmgKills,omitempty"`

		// longest life
		LongestLife float64 `json:"longestLife,omitempty"`

		// longest streak
		LongestStreak float64 `json:"longestStreak,omitempty"`

		// longest time spent on weapon
		LongestTimeSpentOnWeapon float64 `json:"longestTimeSpentOnWeapon,omitempty"`

		// longshot kills
		LongshotKills float64 `json:"longshotKills,omitempty"`

		// lower ranked kills
		LowerRankedKills float64 `json:"lowerRankedKills,omitempty"`

		// lowest avg altitude
		LowestAvgAltitude float64 `json:"lowestAvgAltitude,omitempty"`

		// melee deaths
		MeleeDeaths float64 `json:"meleeDeaths,omitempty"`

		// melee kills
		MeleeKills float64 `json:"meleeKills,omitempty"`

		// molotov kills
		MolotovKills float64 `json:"molotovKills,omitempty"`

		// most assists
		MostAssists float64 `json:"mostAssists,omitempty"`

		// most deaths
		MostDeaths float64 `json:"mostDeaths,omitempty"`

		// most kills
		MostKills float64 `json:"mostKills,omitempty"`

		// most kills least deaths
		MostKillsLeastDeaths float64 `json:"mostKillsLeastDeaths,omitempty"`

		// most kills longest streak
		MostKillsLongestStreak float64 `json:"mostKillsLongestStreak,omitempty"`

		// most kills most headshots
		MostKillsMostHeadshots float64 `json:"mostKillsMostHeadshots,omitempty"`

		// most multikills
		MostMultikills float64 `json:"mostMultikills,omitempty"`

		// no deaths from behind
		NoDeathsFromBehind float64 `json:"noDeathsFromBehind,omitempty"`

		// no kill10 deaths
		NoKill10Deaths float64 `json:"noKill10Deaths,omitempty"`

		// no kill no death
		NoKillNoDeath float64 `json:"noKillNoDeath,omitempty"`

		// no kills with death
		NoKillsWithDeath float64 `json:"noKillsWithDeath,omitempty"`

		// one shot one kills
		OneShotOneKills float64 `json:"oneShotOneKills,omitempty"`

		// penetration kills
		PenetrationKills float64 `json:"penetrationKills,omitempty"`

		// pickups
		Pickups float64 `json:"pickups,omitempty"`

		// pistol headshots
		PistolHeadshots float64 `json:"pistolHeadshots,omitempty"`

		// pistol kills
		PistolKills float64 `json:"pistolKills,omitempty"`

		// pistol peaths
		PistolPeaths float64 `json:"pistolPeaths,omitempty"`

		// point blank kills
		PointBlankKills float64 `json:"pointBlankKills,omitempty"`

		// proximity mine kills
		ProximityMineKills float64 `json:"proximityMineKills,omitempty"`

		// recon drone marks
		ReconDroneMarks float64 `json:"reconDroneMarks,omitempty"`

		// reloads
		Reloads float64 `json:"reloads,omitempty"`

		// returns
		Returns float64 `json:"returns,omitempty"`

		// revenge kills
		RevengeKills float64 `json:"revengeKills,omitempty"`

		// riot shield damage absorbed
		RiotShieldDamageAbsorbed float64 `json:"riotShieldDamageAbsorbed,omitempty"`

		// semtex kills
		SemtexKills float64 `json:"semtexKills,omitempty"`

		// setbacks
		Setbacks float64 `json:"setbacks,omitempty"`

		// shortest life
		ShortestLife float64 `json:"shortestLife,omitempty"`

		// shotgun deaths
		ShotgunDeaths float64 `json:"shotgunDeaths,omitempty"`

		// shotgun headshots
		ShotgunHeadshots float64 `json:"shotgunHeadshots,omitempty"`

		// shotgun kills
		ShotgunKills float64 `json:"shotgunKills,omitempty"`

		// shots fired
		ShotsFired float64 `json:"shotsFired,omitempty"`

		// skipped killcams
		SkippedKillcams float64 `json:"skippedKillcams,omitempty"`

		// smg deaths
		SmgDeaths float64 `json:"smgDeaths,omitempty"`

		// smg headshots
		SmgHeadshots float64 `json:"smgHeadshots,omitempty"`

		// smg kills
		SmgKills float64 `json:"smgKills,omitempty"`

		// smokes used
		SmokesUsed float64 `json:"smokesUsed,omitempty"`

		// snapshot hits
		SnapshotHits float64 `json:"snapshotHits,omitempty"`

		// sniper deaths
		SniperDeaths float64 `json:"sniperDeaths,omitempty"`

		// sniper headshots
		SniperHeadshots float64 `json:"sniperHeadshots,omitempty"`

		// sniper kills
		SniperKills float64 `json:"sniperKills,omitempty"`

		// spawn select base
		SpawnSelectBase float64 `json:"spawnSelectBase,omitempty"`

		// spawn select flag
		SpawnSelectFlag float64 `json:"spawnSelectFlag,omitempty"`

		// spawn select squad
		SpawnSelectSquad float64 `json:"spawnSelectSquad,omitempty"`

		// spawn select vehicle
		SpawnSelectVehicle float64 `json:"spawnSelectVehicle,omitempty"`

		// stim damage healed
		StimDamageHealed float64 `json:"stimDamageHealed,omitempty"`

		// stopping power kills
		StoppingPowerKills float64 `json:"stoppingPowerKills,omitempty"`

		// stun hits
		StunHits float64 `json:"stunHits,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// survivor kills
		SurvivorKills float64 `json:"survivorKills,omitempty"`

		// tactical insertion spawns
		TacticalInsertionSpawns float64 `json:"tacticalInsertionSpawns,omitempty"`

		// tags captured
		TagsCaptured float64 `json:"tagsCaptured,omitempty"`

		// tags denied
		TagsDenied float64 `json:"tagsDenied,omitempty"`

		// tags largest bank
		TagsLargestBank float64 `json:"tagsLargestBank,omitempty"`

		// tags mega banked
		TagsMegaBanked float64 `json:"tagsMegaBanked,omitempty"`

		// thermite kills
		ThermiteKills float64 `json:"thermiteKills,omitempty"`

		// throwing knife kills
		ThrowingKnifeKills float64 `json:"throwingKnifeKills,omitempty"`

		// time crouched
		TimeCrouched float64 `json:"timeCrouched,omitempty"`

		// time on point
		TimeOnPoint float64 `json:"timeOnPoint,omitempty"`

		// time prone
		TimeProne float64 `json:"timeProne,omitempty"`

		// time spent as driver
		TimeSpentAsDriver float64 `json:"timeSpentAsDriver,omitempty"`

		// time spent as passenger
		TimeSpentAsPassenger float64 `json:"timeSpentAsPassenger,omitempty"`

		// time watching killcams
		TimeWatchingKillcams float64 `json:"timeWatchingKillcams,omitempty"`

		// times selected as squad leader
		TimesSelectedAsSquadLeader float64 `json:"timesSelectedAsSquadLeader,omitempty"`

		// trophy system hits
		TrophySystemHits float64 `json:"trophySystemHits,omitempty"`

		// weapon pickups
		WeaponPickups float64 `json:"weaponPickups,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeAccoladeDataProperties

	rcv.AdsKills = stage1.AdsKills
	rcv.AmmoBoxUsed = stage1.AmmoBoxUsed
	rcv.ArDeaths = stage1.ArDeaths
	rcv.ArHeadshots = stage1.ArHeadshots
	rcv.ArKills = stage1.ArKills
	rcv.Assaults = stage1.Assaults
	rcv.AvengerKills = stage1.AvengerKills
	rcv.BombDefused = stage1.BombDefused
	rcv.BombDetonated = stage1.BombDetonated
	rcv.BombPlanted = stage1.BombPlanted
	rcv.C4Kills = stage1.C4Kills
	rcv.Captures = stage1.Captures
	rcv.CarepackagesCaptured = stage1.CarepackagesCaptured
	rcv.CarrierKills = stage1.CarrierKills
	rcv.ClassChanges = stage1.ClassChanges
	rcv.ClaymoreKills = stage1.ClaymoreKills
	rcv.Clutch = stage1.Clutch
	rcv.ClutchRevives = stage1.ClutchRevives
	rcv.ComebackKills = stage1.ComebackKills
	rcv.DeadSilenceKills = stage1.DeadSilenceKills
	rcv.DeathsFromBehind = stage1.DeathsFromBehind
	rcv.DecoyHits = stage1.DecoyHits
	rcv.DefenderKills = stage1.DefenderKills
	rcv.Defends = stage1.Defends
	rcv.DeployableCoverUsed = stage1.DeployableCoverUsed
	rcv.DestroyedKillstreaks = stage1.DestroyedKillstreaks
	rcv.DistanceTraveledInVehicle = stage1.DistanceTraveledInVehicle
	rcv.DistanceTravelled = stage1.DistanceTravelled
	rcv.EmpDroneHits = stage1.EmpDroneHits
	rcv.ExecutionKills = stage1.ExecutionKills
	rcv.ExplosionsSurvived = stage1.ExplosionsSurvived
	rcv.FirstInfected = stage1.FirstInfected
	rcv.FlashbangHits = stage1.FlashbangHits
	rcv.FragKills = stage1.FragKills
	rcv.GasHits = stage1.GasHits
	rcv.Headshots = stage1.Headshots
	rcv.HigherRankedKills = stage1.HigherRankedKills
	rcv.HighestAvgAltitude = stage1.HighestAvgAltitude
	rcv.HighestMultikill = stage1.HighestMultikill
	rcv.HighestRankedKills = stage1.HighestRankedKills
	rcv.HipfireKills = stage1.HipfireKills
	rcv.InfectedKills = stage1.InfectedKills
	rcv.KillEnemyTeam = stage1.KillEnemyTeam
	rcv.Kills10NoDeaths = stage1.Kills10NoDeaths
	rcv.KillsFromBehind = stage1.KillsFromBehind
	rcv.KillstreakAUAVAssists = stage1.KillstreakAUAVAssists
	rcv.KillstreakAirKills = stage1.KillstreakAirKills
	rcv.KillstreakAirstrikeKills = stage1.KillstreakAirstrikeKills
	rcv.KillstreakCUAVAssists = stage1.KillstreakCUAVAssists
	rcv.KillstreakCarePackageUsed = stage1.KillstreakCarePackageUsed
	rcv.KillstreakChopperGunnerKills = stage1.KillstreakChopperGunnerKills
	rcv.KillstreakChopperSupportKills = stage1.KillstreakChopperSupportKills
	rcv.KillstreakCluserStrikeKills = stage1.KillstreakCluserStrikeKills
	rcv.KillstreakCruiseMissileKills = stage1.KillstreakCruiseMissileKills
	rcv.KillstreakEmergencyAirdropUsed = stage1.KillstreakEmergencyAirdropUsed
	rcv.KillstreakGroundKills = stage1.KillstreakGroundKills
	rcv.KillstreakGunshipKills = stage1.KillstreakGunshipKills
	rcv.KillstreakJuggernautKills = stage1.KillstreakJuggernautKills
	rcv.KillstreakKills = stage1.KillstreakKills
	rcv.KillstreakPersonalUAVKills = stage1.KillstreakPersonalUAVKills
	rcv.KillstreakSentryGunKills = stage1.KillstreakSentryGunKills
	rcv.KillstreakShieldTurretKills = stage1.KillstreakShieldTurretKills
	rcv.KillstreakTankKills = stage1.KillstreakTankKills
	rcv.KillstreakUAVAssists = stage1.KillstreakUAVAssists
	rcv.KillstreakVTOLJetKills = stage1.KillstreakVTOLJetKills
	rcv.KillstreakWheelsonKills = stage1.KillstreakWheelsonKills
	rcv.KillstreakWhitePhosphorousKillsAssists = stage1.KillstreakWhitePhosphorousKillsAssists
	rcv.LastSurvivor = stage1.LastSurvivor
	rcv.LauncherDeaths = stage1.LauncherDeaths
	rcv.LauncherHeadshots = stage1.LauncherHeadshots
	rcv.LauncherKills = stage1.LauncherKills
	rcv.LeastAssists = stage1.LeastAssists
	rcv.LeastDeaths = stage1.LeastDeaths
	rcv.LeastKills = stage1.LeastKills
	rcv.LmgDeaths = stage1.LmgDeaths
	rcv.LmgHeadshots = stage1.LmgHeadshots
	rcv.LmgKills = stage1.LmgKills
	rcv.LongestLife = stage1.LongestLife
	rcv.LongestStreak = stage1.LongestStreak
	rcv.LongestTimeSpentOnWeapon = stage1.LongestTimeSpentOnWeapon
	rcv.LongshotKills = stage1.LongshotKills
	rcv.LowerRankedKills = stage1.LowerRankedKills
	rcv.LowestAvgAltitude = stage1.LowestAvgAltitude
	rcv.MeleeDeaths = stage1.MeleeDeaths
	rcv.MeleeKills = stage1.MeleeKills
	rcv.MolotovKills = stage1.MolotovKills
	rcv.MostAssists = stage1.MostAssists
	rcv.MostDeaths = stage1.MostDeaths
	rcv.MostKills = stage1.MostKills
	rcv.MostKillsLeastDeaths = stage1.MostKillsLeastDeaths
	rcv.MostKillsLongestStreak = stage1.MostKillsLongestStreak
	rcv.MostKillsMostHeadshots = stage1.MostKillsMostHeadshots
	rcv.MostMultikills = stage1.MostMultikills
	rcv.NoDeathsFromBehind = stage1.NoDeathsFromBehind
	rcv.NoKill10Deaths = stage1.NoKill10Deaths
	rcv.NoKillNoDeath = stage1.NoKillNoDeath
	rcv.NoKillsWithDeath = stage1.NoKillsWithDeath
	rcv.OneShotOneKills = stage1.OneShotOneKills
	rcv.PenetrationKills = stage1.PenetrationKills
	rcv.Pickups = stage1.Pickups
	rcv.PistolHeadshots = stage1.PistolHeadshots
	rcv.PistolKills = stage1.PistolKills
	rcv.PistolPeaths = stage1.PistolPeaths
	rcv.PointBlankKills = stage1.PointBlankKills
	rcv.ProximityMineKills = stage1.ProximityMineKills
	rcv.ReconDroneMarks = stage1.ReconDroneMarks
	rcv.Reloads = stage1.Reloads
	rcv.Returns = stage1.Returns
	rcv.RevengeKills = stage1.RevengeKills
	rcv.RiotShieldDamageAbsorbed = stage1.RiotShieldDamageAbsorbed
	rcv.SemtexKills = stage1.SemtexKills
	rcv.Setbacks = stage1.Setbacks
	rcv.ShortestLife = stage1.ShortestLife
	rcv.ShotgunDeaths = stage1.ShotgunDeaths
	rcv.ShotgunHeadshots = stage1.ShotgunHeadshots
	rcv.ShotgunKills = stage1.ShotgunKills
	rcv.ShotsFired = stage1.ShotsFired
	rcv.SkippedKillcams = stage1.SkippedKillcams
	rcv.SmgDeaths = stage1.SmgDeaths
	rcv.SmgHeadshots = stage1.SmgHeadshots
	rcv.SmgKills = stage1.SmgKills
	rcv.SmokesUsed = stage1.SmokesUsed
	rcv.SnapshotHits = stage1.SnapshotHits
	rcv.SniperDeaths = stage1.SniperDeaths
	rcv.SniperHeadshots = stage1.SniperHeadshots
	rcv.SniperKills = stage1.SniperKills
	rcv.SpawnSelectBase = stage1.SpawnSelectBase
	rcv.SpawnSelectFlag = stage1.SpawnSelectFlag
	rcv.SpawnSelectSquad = stage1.SpawnSelectSquad
	rcv.SpawnSelectVehicle = stage1.SpawnSelectVehicle
	rcv.StimDamageHealed = stage1.StimDamageHealed
	rcv.StoppingPowerKills = stage1.StoppingPowerKills
	rcv.StunHits = stage1.StunHits
	rcv.Suicides = stage1.Suicides
	rcv.SurvivorKills = stage1.SurvivorKills
	rcv.TacticalInsertionSpawns = stage1.TacticalInsertionSpawns
	rcv.TagsCaptured = stage1.TagsCaptured
	rcv.TagsDenied = stage1.TagsDenied
	rcv.TagsLargestBank = stage1.TagsLargestBank
	rcv.TagsMegaBanked = stage1.TagsMegaBanked
	rcv.ThermiteKills = stage1.ThermiteKills
	rcv.ThrowingKnifeKills = stage1.ThrowingKnifeKills
	rcv.TimeCrouched = stage1.TimeCrouched
	rcv.TimeOnPoint = stage1.TimeOnPoint
	rcv.TimeProne = stage1.TimeProne
	rcv.TimeSpentAsDriver = stage1.TimeSpentAsDriver
	rcv.TimeSpentAsPassenger = stage1.TimeSpentAsPassenger
	rcv.TimeWatchingKillcams = stage1.TimeWatchingKillcams
	rcv.TimesSelectedAsSquadLeader = stage1.TimesSelectedAsSquadLeader
	rcv.TrophySystemHits = stage1.TrophySystemHits
	rcv.WeaponPickups = stage1.WeaponPickups
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "adsKills")
	delete(stage2, "ammoBoxUsed")
	delete(stage2, "arDeaths")
	delete(stage2, "arHeadshots")
	delete(stage2, "arKills")
	delete(stage2, "assaults")
	delete(stage2, "avengerKills")
	delete(stage2, "bombDefused")
	delete(stage2, "bombDetonated")
	delete(stage2, "bombPlanted")
	delete(stage2, "c4Kills")
	delete(stage2, "captures")
	delete(stage2, "carepackagesCaptured")
	delete(stage2, "carrierKills")
	delete(stage2, "classChanges")
	delete(stage2, "claymoreKills")
	delete(stage2, "clutch")
	delete(stage2, "clutchRevives")
	delete(stage2, "comebackKills")
	delete(stage2, "deadSilenceKills")
	delete(stage2, "deathsFromBehind")
	delete(stage2, "decoyHits")
	delete(stage2, "defenderKills")
	delete(stage2, "defends")
	delete(stage2, "deployableCoverUsed")
	delete(stage2, "destroyedKillstreaks")
	delete(stage2, "distanceTraveledInVehicle")
	delete(stage2, "distanceTravelled")
	delete(stage2, "empDroneHits")
	delete(stage2, "executionKills")
	delete(stage2, "explosionsSurvived")
	delete(stage2, "firstInfected")
	delete(stage2, "flashbangHits")
	delete(stage2, "fragKills")
	delete(stage2, "gasHits")
	delete(stage2, "headshots")
	delete(stage2, "higherRankedKills")
	delete(stage2, "highestAvgAltitude")
	delete(stage2, "highestMultikill")
	delete(stage2, "highestRankedKills")
	delete(stage2, "hipfireKills")
	delete(stage2, "infectedKills")
	delete(stage2, "killEnemyTeam")
	delete(stage2, "kills10NoDeaths")
	delete(stage2, "killsFromBehind")
	delete(stage2, "killstreakAUAVAssists")
	delete(stage2, "killstreakAirKills")
	delete(stage2, "killstreakAirstrikeKills")
	delete(stage2, "killstreakCUAVAssists")
	delete(stage2, "killstreakCarePackageUsed")
	delete(stage2, "killstreakChopperGunnerKills")
	delete(stage2, "killstreakChopperSupportKills")
	delete(stage2, "killstreakCluserStrikeKills")
	delete(stage2, "killstreakCruiseMissileKills")
	delete(stage2, "killstreakEmergencyAirdropUsed")
	delete(stage2, "killstreakGroundKills")
	delete(stage2, "killstreakGunshipKills")
	delete(stage2, "killstreakJuggernautKills")
	delete(stage2, "killstreakKills")
	delete(stage2, "killstreakPersonalUAVKills")
	delete(stage2, "killstreakSentryGunKills")
	delete(stage2, "killstreakShieldTurretKills")
	delete(stage2, "killstreakTankKills")
	delete(stage2, "killstreakUAVAssists")
	delete(stage2, "killstreakVTOLJetKills")
	delete(stage2, "killstreakWheelsonKills")
	delete(stage2, "killstreakWhitePhosphorousKillsAssists")
	delete(stage2, "lastSurvivor")
	delete(stage2, "launcherDeaths")
	delete(stage2, "launcherHeadshots")
	delete(stage2, "launcherKills")
	delete(stage2, "leastAssists")
	delete(stage2, "leastDeaths")
	delete(stage2, "leastKills")
	delete(stage2, "lmgDeaths")
	delete(stage2, "lmgHeadshots")
	delete(stage2, "lmgKills")
	delete(stage2, "longestLife")
	delete(stage2, "longestStreak")
	delete(stage2, "longestTimeSpentOnWeapon")
	delete(stage2, "longshotKills")
	delete(stage2, "lowerRankedKills")
	delete(stage2, "lowestAvgAltitude")
	delete(stage2, "meleeDeaths")
	delete(stage2, "meleeKills")
	delete(stage2, "molotovKills")
	delete(stage2, "mostAssists")
	delete(stage2, "mostDeaths")
	delete(stage2, "mostKills")
	delete(stage2, "mostKillsLeastDeaths")
	delete(stage2, "mostKillsLongestStreak")
	delete(stage2, "mostKillsMostHeadshots")
	delete(stage2, "mostMultikills")
	delete(stage2, "noDeathsFromBehind")
	delete(stage2, "noKill10Deaths")
	delete(stage2, "noKillNoDeath")
	delete(stage2, "noKillsWithDeath")
	delete(stage2, "oneShotOneKills")
	delete(stage2, "penetrationKills")
	delete(stage2, "pickups")
	delete(stage2, "pistolHeadshots")
	delete(stage2, "pistolKills")
	delete(stage2, "pistolPeaths")
	delete(stage2, "pointBlankKills")
	delete(stage2, "proximityMineKills")
	delete(stage2, "reconDroneMarks")
	delete(stage2, "reloads")
	delete(stage2, "returns")
	delete(stage2, "revengeKills")
	delete(stage2, "riotShieldDamageAbsorbed")
	delete(stage2, "semtexKills")
	delete(stage2, "setbacks")
	delete(stage2, "shortestLife")
	delete(stage2, "shotgunDeaths")
	delete(stage2, "shotgunHeadshots")
	delete(stage2, "shotgunKills")
	delete(stage2, "shotsFired")
	delete(stage2, "skippedKillcams")
	delete(stage2, "smgDeaths")
	delete(stage2, "smgHeadshots")
	delete(stage2, "smgKills")
	delete(stage2, "smokesUsed")
	delete(stage2, "snapshotHits")
	delete(stage2, "sniperDeaths")
	delete(stage2, "sniperHeadshots")
	delete(stage2, "sniperKills")
	delete(stage2, "spawnSelectBase")
	delete(stage2, "spawnSelectFlag")
	delete(stage2, "spawnSelectSquad")
	delete(stage2, "spawnSelectVehicle")
	delete(stage2, "stimDamageHealed")
	delete(stage2, "stoppingPowerKills")
	delete(stage2, "stunHits")
	delete(stage2, "suicides")
	delete(stage2, "survivorKills")
	delete(stage2, "tacticalInsertionSpawns")
	delete(stage2, "tagsCaptured")
	delete(stage2, "tagsDenied")
	delete(stage2, "tagsLargestBank")
	delete(stage2, "tagsMegaBanked")
	delete(stage2, "thermiteKills")
	delete(stage2, "throwingKnifeKills")
	delete(stage2, "timeCrouched")
	delete(stage2, "timeOnPoint")
	delete(stage2, "timeProne")
	delete(stage2, "timeSpentAsDriver")
	delete(stage2, "timeSpentAsPassenger")
	delete(stage2, "timeWatchingKillcams")
	delete(stage2, "timesSelectedAsSquadLeader")
	delete(stage2, "trophySystemHits")
	delete(stage2, "weaponPickups")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeAccoladeDataPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeAccoladeDataProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// ads kills
		AdsKills float64 `json:"adsKills,omitempty"`

		// ammo box used
		AmmoBoxUsed float64 `json:"ammoBoxUsed,omitempty"`

		// ar deaths
		ArDeaths float64 `json:"arDeaths,omitempty"`

		// ar headshots
		ArHeadshots float64 `json:"arHeadshots,omitempty"`

		// ar kills
		ArKills float64 `json:"arKills,omitempty"`

		// assaults
		Assaults float64 `json:"assaults,omitempty"`

		// avenger kills
		AvengerKills float64 `json:"avengerKills,omitempty"`

		// bomb defused
		BombDefused float64 `json:"bombDefused,omitempty"`

		// bomb detonated
		BombDetonated float64 `json:"bombDetonated,omitempty"`

		// bomb planted
		BombPlanted float64 `json:"bombPlanted,omitempty"`

		// c4 kills
		C4Kills float64 `json:"c4Kills,omitempty"`

		// captures
		Captures float64 `json:"captures,omitempty"`

		// carepackages captured
		CarepackagesCaptured float64 `json:"carepackagesCaptured,omitempty"`

		// carrier kills
		CarrierKills float64 `json:"carrierKills,omitempty"`

		// class changes
		ClassChanges float64 `json:"classChanges,omitempty"`

		// claymore kills
		ClaymoreKills float64 `json:"claymoreKills,omitempty"`

		// clutch
		Clutch float64 `json:"clutch,omitempty"`

		// clutch revives
		ClutchRevives float64 `json:"clutchRevives,omitempty"`

		// comeback kills
		ComebackKills float64 `json:"comebackKills,omitempty"`

		// dead silence kills
		DeadSilenceKills float64 `json:"deadSilenceKills,omitempty"`

		// deaths from behind
		DeathsFromBehind float64 `json:"deathsFromBehind,omitempty"`

		// decoy hits
		DecoyHits float64 `json:"decoyHits,omitempty"`

		// defender kills
		DefenderKills float64 `json:"defenderKills,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// deployable cover used
		DeployableCoverUsed float64 `json:"deployableCoverUsed,omitempty"`

		// destroyed killstreaks
		DestroyedKillstreaks float64 `json:"destroyedKillstreaks,omitempty"`

		// distance traveled in vehicle
		DistanceTraveledInVehicle float64 `json:"distanceTraveledInVehicle,omitempty"`

		// distance travelled
		DistanceTravelled float64 `json:"distanceTravelled,omitempty"`

		// emp drone hits
		EmpDroneHits float64 `json:"empDroneHits,omitempty"`

		// execution kills
		ExecutionKills float64 `json:"executionKills,omitempty"`

		// explosions survived
		ExplosionsSurvived float64 `json:"explosionsSurvived,omitempty"`

		// first infected
		FirstInfected float64 `json:"firstInfected,omitempty"`

		// flashbang hits
		FlashbangHits float64 `json:"flashbangHits,omitempty"`

		// frag kills
		FragKills float64 `json:"fragKills,omitempty"`

		// gas hits
		GasHits float64 `json:"gasHits,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// higher ranked kills
		HigherRankedKills float64 `json:"higherRankedKills,omitempty"`

		// highest avg altitude
		HighestAvgAltitude float64 `json:"highestAvgAltitude,omitempty"`

		// highest multikill
		HighestMultikill float64 `json:"highestMultikill,omitempty"`

		// highest ranked kills
		HighestRankedKills float64 `json:"highestRankedKills,omitempty"`

		// hipfire kills
		HipfireKills float64 `json:"hipfireKills,omitempty"`

		// infected kills
		InfectedKills float64 `json:"infectedKills,omitempty"`

		// kill enemy team
		KillEnemyTeam float64 `json:"killEnemyTeam,omitempty"`

		// kills10 no deaths
		Kills10NoDeaths float64 `json:"kills10NoDeaths,omitempty"`

		// kills from behind
		KillsFromBehind float64 `json:"killsFromBehind,omitempty"`

		// killstreak a u a v assists
		KillstreakAUAVAssists float64 `json:"killstreakAUAVAssists,omitempty"`

		// killstreak air kills
		KillstreakAirKills float64 `json:"killstreakAirKills,omitempty"`

		// killstreak airstrike kills
		KillstreakAirstrikeKills float64 `json:"killstreakAirstrikeKills,omitempty"`

		// killstreak c u a v assists
		KillstreakCUAVAssists float64 `json:"killstreakCUAVAssists,omitempty"`

		// killstreak care package used
		KillstreakCarePackageUsed float64 `json:"killstreakCarePackageUsed,omitempty"`

		// killstreak chopper gunner kills
		KillstreakChopperGunnerKills float64 `json:"killstreakChopperGunnerKills,omitempty"`

		// killstreak chopper support kills
		KillstreakChopperSupportKills float64 `json:"killstreakChopperSupportKills,omitempty"`

		// killstreak cluser strike kills
		KillstreakCluserStrikeKills float64 `json:"killstreakCluserStrikeKills,omitempty"`

		// killstreak cruise missile kills
		KillstreakCruiseMissileKills float64 `json:"killstreakCruiseMissileKills,omitempty"`

		// killstreak emergency airdrop used
		KillstreakEmergencyAirdropUsed float64 `json:"killstreakEmergencyAirdropUsed,omitempty"`

		// killstreak ground kills
		KillstreakGroundKills float64 `json:"killstreakGroundKills,omitempty"`

		// killstreak gunship kills
		KillstreakGunshipKills float64 `json:"killstreakGunshipKills,omitempty"`

		// killstreak juggernaut kills
		KillstreakJuggernautKills float64 `json:"killstreakJuggernautKills,omitempty"`

		// killstreak kills
		KillstreakKills float64 `json:"killstreakKills,omitempty"`

		// killstreak personal u a v kills
		KillstreakPersonalUAVKills float64 `json:"killstreakPersonalUAVKills,omitempty"`

		// killstreak sentry gun kills
		KillstreakSentryGunKills float64 `json:"killstreakSentryGunKills,omitempty"`

		// killstreak shield turret kills
		KillstreakShieldTurretKills float64 `json:"killstreakShieldTurretKills,omitempty"`

		// killstreak tank kills
		KillstreakTankKills float64 `json:"killstreakTankKills,omitempty"`

		// killstreak u a v assists
		KillstreakUAVAssists float64 `json:"killstreakUAVAssists,omitempty"`

		// killstreak v t o l jet kills
		KillstreakVTOLJetKills float64 `json:"killstreakVTOLJetKills,omitempty"`

		// killstreak wheelson kills
		KillstreakWheelsonKills float64 `json:"killstreakWheelsonKills,omitempty"`

		// killstreak white phosphorous kills assists
		KillstreakWhitePhosphorousKillsAssists float64 `json:"killstreakWhitePhosphorousKillsAssists,omitempty"`

		// last survivor
		LastSurvivor float64 `json:"lastSurvivor,omitempty"`

		// launcher deaths
		LauncherDeaths float64 `json:"launcherDeaths,omitempty"`

		// launcher headshots
		LauncherHeadshots float64 `json:"launcherHeadshots,omitempty"`

		// launcher kills
		LauncherKills float64 `json:"launcherKills,omitempty"`

		// least assists
		LeastAssists float64 `json:"leastAssists,omitempty"`

		// least deaths
		LeastDeaths float64 `json:"leastDeaths,omitempty"`

		// least kills
		LeastKills float64 `json:"leastKills,omitempty"`

		// lmg deaths
		LmgDeaths float64 `json:"lmgDeaths,omitempty"`

		// lmg headshots
		LmgHeadshots float64 `json:"lmgHeadshots,omitempty"`

		// lmg kills
		LmgKills float64 `json:"lmgKills,omitempty"`

		// longest life
		LongestLife float64 `json:"longestLife,omitempty"`

		// longest streak
		LongestStreak float64 `json:"longestStreak,omitempty"`

		// longest time spent on weapon
		LongestTimeSpentOnWeapon float64 `json:"longestTimeSpentOnWeapon,omitempty"`

		// longshot kills
		LongshotKills float64 `json:"longshotKills,omitempty"`

		// lower ranked kills
		LowerRankedKills float64 `json:"lowerRankedKills,omitempty"`

		// lowest avg altitude
		LowestAvgAltitude float64 `json:"lowestAvgAltitude,omitempty"`

		// melee deaths
		MeleeDeaths float64 `json:"meleeDeaths,omitempty"`

		// melee kills
		MeleeKills float64 `json:"meleeKills,omitempty"`

		// molotov kills
		MolotovKills float64 `json:"molotovKills,omitempty"`

		// most assists
		MostAssists float64 `json:"mostAssists,omitempty"`

		// most deaths
		MostDeaths float64 `json:"mostDeaths,omitempty"`

		// most kills
		MostKills float64 `json:"mostKills,omitempty"`

		// most kills least deaths
		MostKillsLeastDeaths float64 `json:"mostKillsLeastDeaths,omitempty"`

		// most kills longest streak
		MostKillsLongestStreak float64 `json:"mostKillsLongestStreak,omitempty"`

		// most kills most headshots
		MostKillsMostHeadshots float64 `json:"mostKillsMostHeadshots,omitempty"`

		// most multikills
		MostMultikills float64 `json:"mostMultikills,omitempty"`

		// no deaths from behind
		NoDeathsFromBehind float64 `json:"noDeathsFromBehind,omitempty"`

		// no kill10 deaths
		NoKill10Deaths float64 `json:"noKill10Deaths,omitempty"`

		// no kill no death
		NoKillNoDeath float64 `json:"noKillNoDeath,omitempty"`

		// no kills with death
		NoKillsWithDeath float64 `json:"noKillsWithDeath,omitempty"`

		// one shot one kills
		OneShotOneKills float64 `json:"oneShotOneKills,omitempty"`

		// penetration kills
		PenetrationKills float64 `json:"penetrationKills,omitempty"`

		// pickups
		Pickups float64 `json:"pickups,omitempty"`

		// pistol headshots
		PistolHeadshots float64 `json:"pistolHeadshots,omitempty"`

		// pistol kills
		PistolKills float64 `json:"pistolKills,omitempty"`

		// pistol peaths
		PistolPeaths float64 `json:"pistolPeaths,omitempty"`

		// point blank kills
		PointBlankKills float64 `json:"pointBlankKills,omitempty"`

		// proximity mine kills
		ProximityMineKills float64 `json:"proximityMineKills,omitempty"`

		// recon drone marks
		ReconDroneMarks float64 `json:"reconDroneMarks,omitempty"`

		// reloads
		Reloads float64 `json:"reloads,omitempty"`

		// returns
		Returns float64 `json:"returns,omitempty"`

		// revenge kills
		RevengeKills float64 `json:"revengeKills,omitempty"`

		// riot shield damage absorbed
		RiotShieldDamageAbsorbed float64 `json:"riotShieldDamageAbsorbed,omitempty"`

		// semtex kills
		SemtexKills float64 `json:"semtexKills,omitempty"`

		// setbacks
		Setbacks float64 `json:"setbacks,omitempty"`

		// shortest life
		ShortestLife float64 `json:"shortestLife,omitempty"`

		// shotgun deaths
		ShotgunDeaths float64 `json:"shotgunDeaths,omitempty"`

		// shotgun headshots
		ShotgunHeadshots float64 `json:"shotgunHeadshots,omitempty"`

		// shotgun kills
		ShotgunKills float64 `json:"shotgunKills,omitempty"`

		// shots fired
		ShotsFired float64 `json:"shotsFired,omitempty"`

		// skipped killcams
		SkippedKillcams float64 `json:"skippedKillcams,omitempty"`

		// smg deaths
		SmgDeaths float64 `json:"smgDeaths,omitempty"`

		// smg headshots
		SmgHeadshots float64 `json:"smgHeadshots,omitempty"`

		// smg kills
		SmgKills float64 `json:"smgKills,omitempty"`

		// smokes used
		SmokesUsed float64 `json:"smokesUsed,omitempty"`

		// snapshot hits
		SnapshotHits float64 `json:"snapshotHits,omitempty"`

		// sniper deaths
		SniperDeaths float64 `json:"sniperDeaths,omitempty"`

		// sniper headshots
		SniperHeadshots float64 `json:"sniperHeadshots,omitempty"`

		// sniper kills
		SniperKills float64 `json:"sniperKills,omitempty"`

		// spawn select base
		SpawnSelectBase float64 `json:"spawnSelectBase,omitempty"`

		// spawn select flag
		SpawnSelectFlag float64 `json:"spawnSelectFlag,omitempty"`

		// spawn select squad
		SpawnSelectSquad float64 `json:"spawnSelectSquad,omitempty"`

		// spawn select vehicle
		SpawnSelectVehicle float64 `json:"spawnSelectVehicle,omitempty"`

		// stim damage healed
		StimDamageHealed float64 `json:"stimDamageHealed,omitempty"`

		// stopping power kills
		StoppingPowerKills float64 `json:"stoppingPowerKills,omitempty"`

		// stun hits
		StunHits float64 `json:"stunHits,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// survivor kills
		SurvivorKills float64 `json:"survivorKills,omitempty"`

		// tactical insertion spawns
		TacticalInsertionSpawns float64 `json:"tacticalInsertionSpawns,omitempty"`

		// tags captured
		TagsCaptured float64 `json:"tagsCaptured,omitempty"`

		// tags denied
		TagsDenied float64 `json:"tagsDenied,omitempty"`

		// tags largest bank
		TagsLargestBank float64 `json:"tagsLargestBank,omitempty"`

		// tags mega banked
		TagsMegaBanked float64 `json:"tagsMegaBanked,omitempty"`

		// thermite kills
		ThermiteKills float64 `json:"thermiteKills,omitempty"`

		// throwing knife kills
		ThrowingKnifeKills float64 `json:"throwingKnifeKills,omitempty"`

		// time crouched
		TimeCrouched float64 `json:"timeCrouched,omitempty"`

		// time on point
		TimeOnPoint float64 `json:"timeOnPoint,omitempty"`

		// time prone
		TimeProne float64 `json:"timeProne,omitempty"`

		// time spent as driver
		TimeSpentAsDriver float64 `json:"timeSpentAsDriver,omitempty"`

		// time spent as passenger
		TimeSpentAsPassenger float64 `json:"timeSpentAsPassenger,omitempty"`

		// time watching killcams
		TimeWatchingKillcams float64 `json:"timeWatchingKillcams,omitempty"`

		// times selected as squad leader
		TimesSelectedAsSquadLeader float64 `json:"timesSelectedAsSquadLeader,omitempty"`

		// trophy system hits
		TrophySystemHits float64 `json:"trophySystemHits,omitempty"`

		// weapon pickups
		WeaponPickups float64 `json:"weaponPickups,omitempty"`
	}

	stage1.AdsKills = m.AdsKills
	stage1.AmmoBoxUsed = m.AmmoBoxUsed
	stage1.ArDeaths = m.ArDeaths
	stage1.ArHeadshots = m.ArHeadshots
	stage1.ArKills = m.ArKills
	stage1.Assaults = m.Assaults
	stage1.AvengerKills = m.AvengerKills
	stage1.BombDefused = m.BombDefused
	stage1.BombDetonated = m.BombDetonated
	stage1.BombPlanted = m.BombPlanted
	stage1.C4Kills = m.C4Kills
	stage1.Captures = m.Captures
	stage1.CarepackagesCaptured = m.CarepackagesCaptured
	stage1.CarrierKills = m.CarrierKills
	stage1.ClassChanges = m.ClassChanges
	stage1.ClaymoreKills = m.ClaymoreKills
	stage1.Clutch = m.Clutch
	stage1.ClutchRevives = m.ClutchRevives
	stage1.ComebackKills = m.ComebackKills
	stage1.DeadSilenceKills = m.DeadSilenceKills
	stage1.DeathsFromBehind = m.DeathsFromBehind
	stage1.DecoyHits = m.DecoyHits
	stage1.DefenderKills = m.DefenderKills
	stage1.Defends = m.Defends
	stage1.DeployableCoverUsed = m.DeployableCoverUsed
	stage1.DestroyedKillstreaks = m.DestroyedKillstreaks
	stage1.DistanceTraveledInVehicle = m.DistanceTraveledInVehicle
	stage1.DistanceTravelled = m.DistanceTravelled
	stage1.EmpDroneHits = m.EmpDroneHits
	stage1.ExecutionKills = m.ExecutionKills
	stage1.ExplosionsSurvived = m.ExplosionsSurvived
	stage1.FirstInfected = m.FirstInfected
	stage1.FlashbangHits = m.FlashbangHits
	stage1.FragKills = m.FragKills
	stage1.GasHits = m.GasHits
	stage1.Headshots = m.Headshots
	stage1.HigherRankedKills = m.HigherRankedKills
	stage1.HighestAvgAltitude = m.HighestAvgAltitude
	stage1.HighestMultikill = m.HighestMultikill
	stage1.HighestRankedKills = m.HighestRankedKills
	stage1.HipfireKills = m.HipfireKills
	stage1.InfectedKills = m.InfectedKills
	stage1.KillEnemyTeam = m.KillEnemyTeam
	stage1.Kills10NoDeaths = m.Kills10NoDeaths
	stage1.KillsFromBehind = m.KillsFromBehind
	stage1.KillstreakAUAVAssists = m.KillstreakAUAVAssists
	stage1.KillstreakAirKills = m.KillstreakAirKills
	stage1.KillstreakAirstrikeKills = m.KillstreakAirstrikeKills
	stage1.KillstreakCUAVAssists = m.KillstreakCUAVAssists
	stage1.KillstreakCarePackageUsed = m.KillstreakCarePackageUsed
	stage1.KillstreakChopperGunnerKills = m.KillstreakChopperGunnerKills
	stage1.KillstreakChopperSupportKills = m.KillstreakChopperSupportKills
	stage1.KillstreakCluserStrikeKills = m.KillstreakCluserStrikeKills
	stage1.KillstreakCruiseMissileKills = m.KillstreakCruiseMissileKills
	stage1.KillstreakEmergencyAirdropUsed = m.KillstreakEmergencyAirdropUsed
	stage1.KillstreakGroundKills = m.KillstreakGroundKills
	stage1.KillstreakGunshipKills = m.KillstreakGunshipKills
	stage1.KillstreakJuggernautKills = m.KillstreakJuggernautKills
	stage1.KillstreakKills = m.KillstreakKills
	stage1.KillstreakPersonalUAVKills = m.KillstreakPersonalUAVKills
	stage1.KillstreakSentryGunKills = m.KillstreakSentryGunKills
	stage1.KillstreakShieldTurretKills = m.KillstreakShieldTurretKills
	stage1.KillstreakTankKills = m.KillstreakTankKills
	stage1.KillstreakUAVAssists = m.KillstreakUAVAssists
	stage1.KillstreakVTOLJetKills = m.KillstreakVTOLJetKills
	stage1.KillstreakWheelsonKills = m.KillstreakWheelsonKills
	stage1.KillstreakWhitePhosphorousKillsAssists = m.KillstreakWhitePhosphorousKillsAssists
	stage1.LastSurvivor = m.LastSurvivor
	stage1.LauncherDeaths = m.LauncherDeaths
	stage1.LauncherHeadshots = m.LauncherHeadshots
	stage1.LauncherKills = m.LauncherKills
	stage1.LeastAssists = m.LeastAssists
	stage1.LeastDeaths = m.LeastDeaths
	stage1.LeastKills = m.LeastKills
	stage1.LmgDeaths = m.LmgDeaths
	stage1.LmgHeadshots = m.LmgHeadshots
	stage1.LmgKills = m.LmgKills
	stage1.LongestLife = m.LongestLife
	stage1.LongestStreak = m.LongestStreak
	stage1.LongestTimeSpentOnWeapon = m.LongestTimeSpentOnWeapon
	stage1.LongshotKills = m.LongshotKills
	stage1.LowerRankedKills = m.LowerRankedKills
	stage1.LowestAvgAltitude = m.LowestAvgAltitude
	stage1.MeleeDeaths = m.MeleeDeaths
	stage1.MeleeKills = m.MeleeKills
	stage1.MolotovKills = m.MolotovKills
	stage1.MostAssists = m.MostAssists
	stage1.MostDeaths = m.MostDeaths
	stage1.MostKills = m.MostKills
	stage1.MostKillsLeastDeaths = m.MostKillsLeastDeaths
	stage1.MostKillsLongestStreak = m.MostKillsLongestStreak
	stage1.MostKillsMostHeadshots = m.MostKillsMostHeadshots
	stage1.MostMultikills = m.MostMultikills
	stage1.NoDeathsFromBehind = m.NoDeathsFromBehind
	stage1.NoKill10Deaths = m.NoKill10Deaths
	stage1.NoKillNoDeath = m.NoKillNoDeath
	stage1.NoKillsWithDeath = m.NoKillsWithDeath
	stage1.OneShotOneKills = m.OneShotOneKills
	stage1.PenetrationKills = m.PenetrationKills
	stage1.Pickups = m.Pickups
	stage1.PistolHeadshots = m.PistolHeadshots
	stage1.PistolKills = m.PistolKills
	stage1.PistolPeaths = m.PistolPeaths
	stage1.PointBlankKills = m.PointBlankKills
	stage1.ProximityMineKills = m.ProximityMineKills
	stage1.ReconDroneMarks = m.ReconDroneMarks
	stage1.Reloads = m.Reloads
	stage1.Returns = m.Returns
	stage1.RevengeKills = m.RevengeKills
	stage1.RiotShieldDamageAbsorbed = m.RiotShieldDamageAbsorbed
	stage1.SemtexKills = m.SemtexKills
	stage1.Setbacks = m.Setbacks
	stage1.ShortestLife = m.ShortestLife
	stage1.ShotgunDeaths = m.ShotgunDeaths
	stage1.ShotgunHeadshots = m.ShotgunHeadshots
	stage1.ShotgunKills = m.ShotgunKills
	stage1.ShotsFired = m.ShotsFired
	stage1.SkippedKillcams = m.SkippedKillcams
	stage1.SmgDeaths = m.SmgDeaths
	stage1.SmgHeadshots = m.SmgHeadshots
	stage1.SmgKills = m.SmgKills
	stage1.SmokesUsed = m.SmokesUsed
	stage1.SnapshotHits = m.SnapshotHits
	stage1.SniperDeaths = m.SniperDeaths
	stage1.SniperHeadshots = m.SniperHeadshots
	stage1.SniperKills = m.SniperKills
	stage1.SpawnSelectBase = m.SpawnSelectBase
	stage1.SpawnSelectFlag = m.SpawnSelectFlag
	stage1.SpawnSelectSquad = m.SpawnSelectSquad
	stage1.SpawnSelectVehicle = m.SpawnSelectVehicle
	stage1.StimDamageHealed = m.StimDamageHealed
	stage1.StoppingPowerKills = m.StoppingPowerKills
	stage1.StunHits = m.StunHits
	stage1.Suicides = m.Suicides
	stage1.SurvivorKills = m.SurvivorKills
	stage1.TacticalInsertionSpawns = m.TacticalInsertionSpawns
	stage1.TagsCaptured = m.TagsCaptured
	stage1.TagsDenied = m.TagsDenied
	stage1.TagsLargestBank = m.TagsLargestBank
	stage1.TagsMegaBanked = m.TagsMegaBanked
	stage1.ThermiteKills = m.ThermiteKills
	stage1.ThrowingKnifeKills = m.ThrowingKnifeKills
	stage1.TimeCrouched = m.TimeCrouched
	stage1.TimeOnPoint = m.TimeOnPoint
	stage1.TimeProne = m.TimeProne
	stage1.TimeSpentAsDriver = m.TimeSpentAsDriver
	stage1.TimeSpentAsPassenger = m.TimeSpentAsPassenger
	stage1.TimeWatchingKillcams = m.TimeWatchingKillcams
	stage1.TimesSelectedAsSquadLeader = m.TimesSelectedAsSquadLeader
	stage1.TrophySystemHits = m.TrophySystemHits
	stage1.WeaponPickups = m.WeaponPickups

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeAccoladeDataPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeAccoladeDataPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime accolade data properties
func (m *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAccoladeDataProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeAccoladeDataProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeAll friend stats response data items0 lifetime all
//
// swagger:model FriendStatsResponseDataItems0LifetimeAll
type FriendStatsResponseDataItems0LifetimeAll struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeAllProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime all additional properties
	FriendStatsResponseDataItems0LifetimeAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeAllProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeAllProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime all
func (m *FriendStatsResponseDataItems0LifetimeAll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeAll) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "all" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAll) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeAllProperties friend stats response data items0 lifetime all properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeAllProperties
type FriendStatsResponseDataItems0LifetimeAllProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// assists
	Assists float64 `json:"assists,omitempty"`

	// best assists
	BestAssists float64 `json:"bestAssists,omitempty"`

	// best captures
	BestCaptures float64 `json:"bestCaptures,omitempty"`

	// best confirmed
	BestConfirmed float64 `json:"bestConfirmed,omitempty"`

	// best damage
	BestDamage float64 `json:"bestDamage,omitempty"`

	// best deaths
	BestDeaths float64 `json:"bestDeaths,omitempty"`

	// best defends
	BestDefends float64 `json:"bestDefends,omitempty"`

	// best defuses
	BestDefuses float64 `json:"bestDefuses,omitempty"`

	// best denied
	BestDenied float64 `json:"bestDenied,omitempty"`

	// best destructions
	BestDestructions float64 `json:"bestDestructions,omitempty"`

	// best fieldgoals
	BestFieldgoals float64 `json:"bestFieldgoals,omitempty"`

	// best k d
	BestKD float64 `json:"bestKD,omitempty"`

	// best kill chains
	BestKillChains float64 `json:"bestKillChains,omitempty"`

	// best kill streak
	BestKillStreak float64 `json:"bestKillStreak,omitempty"`

	// best kills
	BestKills float64 `json:"bestKills,omitempty"`

	// best kills as infected
	BestKillsAsInfected float64 `json:"bestKillsAsInfected,omitempty"`

	// best kills as survivor
	BestKillsAsSurvivor float64 `json:"bestKillsAsSurvivor,omitempty"`

	// best match bonus xp
	BestMatchBonusXp float64 `json:"bestMatchBonusXp,omitempty"`

	// best match xp
	BestMatchXp float64 `json:"bestMatchXp,omitempty"`

	// best medal xp
	BestMedalXp float64 `json:"bestMedalXp,omitempty"`

	// best plants
	BestPlants float64 `json:"bestPlants,omitempty"`

	// best rescues
	BestRescues float64 `json:"bestRescues,omitempty"`

	// best returns
	BestReturns float64 `json:"bestReturns,omitempty"`

	// best s p m
	BestSPM float64 `json:"bestSPM,omitempty"`

	// best score
	BestScore float64 `json:"bestScore,omitempty"`

	// best score xp
	BestScoreXp float64 `json:"bestScoreXp,omitempty"`

	// best setbacks
	BestSetbacks float64 `json:"bestSetbacks,omitempty"`

	// best sguard wave
	BestSguardWave float64 `json:"bestSguardWave,omitempty"`

	// best sguard weapon level
	BestSguardWeaponLevel float64 `json:"bestSguardWeaponLevel,omitempty"`

	// best squard crates
	BestSquardCrates float64 `json:"bestSquardCrates,omitempty"`

	// best squard kills
	BestSquardKills float64 `json:"bestSquardKills,omitempty"`

	// best squard revives
	BestSquardRevives float64 `json:"bestSquardRevives,omitempty"`

	// best stabs
	BestStabs float64 `json:"bestStabs,omitempty"`

	// best touchdowns
	BestTouchdowns float64 `json:"bestTouchdowns,omitempty"`

	// current win streak
	CurrentWinStreak float64 `json:"currentWinStreak,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// losses
	Losses float64 `json:"losses,omitempty"`

	// misses
	Misses float64 `json:"misses,omitempty"`

	// record deaths in a match
	RecordDeathsInAMatch float64 `json:"recordDeathsInAMatch,omitempty"`

	// record kill streak
	RecordKillStreak float64 `json:"recordKillStreak,omitempty"`

	// record kills in a match
	RecordKillsInAMatch float64 `json:"recordKillsInAMatch,omitempty"`

	// record longest win streak
	RecordLongestWinStreak float64 `json:"recordLongestWinStreak,omitempty"`

	// record xp in a match
	RecordXpInAMatch float64 `json:"recordXpInAMatch,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per game
	ScorePerGame float64 `json:"scorePerGame,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// suicides
	Suicides float64 `json:"suicides,omitempty"`

	// ties
	Ties float64 `json:"ties,omitempty"`

	// time played total
	TimePlayedTotal float64 `json:"timePlayedTotal,omitempty"`

	// total games played
	TotalGamesPlayed float64 `json:"totalGamesPlayed,omitempty"`

	// total shots
	TotalShots float64 `json:"totalShots,omitempty"`

	// win loss ratio
	WinLossRatio float64 `json:"winLossRatio,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// wl ratio
	WlRatio float64 `json:"wlRatio,omitempty"`

	// friend stats response data items0 lifetime all properties additional properties
	FriendStatsResponseDataItems0LifetimeAllPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeAllProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// assists
		Assists float64 `json:"assists,omitempty"`

		// best assists
		BestAssists float64 `json:"bestAssists,omitempty"`

		// best captures
		BestCaptures float64 `json:"bestCaptures,omitempty"`

		// best confirmed
		BestConfirmed float64 `json:"bestConfirmed,omitempty"`

		// best damage
		BestDamage float64 `json:"bestDamage,omitempty"`

		// best deaths
		BestDeaths float64 `json:"bestDeaths,omitempty"`

		// best defends
		BestDefends float64 `json:"bestDefends,omitempty"`

		// best defuses
		BestDefuses float64 `json:"bestDefuses,omitempty"`

		// best denied
		BestDenied float64 `json:"bestDenied,omitempty"`

		// best destructions
		BestDestructions float64 `json:"bestDestructions,omitempty"`

		// best fieldgoals
		BestFieldgoals float64 `json:"bestFieldgoals,omitempty"`

		// best k d
		BestKD float64 `json:"bestKD,omitempty"`

		// best kill chains
		BestKillChains float64 `json:"bestKillChains,omitempty"`

		// best kill streak
		BestKillStreak float64 `json:"bestKillStreak,omitempty"`

		// best kills
		BestKills float64 `json:"bestKills,omitempty"`

		// best kills as infected
		BestKillsAsInfected float64 `json:"bestKillsAsInfected,omitempty"`

		// best kills as survivor
		BestKillsAsSurvivor float64 `json:"bestKillsAsSurvivor,omitempty"`

		// best match bonus xp
		BestMatchBonusXp float64 `json:"bestMatchBonusXp,omitempty"`

		// best match xp
		BestMatchXp float64 `json:"bestMatchXp,omitempty"`

		// best medal xp
		BestMedalXp float64 `json:"bestMedalXp,omitempty"`

		// best plants
		BestPlants float64 `json:"bestPlants,omitempty"`

		// best rescues
		BestRescues float64 `json:"bestRescues,omitempty"`

		// best returns
		BestReturns float64 `json:"bestReturns,omitempty"`

		// best s p m
		BestSPM float64 `json:"bestSPM,omitempty"`

		// best score
		BestScore float64 `json:"bestScore,omitempty"`

		// best score xp
		BestScoreXp float64 `json:"bestScoreXp,omitempty"`

		// best setbacks
		BestSetbacks float64 `json:"bestSetbacks,omitempty"`

		// best sguard wave
		BestSguardWave float64 `json:"bestSguardWave,omitempty"`

		// best sguard weapon level
		BestSguardWeaponLevel float64 `json:"bestSguardWeaponLevel,omitempty"`

		// best squard crates
		BestSquardCrates float64 `json:"bestSquardCrates,omitempty"`

		// best squard kills
		BestSquardKills float64 `json:"bestSquardKills,omitempty"`

		// best squard revives
		BestSquardRevives float64 `json:"bestSquardRevives,omitempty"`

		// best stabs
		BestStabs float64 `json:"bestStabs,omitempty"`

		// best touchdowns
		BestTouchdowns float64 `json:"bestTouchdowns,omitempty"`

		// current win streak
		CurrentWinStreak float64 `json:"currentWinStreak,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// losses
		Losses float64 `json:"losses,omitempty"`

		// misses
		Misses float64 `json:"misses,omitempty"`

		// record deaths in a match
		RecordDeathsInAMatch float64 `json:"recordDeathsInAMatch,omitempty"`

		// record kill streak
		RecordKillStreak float64 `json:"recordKillStreak,omitempty"`

		// record kills in a match
		RecordKillsInAMatch float64 `json:"recordKillsInAMatch,omitempty"`

		// record longest win streak
		RecordLongestWinStreak float64 `json:"recordLongestWinStreak,omitempty"`

		// record xp in a match
		RecordXpInAMatch float64 `json:"recordXpInAMatch,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per game
		ScorePerGame float64 `json:"scorePerGame,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// ties
		Ties float64 `json:"ties,omitempty"`

		// time played total
		TimePlayedTotal float64 `json:"timePlayedTotal,omitempty"`

		// total games played
		TotalGamesPlayed float64 `json:"totalGamesPlayed,omitempty"`

		// total shots
		TotalShots float64 `json:"totalShots,omitempty"`

		// win loss ratio
		WinLossRatio float64 `json:"winLossRatio,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`

		// wl ratio
		WlRatio float64 `json:"wlRatio,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeAllProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Assists = stage1.Assists
	rcv.BestAssists = stage1.BestAssists
	rcv.BestCaptures = stage1.BestCaptures
	rcv.BestConfirmed = stage1.BestConfirmed
	rcv.BestDamage = stage1.BestDamage
	rcv.BestDeaths = stage1.BestDeaths
	rcv.BestDefends = stage1.BestDefends
	rcv.BestDefuses = stage1.BestDefuses
	rcv.BestDenied = stage1.BestDenied
	rcv.BestDestructions = stage1.BestDestructions
	rcv.BestFieldgoals = stage1.BestFieldgoals
	rcv.BestKD = stage1.BestKD
	rcv.BestKillChains = stage1.BestKillChains
	rcv.BestKillStreak = stage1.BestKillStreak
	rcv.BestKills = stage1.BestKills
	rcv.BestKillsAsInfected = stage1.BestKillsAsInfected
	rcv.BestKillsAsSurvivor = stage1.BestKillsAsSurvivor
	rcv.BestMatchBonusXp = stage1.BestMatchBonusXp
	rcv.BestMatchXp = stage1.BestMatchXp
	rcv.BestMedalXp = stage1.BestMedalXp
	rcv.BestPlants = stage1.BestPlants
	rcv.BestRescues = stage1.BestRescues
	rcv.BestReturns = stage1.BestReturns
	rcv.BestSPM = stage1.BestSPM
	rcv.BestScore = stage1.BestScore
	rcv.BestScoreXp = stage1.BestScoreXp
	rcv.BestSetbacks = stage1.BestSetbacks
	rcv.BestSguardWave = stage1.BestSguardWave
	rcv.BestSguardWeaponLevel = stage1.BestSguardWeaponLevel
	rcv.BestSquardCrates = stage1.BestSquardCrates
	rcv.BestSquardKills = stage1.BestSquardKills
	rcv.BestSquardRevives = stage1.BestSquardRevives
	rcv.BestStabs = stage1.BestStabs
	rcv.BestTouchdowns = stage1.BestTouchdowns
	rcv.CurrentWinStreak = stage1.CurrentWinStreak
	rcv.Deaths = stage1.Deaths
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Losses = stage1.Losses
	rcv.Misses = stage1.Misses
	rcv.RecordDeathsInAMatch = stage1.RecordDeathsInAMatch
	rcv.RecordKillStreak = stage1.RecordKillStreak
	rcv.RecordKillsInAMatch = stage1.RecordKillsInAMatch
	rcv.RecordLongestWinStreak = stage1.RecordLongestWinStreak
	rcv.RecordXpInAMatch = stage1.RecordXpInAMatch
	rcv.Score = stage1.Score
	rcv.ScorePerGame = stage1.ScorePerGame
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.Suicides = stage1.Suicides
	rcv.Ties = stage1.Ties
	rcv.TimePlayedTotal = stage1.TimePlayedTotal
	rcv.TotalGamesPlayed = stage1.TotalGamesPlayed
	rcv.TotalShots = stage1.TotalShots
	rcv.WinLossRatio = stage1.WinLossRatio
	rcv.Wins = stage1.Wins
	rcv.WlRatio = stage1.WlRatio
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "assists")
	delete(stage2, "bestAssists")
	delete(stage2, "bestCaptures")
	delete(stage2, "bestConfirmed")
	delete(stage2, "bestDamage")
	delete(stage2, "bestDeaths")
	delete(stage2, "bestDefends")
	delete(stage2, "bestDefuses")
	delete(stage2, "bestDenied")
	delete(stage2, "bestDestructions")
	delete(stage2, "bestFieldgoals")
	delete(stage2, "bestKD")
	delete(stage2, "bestKillChains")
	delete(stage2, "bestKillStreak")
	delete(stage2, "bestKills")
	delete(stage2, "bestKillsAsInfected")
	delete(stage2, "bestKillsAsSurvivor")
	delete(stage2, "bestMatchBonusXp")
	delete(stage2, "bestMatchXp")
	delete(stage2, "bestMedalXp")
	delete(stage2, "bestPlants")
	delete(stage2, "bestRescues")
	delete(stage2, "bestReturns")
	delete(stage2, "bestSPM")
	delete(stage2, "bestScore")
	delete(stage2, "bestScoreXp")
	delete(stage2, "bestSetbacks")
	delete(stage2, "bestSguardWave")
	delete(stage2, "bestSguardWeaponLevel")
	delete(stage2, "bestSquardCrates")
	delete(stage2, "bestSquardKills")
	delete(stage2, "bestSquardRevives")
	delete(stage2, "bestStabs")
	delete(stage2, "bestTouchdowns")
	delete(stage2, "currentWinStreak")
	delete(stage2, "deaths")
	delete(stage2, "gamesPlayed")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "losses")
	delete(stage2, "misses")
	delete(stage2, "recordDeathsInAMatch")
	delete(stage2, "recordKillStreak")
	delete(stage2, "recordKillsInAMatch")
	delete(stage2, "recordLongestWinStreak")
	delete(stage2, "recordXpInAMatch")
	delete(stage2, "score")
	delete(stage2, "scorePerGame")
	delete(stage2, "scorePerMinute")
	delete(stage2, "suicides")
	delete(stage2, "ties")
	delete(stage2, "timePlayedTotal")
	delete(stage2, "totalGamesPlayed")
	delete(stage2, "totalShots")
	delete(stage2, "winLossRatio")
	delete(stage2, "wins")
	delete(stage2, "wlRatio")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeAllPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeAllProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// assists
		Assists float64 `json:"assists,omitempty"`

		// best assists
		BestAssists float64 `json:"bestAssists,omitempty"`

		// best captures
		BestCaptures float64 `json:"bestCaptures,omitempty"`

		// best confirmed
		BestConfirmed float64 `json:"bestConfirmed,omitempty"`

		// best damage
		BestDamage float64 `json:"bestDamage,omitempty"`

		// best deaths
		BestDeaths float64 `json:"bestDeaths,omitempty"`

		// best defends
		BestDefends float64 `json:"bestDefends,omitempty"`

		// best defuses
		BestDefuses float64 `json:"bestDefuses,omitempty"`

		// best denied
		BestDenied float64 `json:"bestDenied,omitempty"`

		// best destructions
		BestDestructions float64 `json:"bestDestructions,omitempty"`

		// best fieldgoals
		BestFieldgoals float64 `json:"bestFieldgoals,omitempty"`

		// best k d
		BestKD float64 `json:"bestKD,omitempty"`

		// best kill chains
		BestKillChains float64 `json:"bestKillChains,omitempty"`

		// best kill streak
		BestKillStreak float64 `json:"bestKillStreak,omitempty"`

		// best kills
		BestKills float64 `json:"bestKills,omitempty"`

		// best kills as infected
		BestKillsAsInfected float64 `json:"bestKillsAsInfected,omitempty"`

		// best kills as survivor
		BestKillsAsSurvivor float64 `json:"bestKillsAsSurvivor,omitempty"`

		// best match bonus xp
		BestMatchBonusXp float64 `json:"bestMatchBonusXp,omitempty"`

		// best match xp
		BestMatchXp float64 `json:"bestMatchXp,omitempty"`

		// best medal xp
		BestMedalXp float64 `json:"bestMedalXp,omitempty"`

		// best plants
		BestPlants float64 `json:"bestPlants,omitempty"`

		// best rescues
		BestRescues float64 `json:"bestRescues,omitempty"`

		// best returns
		BestReturns float64 `json:"bestReturns,omitempty"`

		// best s p m
		BestSPM float64 `json:"bestSPM,omitempty"`

		// best score
		BestScore float64 `json:"bestScore,omitempty"`

		// best score xp
		BestScoreXp float64 `json:"bestScoreXp,omitempty"`

		// best setbacks
		BestSetbacks float64 `json:"bestSetbacks,omitempty"`

		// best sguard wave
		BestSguardWave float64 `json:"bestSguardWave,omitempty"`

		// best sguard weapon level
		BestSguardWeaponLevel float64 `json:"bestSguardWeaponLevel,omitempty"`

		// best squard crates
		BestSquardCrates float64 `json:"bestSquardCrates,omitempty"`

		// best squard kills
		BestSquardKills float64 `json:"bestSquardKills,omitempty"`

		// best squard revives
		BestSquardRevives float64 `json:"bestSquardRevives,omitempty"`

		// best stabs
		BestStabs float64 `json:"bestStabs,omitempty"`

		// best touchdowns
		BestTouchdowns float64 `json:"bestTouchdowns,omitempty"`

		// current win streak
		CurrentWinStreak float64 `json:"currentWinStreak,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// losses
		Losses float64 `json:"losses,omitempty"`

		// misses
		Misses float64 `json:"misses,omitempty"`

		// record deaths in a match
		RecordDeathsInAMatch float64 `json:"recordDeathsInAMatch,omitempty"`

		// record kill streak
		RecordKillStreak float64 `json:"recordKillStreak,omitempty"`

		// record kills in a match
		RecordKillsInAMatch float64 `json:"recordKillsInAMatch,omitempty"`

		// record longest win streak
		RecordLongestWinStreak float64 `json:"recordLongestWinStreak,omitempty"`

		// record xp in a match
		RecordXpInAMatch float64 `json:"recordXpInAMatch,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per game
		ScorePerGame float64 `json:"scorePerGame,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// suicides
		Suicides float64 `json:"suicides,omitempty"`

		// ties
		Ties float64 `json:"ties,omitempty"`

		// time played total
		TimePlayedTotal float64 `json:"timePlayedTotal,omitempty"`

		// total games played
		TotalGamesPlayed float64 `json:"totalGamesPlayed,omitempty"`

		// total shots
		TotalShots float64 `json:"totalShots,omitempty"`

		// win loss ratio
		WinLossRatio float64 `json:"winLossRatio,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`

		// wl ratio
		WlRatio float64 `json:"wlRatio,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Assists = m.Assists
	stage1.BestAssists = m.BestAssists
	stage1.BestCaptures = m.BestCaptures
	stage1.BestConfirmed = m.BestConfirmed
	stage1.BestDamage = m.BestDamage
	stage1.BestDeaths = m.BestDeaths
	stage1.BestDefends = m.BestDefends
	stage1.BestDefuses = m.BestDefuses
	stage1.BestDenied = m.BestDenied
	stage1.BestDestructions = m.BestDestructions
	stage1.BestFieldgoals = m.BestFieldgoals
	stage1.BestKD = m.BestKD
	stage1.BestKillChains = m.BestKillChains
	stage1.BestKillStreak = m.BestKillStreak
	stage1.BestKills = m.BestKills
	stage1.BestKillsAsInfected = m.BestKillsAsInfected
	stage1.BestKillsAsSurvivor = m.BestKillsAsSurvivor
	stage1.BestMatchBonusXp = m.BestMatchBonusXp
	stage1.BestMatchXp = m.BestMatchXp
	stage1.BestMedalXp = m.BestMedalXp
	stage1.BestPlants = m.BestPlants
	stage1.BestRescues = m.BestRescues
	stage1.BestReturns = m.BestReturns
	stage1.BestSPM = m.BestSPM
	stage1.BestScore = m.BestScore
	stage1.BestScoreXp = m.BestScoreXp
	stage1.BestSetbacks = m.BestSetbacks
	stage1.BestSguardWave = m.BestSguardWave
	stage1.BestSguardWeaponLevel = m.BestSguardWeaponLevel
	stage1.BestSquardCrates = m.BestSquardCrates
	stage1.BestSquardKills = m.BestSquardKills
	stage1.BestSquardRevives = m.BestSquardRevives
	stage1.BestStabs = m.BestStabs
	stage1.BestTouchdowns = m.BestTouchdowns
	stage1.CurrentWinStreak = m.CurrentWinStreak
	stage1.Deaths = m.Deaths
	stage1.GamesPlayed = m.GamesPlayed
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Losses = m.Losses
	stage1.Misses = m.Misses
	stage1.RecordDeathsInAMatch = m.RecordDeathsInAMatch
	stage1.RecordKillStreak = m.RecordKillStreak
	stage1.RecordKillsInAMatch = m.RecordKillsInAMatch
	stage1.RecordLongestWinStreak = m.RecordLongestWinStreak
	stage1.RecordXpInAMatch = m.RecordXpInAMatch
	stage1.Score = m.Score
	stage1.ScorePerGame = m.ScorePerGame
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.Suicides = m.Suicides
	stage1.Ties = m.Ties
	stage1.TimePlayedTotal = m.TimePlayedTotal
	stage1.TotalGamesPlayed = m.TotalGamesPlayed
	stage1.TotalShots = m.TotalShots
	stage1.WinLossRatio = m.WinLossRatio
	stage1.Wins = m.Wins
	stage1.WlRatio = m.WlRatio

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeAllPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeAllPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime all properties
func (m *FriendStatsResponseDataItems0LifetimeAllProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAllProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeAllProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeAllProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemData friend stats response data items0 lifetime item data
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemData
type FriendStatsResponseDataItems0LifetimeItemData struct {

	// lethals
	Lethals *FriendStatsResponseDataItems0LifetimeItemDataLethals `json:"lethals,omitempty"`

	// supers
	Supers *FriendStatsResponseDataItems0LifetimeItemDataSupers `json:"supers,omitempty"`

	// tacticals
	Tacticals *FriendStatsResponseDataItems0LifetimeItemDataTacticals `json:"tacticals,omitempty"`

	// weapon assault rifle
	WeaponAssaultRifle *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle `json:"weapon_assault_rifle,omitempty"`

	// weapon launcher
	WeaponLauncher *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher `json:"weapon_launcher,omitempty"`

	// weapon lmg
	WeaponLmg *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg `json:"weapon_lmg,omitempty"`

	// weapon marksman
	WeaponMarksman *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman `json:"weapon_marksman,omitempty"`

	// weapon melee
	WeaponMelee *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee `json:"weapon_melee,omitempty"`

	// weapon other
	WeaponOther *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther `json:"weapon_other,omitempty"`

	// weapon pistol
	WeaponPistol *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol `json:"weapon_pistol,omitempty"`

	// weapon shotgun
	WeaponShotgun *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun `json:"weapon_shotgun,omitempty"`

	// weapon smg
	WeaponSmg *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg `json:"weapon_smg,omitempty"`

	// weapon sniper
	WeaponSniper *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper `json:"weapon_sniper,omitempty"`

	// friend stats response data items0 lifetime item data additional properties
	FriendStatsResponseDataItems0LifetimeItemDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// lethals
		Lethals *FriendStatsResponseDataItems0LifetimeItemDataLethals `json:"lethals,omitempty"`

		// supers
		Supers *FriendStatsResponseDataItems0LifetimeItemDataSupers `json:"supers,omitempty"`

		// tacticals
		Tacticals *FriendStatsResponseDataItems0LifetimeItemDataTacticals `json:"tacticals,omitempty"`

		// weapon assault rifle
		WeaponAssaultRifle *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle `json:"weapon_assault_rifle,omitempty"`

		// weapon launcher
		WeaponLauncher *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher `json:"weapon_launcher,omitempty"`

		// weapon lmg
		WeaponLmg *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg `json:"weapon_lmg,omitempty"`

		// weapon marksman
		WeaponMarksman *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman `json:"weapon_marksman,omitempty"`

		// weapon melee
		WeaponMelee *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee `json:"weapon_melee,omitempty"`

		// weapon other
		WeaponOther *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther `json:"weapon_other,omitempty"`

		// weapon pistol
		WeaponPistol *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol `json:"weapon_pistol,omitempty"`

		// weapon shotgun
		WeaponShotgun *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun `json:"weapon_shotgun,omitempty"`

		// weapon smg
		WeaponSmg *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg `json:"weapon_smg,omitempty"`

		// weapon sniper
		WeaponSniper *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper `json:"weapon_sniper,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemData

	rcv.Lethals = stage1.Lethals
	rcv.Supers = stage1.Supers
	rcv.Tacticals = stage1.Tacticals
	rcv.WeaponAssaultRifle = stage1.WeaponAssaultRifle
	rcv.WeaponLauncher = stage1.WeaponLauncher
	rcv.WeaponLmg = stage1.WeaponLmg
	rcv.WeaponMarksman = stage1.WeaponMarksman
	rcv.WeaponMelee = stage1.WeaponMelee
	rcv.WeaponOther = stage1.WeaponOther
	rcv.WeaponPistol = stage1.WeaponPistol
	rcv.WeaponShotgun = stage1.WeaponShotgun
	rcv.WeaponSmg = stage1.WeaponSmg
	rcv.WeaponSniper = stage1.WeaponSniper
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "lethals")
	delete(stage2, "supers")
	delete(stage2, "tacticals")
	delete(stage2, "weapon_assault_rifle")
	delete(stage2, "weapon_launcher")
	delete(stage2, "weapon_lmg")
	delete(stage2, "weapon_marksman")
	delete(stage2, "weapon_melee")
	delete(stage2, "weapon_other")
	delete(stage2, "weapon_pistol")
	delete(stage2, "weapon_shotgun")
	delete(stage2, "weapon_smg")
	delete(stage2, "weapon_sniper")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// lethals
		Lethals *FriendStatsResponseDataItems0LifetimeItemDataLethals `json:"lethals,omitempty"`

		// supers
		Supers *FriendStatsResponseDataItems0LifetimeItemDataSupers `json:"supers,omitempty"`

		// tacticals
		Tacticals *FriendStatsResponseDataItems0LifetimeItemDataTacticals `json:"tacticals,omitempty"`

		// weapon assault rifle
		WeaponAssaultRifle *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle `json:"weapon_assault_rifle,omitempty"`

		// weapon launcher
		WeaponLauncher *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher `json:"weapon_launcher,omitempty"`

		// weapon lmg
		WeaponLmg *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg `json:"weapon_lmg,omitempty"`

		// weapon marksman
		WeaponMarksman *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman `json:"weapon_marksman,omitempty"`

		// weapon melee
		WeaponMelee *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee `json:"weapon_melee,omitempty"`

		// weapon other
		WeaponOther *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther `json:"weapon_other,omitempty"`

		// weapon pistol
		WeaponPistol *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol `json:"weapon_pistol,omitempty"`

		// weapon shotgun
		WeaponShotgun *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun `json:"weapon_shotgun,omitempty"`

		// weapon smg
		WeaponSmg *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg `json:"weapon_smg,omitempty"`

		// weapon sniper
		WeaponSniper *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper `json:"weapon_sniper,omitempty"`
	}

	stage1.Lethals = m.Lethals
	stage1.Supers = m.Supers
	stage1.Tacticals = m.Tacticals
	stage1.WeaponAssaultRifle = m.WeaponAssaultRifle
	stage1.WeaponLauncher = m.WeaponLauncher
	stage1.WeaponLmg = m.WeaponLmg
	stage1.WeaponMarksman = m.WeaponMarksman
	stage1.WeaponMelee = m.WeaponMelee
	stage1.WeaponOther = m.WeaponOther
	stage1.WeaponPistol = m.WeaponPistol
	stage1.WeaponShotgun = m.WeaponShotgun
	stage1.WeaponSmg = m.WeaponSmg
	stage1.WeaponSniper = m.WeaponSniper

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data
func (m *FriendStatsResponseDataItems0LifetimeItemData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLethals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacticals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponAssaultRifle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponLauncher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponLmg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponMarksman(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponMelee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponPistol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponShotgun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponSmg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponSniper(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateLethals(formats strfmt.Registry) error {

	if swag.IsZero(m.Lethals) { // not required
		return nil
	}

	if m.Lethals != nil {
		if err := m.Lethals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateSupers(formats strfmt.Registry) error {

	if swag.IsZero(m.Supers) { // not required
		return nil
	}

	if m.Supers != nil {
		if err := m.Supers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateTacticals(formats strfmt.Registry) error {

	if swag.IsZero(m.Tacticals) { // not required
		return nil
	}

	if m.Tacticals != nil {
		if err := m.Tacticals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponAssaultRifle(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponAssaultRifle) { // not required
		return nil
	}

	if m.WeaponAssaultRifle != nil {
		if err := m.WeaponAssaultRifle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponLauncher(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponLauncher) { // not required
		return nil
	}

	if m.WeaponLauncher != nil {
		if err := m.WeaponLauncher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponLmg(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponLmg) { // not required
		return nil
	}

	if m.WeaponLmg != nil {
		if err := m.WeaponLmg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponMarksman(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponMarksman) { // not required
		return nil
	}

	if m.WeaponMarksman != nil {
		if err := m.WeaponMarksman.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponMelee(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponMelee) { // not required
		return nil
	}

	if m.WeaponMelee != nil {
		if err := m.WeaponMelee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponOther(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponOther) { // not required
		return nil
	}

	if m.WeaponOther != nil {
		if err := m.WeaponOther.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_other")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponPistol(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponPistol) { // not required
		return nil
	}

	if m.WeaponPistol != nil {
		if err := m.WeaponPistol.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponShotgun(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponShotgun) { // not required
		return nil
	}

	if m.WeaponShotgun != nil {
		if err := m.WeaponShotgun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponSmg(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponSmg) { // not required
		return nil
	}

	if m.WeaponSmg != nil {
		if err := m.WeaponSmg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemData) validateWeaponSniper(formats strfmt.Registry) error {

	if swag.IsZero(m.WeaponSniper) { // not required
		return nil
	}

	if m.WeaponSniper != nil {
		if err := m.WeaponSniper.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemData) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethals friend stats response data items0 lifetime item data lethals
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethals
type FriendStatsResponseDataItems0LifetimeItemDataLethals struct {

	// equip at mine
	EquipAtMine *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine `json:"equip_at_mine,omitempty"`

	// equip c4
	EquipC4 *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4 `json:"equip_c4,omitempty"`

	// equip claymore
	EquipClaymore *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore `json:"equip_claymore,omitempty"`

	// equip frag
	EquipFrag *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag `json:"equip_frag,omitempty"`

	// equip molotov
	EquipMolotov *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov `json:"equip_molotov,omitempty"`

	// equip semtex
	EquipSemtex *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex `json:"equip_semtex,omitempty"`

	// equip thermite
	EquipThermite *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite `json:"equip_thermite,omitempty"`

	// equip throwing knife
	EquipThrowingKnife *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife `json:"equip_throwing_knife,omitempty"`

	// friend stats response data items0 lifetime item data lethals additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// equip at mine
		EquipAtMine *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine `json:"equip_at_mine,omitempty"`

		// equip c4
		EquipC4 *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4 `json:"equip_c4,omitempty"`

		// equip claymore
		EquipClaymore *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore `json:"equip_claymore,omitempty"`

		// equip frag
		EquipFrag *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag `json:"equip_frag,omitempty"`

		// equip molotov
		EquipMolotov *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov `json:"equip_molotov,omitempty"`

		// equip semtex
		EquipSemtex *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex `json:"equip_semtex,omitempty"`

		// equip thermite
		EquipThermite *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite `json:"equip_thermite,omitempty"`

		// equip throwing knife
		EquipThrowingKnife *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife `json:"equip_throwing_knife,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethals

	rcv.EquipAtMine = stage1.EquipAtMine
	rcv.EquipC4 = stage1.EquipC4
	rcv.EquipClaymore = stage1.EquipClaymore
	rcv.EquipFrag = stage1.EquipFrag
	rcv.EquipMolotov = stage1.EquipMolotov
	rcv.EquipSemtex = stage1.EquipSemtex
	rcv.EquipThermite = stage1.EquipThermite
	rcv.EquipThrowingKnife = stage1.EquipThrowingKnife
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "equip_at_mine")
	delete(stage2, "equip_c4")
	delete(stage2, "equip_claymore")
	delete(stage2, "equip_frag")
	delete(stage2, "equip_molotov")
	delete(stage2, "equip_semtex")
	delete(stage2, "equip_thermite")
	delete(stage2, "equip_throwing_knife")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethals) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// equip at mine
		EquipAtMine *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine `json:"equip_at_mine,omitempty"`

		// equip c4
		EquipC4 *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4 `json:"equip_c4,omitempty"`

		// equip claymore
		EquipClaymore *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore `json:"equip_claymore,omitempty"`

		// equip frag
		EquipFrag *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag `json:"equip_frag,omitempty"`

		// equip molotov
		EquipMolotov *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov `json:"equip_molotov,omitempty"`

		// equip semtex
		EquipSemtex *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex `json:"equip_semtex,omitempty"`

		// equip thermite
		EquipThermite *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite `json:"equip_thermite,omitempty"`

		// equip throwing knife
		EquipThrowingKnife *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife `json:"equip_throwing_knife,omitempty"`
	}

	stage1.EquipAtMine = m.EquipAtMine
	stage1.EquipC4 = m.EquipC4
	stage1.EquipClaymore = m.EquipClaymore
	stage1.EquipFrag = m.EquipFrag
	stage1.EquipMolotov = m.EquipMolotov
	stage1.EquipSemtex = m.EquipSemtex
	stage1.EquipThermite = m.EquipThermite
	stage1.EquipThrowingKnife = m.EquipThrowingKnife

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipAtMine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipC4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipClaymore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipFrag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipMolotov(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipSemtex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipThermite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipThrowingKnife(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipAtMine(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipAtMine) { // not required
		return nil
	}

	if m.EquipAtMine != nil {
		if err := m.EquipAtMine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_at_mine")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipC4(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipC4) { // not required
		return nil
	}

	if m.EquipC4 != nil {
		if err := m.EquipC4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_c4")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipClaymore(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipClaymore) { // not required
		return nil
	}

	if m.EquipClaymore != nil {
		if err := m.EquipClaymore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_claymore")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipFrag(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipFrag) { // not required
		return nil
	}

	if m.EquipFrag != nil {
		if err := m.EquipFrag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_frag")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipMolotov(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipMolotov) { // not required
		return nil
	}

	if m.EquipMolotov != nil {
		if err := m.EquipMolotov.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_molotov")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipSemtex(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipSemtex) { // not required
		return nil
	}

	if m.EquipSemtex != nil {
		if err := m.EquipSemtex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_semtex")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipThermite(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipThermite) { // not required
		return nil
	}

	if m.EquipThermite != nil {
		if err := m.EquipThermite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_thermite")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) validateEquipThrowingKnife(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipThrowingKnife) { // not required
		return nil
	}

	if m.EquipThrowingKnife != nil {
		if err := m.EquipThrowingKnife.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_throwing_knife")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethals) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine friend stats response data items0 lifetime item data lethals equip at mine
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip at mine additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip at mine
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_at_mine" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties friend stats response data items0 lifetime item data lethals equip at mine properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip at mine properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMinePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip at mine properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipAtMineProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4 friend stats response data items0 lifetime item data lethals equip c4
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip c4 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip c4
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_c4" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties friend stats response data items0 lifetime item data lethals equip c4 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip c4 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip c4 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipC4Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore friend stats response data items0 lifetime item data lethals equip claymore
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip claymore additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip claymore
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_claymore" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties friend stats response data items0 lifetime item data lethals equip claymore properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip claymore properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymorePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip claymore properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipClaymoreProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag friend stats response data items0 lifetime item data lethals equip frag
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip frag additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip frag
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_frag" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFrag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties friend stats response data items0 lifetime item data lethals equip frag properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip frag properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip frag properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipFragProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov friend stats response data items0 lifetime item data lethals equip molotov
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip molotov additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip molotov
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_molotov" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotov
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties friend stats response data items0 lifetime item data lethals equip molotov properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip molotov properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip molotov properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipMolotovProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex friend stats response data items0 lifetime item data lethals equip semtex
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip semtex additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip semtex
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_semtex" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties friend stats response data items0 lifetime item data lethals equip semtex properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip semtex properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip semtex properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipSemtexProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite friend stats response data items0 lifetime item data lethals equip thermite
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip thermite additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip thermite
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_thermite" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties friend stats response data items0 lifetime item data lethals equip thermite properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip thermite properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermitePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip thermite properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThermiteProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife friend stats response data items0 lifetime item data lethals equip throwing knife
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip throwing knife additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip throwing knife
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "lethals" + "." + "equip_throwing_knife" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnife
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties friend stats response data items0 lifetime item data lethals equip throwing knife properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties
type FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data lethals equip throwing knife properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties

	rcv.Kills = stage1.Kills
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data lethals equip throwing knife properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataLethalsEquipThrowingKnifeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupers friend stats response data items0 lifetime item data supers
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupers
type FriendStatsResponseDataItems0LifetimeItemDataSupers struct {

	// super ammo drop
	SuperAmmoDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop `json:"super_ammo_drop,omitempty"`

	// super armor drop
	SuperArmorDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop `json:"super_armor_drop,omitempty"`

	// super deadsilence
	SuperDeadsilence *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence `json:"super_deadsilence,omitempty"`

	// super emp drone
	SuperEmpDrone *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone `json:"super_emp_drone,omitempty"`

	// super fulton
	SuperFulton *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton `json:"super_fulton,omitempty"`

	// super recon drone
	SuperReconDrone *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone `json:"super_recon_drone,omitempty"`

	// super select
	SuperSelect *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect `json:"super_select,omitempty"`

	// super supply drop
	SuperSupplyDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop `json:"super_supply_drop,omitempty"`

	// super support box
	SuperSupportBox *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox `json:"super_support_box,omitempty"`

	// super tac cover
	SuperTacCover *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover `json:"super_tac_cover,omitempty"`

	// super tac insert
	SuperTacInsert *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert `json:"super_tac_insert,omitempty"`

	// super trophy
	SuperTrophy *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy `json:"super_trophy,omitempty"`

	// super weapon drop
	SuperWeaponDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop `json:"super_weapon_drop,omitempty"`

	// friend stats response data items0 lifetime item data supers additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// super ammo drop
		SuperAmmoDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop `json:"super_ammo_drop,omitempty"`

		// super armor drop
		SuperArmorDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop `json:"super_armor_drop,omitempty"`

		// super deadsilence
		SuperDeadsilence *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence `json:"super_deadsilence,omitempty"`

		// super emp drone
		SuperEmpDrone *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone `json:"super_emp_drone,omitempty"`

		// super fulton
		SuperFulton *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton `json:"super_fulton,omitempty"`

		// super recon drone
		SuperReconDrone *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone `json:"super_recon_drone,omitempty"`

		// super select
		SuperSelect *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect `json:"super_select,omitempty"`

		// super supply drop
		SuperSupplyDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop `json:"super_supply_drop,omitempty"`

		// super support box
		SuperSupportBox *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox `json:"super_support_box,omitempty"`

		// super tac cover
		SuperTacCover *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover `json:"super_tac_cover,omitempty"`

		// super tac insert
		SuperTacInsert *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert `json:"super_tac_insert,omitempty"`

		// super trophy
		SuperTrophy *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy `json:"super_trophy,omitempty"`

		// super weapon drop
		SuperWeaponDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop `json:"super_weapon_drop,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupers

	rcv.SuperAmmoDrop = stage1.SuperAmmoDrop
	rcv.SuperArmorDrop = stage1.SuperArmorDrop
	rcv.SuperDeadsilence = stage1.SuperDeadsilence
	rcv.SuperEmpDrone = stage1.SuperEmpDrone
	rcv.SuperFulton = stage1.SuperFulton
	rcv.SuperReconDrone = stage1.SuperReconDrone
	rcv.SuperSelect = stage1.SuperSelect
	rcv.SuperSupplyDrop = stage1.SuperSupplyDrop
	rcv.SuperSupportBox = stage1.SuperSupportBox
	rcv.SuperTacCover = stage1.SuperTacCover
	rcv.SuperTacInsert = stage1.SuperTacInsert
	rcv.SuperTrophy = stage1.SuperTrophy
	rcv.SuperWeaponDrop = stage1.SuperWeaponDrop
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "super_ammo_drop")
	delete(stage2, "super_armor_drop")
	delete(stage2, "super_deadsilence")
	delete(stage2, "super_emp_drone")
	delete(stage2, "super_fulton")
	delete(stage2, "super_recon_drone")
	delete(stage2, "super_select")
	delete(stage2, "super_supply_drop")
	delete(stage2, "super_support_box")
	delete(stage2, "super_tac_cover")
	delete(stage2, "super_tac_insert")
	delete(stage2, "super_trophy")
	delete(stage2, "super_weapon_drop")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupers) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// super ammo drop
		SuperAmmoDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop `json:"super_ammo_drop,omitempty"`

		// super armor drop
		SuperArmorDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop `json:"super_armor_drop,omitempty"`

		// super deadsilence
		SuperDeadsilence *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence `json:"super_deadsilence,omitempty"`

		// super emp drone
		SuperEmpDrone *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone `json:"super_emp_drone,omitempty"`

		// super fulton
		SuperFulton *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton `json:"super_fulton,omitempty"`

		// super recon drone
		SuperReconDrone *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone `json:"super_recon_drone,omitempty"`

		// super select
		SuperSelect *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect `json:"super_select,omitempty"`

		// super supply drop
		SuperSupplyDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop `json:"super_supply_drop,omitempty"`

		// super support box
		SuperSupportBox *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox `json:"super_support_box,omitempty"`

		// super tac cover
		SuperTacCover *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover `json:"super_tac_cover,omitempty"`

		// super tac insert
		SuperTacInsert *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert `json:"super_tac_insert,omitempty"`

		// super trophy
		SuperTrophy *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy `json:"super_trophy,omitempty"`

		// super weapon drop
		SuperWeaponDrop *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop `json:"super_weapon_drop,omitempty"`
	}

	stage1.SuperAmmoDrop = m.SuperAmmoDrop
	stage1.SuperArmorDrop = m.SuperArmorDrop
	stage1.SuperDeadsilence = m.SuperDeadsilence
	stage1.SuperEmpDrone = m.SuperEmpDrone
	stage1.SuperFulton = m.SuperFulton
	stage1.SuperReconDrone = m.SuperReconDrone
	stage1.SuperSelect = m.SuperSelect
	stage1.SuperSupplyDrop = m.SuperSupplyDrop
	stage1.SuperSupportBox = m.SuperSupportBox
	stage1.SuperTacCover = m.SuperTacCover
	stage1.SuperTacInsert = m.SuperTacInsert
	stage1.SuperTrophy = m.SuperTrophy
	stage1.SuperWeaponDrop = m.SuperWeaponDrop

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSuperAmmoDrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperArmorDrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperDeadsilence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperEmpDrone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperFulton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperReconDrone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperSupplyDrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperSupportBox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperTacCover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperTacInsert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperTrophy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperWeaponDrop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperAmmoDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperAmmoDrop) { // not required
		return nil
	}

	if m.SuperAmmoDrop != nil {
		if err := m.SuperAmmoDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_ammo_drop")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperArmorDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperArmorDrop) { // not required
		return nil
	}

	if m.SuperArmorDrop != nil {
		if err := m.SuperArmorDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_armor_drop")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperDeadsilence(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperDeadsilence) { // not required
		return nil
	}

	if m.SuperDeadsilence != nil {
		if err := m.SuperDeadsilence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_deadsilence")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperEmpDrone(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperEmpDrone) { // not required
		return nil
	}

	if m.SuperEmpDrone != nil {
		if err := m.SuperEmpDrone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_emp_drone")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperFulton(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperFulton) { // not required
		return nil
	}

	if m.SuperFulton != nil {
		if err := m.SuperFulton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_fulton")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperReconDrone(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperReconDrone) { // not required
		return nil
	}

	if m.SuperReconDrone != nil {
		if err := m.SuperReconDrone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_recon_drone")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperSelect) { // not required
		return nil
	}

	if m.SuperSelect != nil {
		if err := m.SuperSelect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_select")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperSupplyDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperSupplyDrop) { // not required
		return nil
	}

	if m.SuperSupplyDrop != nil {
		if err := m.SuperSupplyDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_supply_drop")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperSupportBox(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperSupportBox) { // not required
		return nil
	}

	if m.SuperSupportBox != nil {
		if err := m.SuperSupportBox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_support_box")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperTacCover(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperTacCover) { // not required
		return nil
	}

	if m.SuperTacCover != nil {
		if err := m.SuperTacCover.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_cover")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperTacInsert(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperTacInsert) { // not required
		return nil
	}

	if m.SuperTacInsert != nil {
		if err := m.SuperTacInsert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_insert")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperTrophy(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperTrophy) { // not required
		return nil
	}

	if m.SuperTrophy != nil {
		if err := m.SuperTrophy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_trophy")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) validateSuperWeaponDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.SuperWeaponDrop) { // not required
		return nil
	}

	if m.SuperWeaponDrop != nil {
		if err := m.SuperWeaponDrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_weapon_drop")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupers) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop friend stats response data items0 lifetime item data supers super ammo drop
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super ammo drop additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super ammo drop
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_ammo_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties friend stats response data items0 lifetime item data supers super ammo drop properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super ammo drop properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super ammo drop properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperAmmoDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop friend stats response data items0 lifetime item data supers super armor drop
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super armor drop additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super armor drop
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_armor_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties friend stats response data items0 lifetime item data supers super armor drop properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super armor drop properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super armor drop properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperArmorDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence friend stats response data items0 lifetime item data supers super deadsilence
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super deadsilence additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super deadsilence
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_deadsilence" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties friend stats response data items0 lifetime item data supers super deadsilence properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super deadsilence properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilencePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super deadsilence properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperDeadsilenceProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone friend stats response data items0 lifetime item data supers super emp drone
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super emp drone additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super emp drone
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_emp_drone" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDrone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties friend stats response data items0 lifetime item data supers super emp drone properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super emp drone properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDronePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super emp drone properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperEmpDroneProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton friend stats response data items0 lifetime item data supers super fulton
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super fulton additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super fulton
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_fulton" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFulton
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties friend stats response data items0 lifetime item data supers super fulton properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super fulton properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super fulton properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperFultonProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone friend stats response data items0 lifetime item data supers super recon drone
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super recon drone additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super recon drone
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_recon_drone" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDrone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties friend stats response data items0 lifetime item data supers super recon drone properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super recon drone properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDronePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super recon drone properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperReconDroneProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect friend stats response data items0 lifetime item data supers super select
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super select additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super select
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_select" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties friend stats response data items0 lifetime item data supers super select properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super select properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super select properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSelectProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop friend stats response data items0 lifetime item data supers super supply drop
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super supply drop additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super supply drop
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_supply_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties friend stats response data items0 lifetime item data supers super supply drop properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super supply drop properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super supply drop properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupplyDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox friend stats response data items0 lifetime item data supers super support box
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super support box additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super support box
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_support_box" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBox
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties friend stats response data items0 lifetime item data supers super support box properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super support box properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super support box properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperSupportBoxProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover friend stats response data items0 lifetime item data supers super tac cover
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super tac cover additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super tac cover
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_cover" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCover
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties friend stats response data items0 lifetime item data supers super tac cover properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super tac cover properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super tac cover properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacCoverProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert friend stats response data items0 lifetime item data supers super tac insert
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super tac insert additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super tac insert
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_tac_insert" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties friend stats response data items0 lifetime item data supers super tac insert properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super tac insert properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super tac insert properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTacInsertProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy friend stats response data items0 lifetime item data supers super trophy
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super trophy additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super trophy
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_trophy" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties friend stats response data items0 lifetime item data supers super trophy properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super trophy properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super trophy properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperTrophyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop friend stats response data items0 lifetime item data supers super weapon drop
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data supers super weapon drop additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super weapon drop
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "supers" + "." + "super_weapon_drop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties friend stats response data items0 lifetime item data supers super weapon drop properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties
type FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties struct {

	// kills
	Kills float64 `json:"kills,omitempty"`

	// misc1
	Misc1 float64 `json:"misc1,omitempty"`

	// misc2
	Misc2 float64 `json:"misc2,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data supers super weapon drop properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties

	rcv.Kills = stage1.Kills
	rcv.Misc1 = stage1.Misc1
	rcv.Misc2 = stage1.Misc2
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "kills")
	delete(stage2, "misc1")
	delete(stage2, "misc2")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// kills
		Kills float64 `json:"kills,omitempty"`

		// misc1
		Misc1 float64 `json:"misc1,omitempty"`

		// misc2
		Misc2 float64 `json:"misc2,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.Kills = m.Kills
	stage1.Misc1 = m.Misc1
	stage1.Misc2 = m.Misc2
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data supers super weapon drop properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataSupersSuperWeaponDropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticals friend stats response data items0 lifetime item data tacticals
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticals
type FriendStatsResponseDataItems0LifetimeItemDataTacticals struct {

	// equip adrenaline
	EquipAdrenaline *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline `json:"equip_adrenaline,omitempty"`

	// equip concussion
	EquipConcussion *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion `json:"equip_concussion,omitempty"`

	// equip decoy
	EquipDecoy *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy `json:"equip_decoy,omitempty"`

	// equip flash
	EquipFlash *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash `json:"equip_flash,omitempty"`

	// equip gas grenade
	EquipGasGrenade *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade `json:"equip_gas_grenade,omitempty"`

	// equip hb sensor
	EquipHbSensor *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor `json:"equip_hb_sensor,omitempty"`

	// equip smoke
	EquipSmoke *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke `json:"equip_smoke,omitempty"`

	// equip snapshot grenade
	EquipSnapshotGrenade *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade `json:"equip_snapshot_grenade,omitempty"`

	// friend stats response data items0 lifetime item data tacticals additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// equip adrenaline
		EquipAdrenaline *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline `json:"equip_adrenaline,omitempty"`

		// equip concussion
		EquipConcussion *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion `json:"equip_concussion,omitempty"`

		// equip decoy
		EquipDecoy *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy `json:"equip_decoy,omitempty"`

		// equip flash
		EquipFlash *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash `json:"equip_flash,omitempty"`

		// equip gas grenade
		EquipGasGrenade *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade `json:"equip_gas_grenade,omitempty"`

		// equip hb sensor
		EquipHbSensor *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor `json:"equip_hb_sensor,omitempty"`

		// equip smoke
		EquipSmoke *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke `json:"equip_smoke,omitempty"`

		// equip snapshot grenade
		EquipSnapshotGrenade *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade `json:"equip_snapshot_grenade,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticals

	rcv.EquipAdrenaline = stage1.EquipAdrenaline
	rcv.EquipConcussion = stage1.EquipConcussion
	rcv.EquipDecoy = stage1.EquipDecoy
	rcv.EquipFlash = stage1.EquipFlash
	rcv.EquipGasGrenade = stage1.EquipGasGrenade
	rcv.EquipHbSensor = stage1.EquipHbSensor
	rcv.EquipSmoke = stage1.EquipSmoke
	rcv.EquipSnapshotGrenade = stage1.EquipSnapshotGrenade
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "equip_adrenaline")
	delete(stage2, "equip_concussion")
	delete(stage2, "equip_decoy")
	delete(stage2, "equip_flash")
	delete(stage2, "equip_gas_grenade")
	delete(stage2, "equip_hb_sensor")
	delete(stage2, "equip_smoke")
	delete(stage2, "equip_snapshot_grenade")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticals) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// equip adrenaline
		EquipAdrenaline *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline `json:"equip_adrenaline,omitempty"`

		// equip concussion
		EquipConcussion *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion `json:"equip_concussion,omitempty"`

		// equip decoy
		EquipDecoy *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy `json:"equip_decoy,omitempty"`

		// equip flash
		EquipFlash *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash `json:"equip_flash,omitempty"`

		// equip gas grenade
		EquipGasGrenade *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade `json:"equip_gas_grenade,omitempty"`

		// equip hb sensor
		EquipHbSensor *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor `json:"equip_hb_sensor,omitempty"`

		// equip smoke
		EquipSmoke *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke `json:"equip_smoke,omitempty"`

		// equip snapshot grenade
		EquipSnapshotGrenade *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade `json:"equip_snapshot_grenade,omitempty"`
	}

	stage1.EquipAdrenaline = m.EquipAdrenaline
	stage1.EquipConcussion = m.EquipConcussion
	stage1.EquipDecoy = m.EquipDecoy
	stage1.EquipFlash = m.EquipFlash
	stage1.EquipGasGrenade = m.EquipGasGrenade
	stage1.EquipHbSensor = m.EquipHbSensor
	stage1.EquipSmoke = m.EquipSmoke
	stage1.EquipSnapshotGrenade = m.EquipSnapshotGrenade

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipAdrenaline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipConcussion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipDecoy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipFlash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipGasGrenade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipHbSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipSmoke(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipSnapshotGrenade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipAdrenaline(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipAdrenaline) { // not required
		return nil
	}

	if m.EquipAdrenaline != nil {
		if err := m.EquipAdrenaline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_adrenaline")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipConcussion(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipConcussion) { // not required
		return nil
	}

	if m.EquipConcussion != nil {
		if err := m.EquipConcussion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_concussion")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipDecoy(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipDecoy) { // not required
		return nil
	}

	if m.EquipDecoy != nil {
		if err := m.EquipDecoy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_decoy")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipFlash(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipFlash) { // not required
		return nil
	}

	if m.EquipFlash != nil {
		if err := m.EquipFlash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_flash")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipGasGrenade(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipGasGrenade) { // not required
		return nil
	}

	if m.EquipGasGrenade != nil {
		if err := m.EquipGasGrenade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_gas_grenade")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipHbSensor(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipHbSensor) { // not required
		return nil
	}

	if m.EquipHbSensor != nil {
		if err := m.EquipHbSensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_hb_sensor")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipSmoke(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipSmoke) { // not required
		return nil
	}

	if m.EquipSmoke != nil {
		if err := m.EquipSmoke.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_smoke")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) validateEquipSnapshotGrenade(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipSnapshotGrenade) { // not required
		return nil
	}

	if m.EquipSnapshotGrenade != nil {
		if err := m.EquipSnapshotGrenade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_snapshot_grenade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticals) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline friend stats response data items0 lifetime item data tacticals equip adrenaline
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip adrenaline additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip adrenaline
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_adrenaline" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenaline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties friend stats response data items0 lifetime item data tacticals equip adrenaline properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip adrenaline properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalinePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip adrenaline properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipAdrenalineProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion friend stats response data items0 lifetime item data tacticals equip concussion
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip concussion additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip concussion
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_concussion" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties friend stats response data items0 lifetime item data tacticals equip concussion properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip concussion properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip concussion properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipConcussionProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy friend stats response data items0 lifetime item data tacticals equip decoy
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip decoy additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip decoy
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_decoy" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties friend stats response data items0 lifetime item data tacticals equip decoy properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip decoy properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip decoy properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipDecoyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash friend stats response data items0 lifetime item data tacticals equip flash
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip flash additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip flash
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_flash" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties friend stats response data items0 lifetime item data tacticals equip flash properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip flash properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip flash properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipFlashProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade friend stats response data items0 lifetime item data tacticals equip gas grenade
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip gas grenade additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip gas grenade
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_gas_grenade" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties friend stats response data items0 lifetime item data tacticals equip gas grenade properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip gas grenade properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip gas grenade properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipGasGrenadeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor friend stats response data items0 lifetime item data tacticals equip hb sensor
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip hb sensor additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip hb sensor
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_hb_sensor" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties friend stats response data items0 lifetime item data tacticals equip hb sensor properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip hb sensor properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip hb sensor properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipHbSensorProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke friend stats response data items0 lifetime item data tacticals equip smoke
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip smoke additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip smoke
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_smoke" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmoke
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties friend stats response data items0 lifetime item data tacticals equip smoke properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip smoke properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip smoke properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSmokeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade friend stats response data items0 lifetime item data tacticals equip snapshot grenade
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip snapshot grenade additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip snapshot grenade
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "tacticals" + "." + "equip_snapshot_grenade" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties friend stats response data items0 lifetime item data tacticals equip snapshot grenade properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties
type FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties struct {

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime item data tacticals equip snapshot grenade properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties

	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data tacticals equip snapshot grenade properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataTacticalsEquipSnapshotGrenadeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle friend stats response data items0 lifetime item data weapon assault rifle
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle struct {

	// iw8 ar akilo47
	Iw8ArAkilo47 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 `json:"iw8_ar_akilo47,omitempty"`

	// iw8 ar anovember94
	Iw8ArAnovember94 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 `json:"iw8_ar_anovember94,omitempty"`

	// iw8 ar asierra12
	Iw8ArAsierra12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 `json:"iw8_ar_asierra12,omitempty"`

	// iw8 ar falima
	Iw8ArFalima *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima `json:"iw8_ar_falima,omitempty"`

	// iw8 ar falpha
	Iw8ArFalpha *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha `json:"iw8_ar_falpha,omitempty"`

	// iw8 ar galima
	Iw8ArGalima *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima `json:"iw8_ar_galima,omitempty"`

	// iw8 ar kilo433
	Iw8ArKilo433 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433 `json:"iw8_ar_kilo433,omitempty"`

	// iw8 ar mcharlie
	Iw8ArMcharlie *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie `json:"iw8_ar_mcharlie,omitempty"`

	// iw8 ar mike4
	Iw8ArMike4 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4 `json:"iw8_ar_mike4,omitempty"`

	// iw8 ar scharlie
	Iw8ArScharlie *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie `json:"iw8_ar_scharlie,omitempty"`

	// iw8 ar sierra552
	Iw8ArSierra552 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552 `json:"iw8_ar_sierra552,omitempty"`

	// iw8 ar tango21
	Iw8ArTango21 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21 `json:"iw8_ar_tango21,omitempty"`

	// iw8 ar valpha
	Iw8ArValpha *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha `json:"iw8_ar_valpha,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 ar akilo47
		Iw8ArAkilo47 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 `json:"iw8_ar_akilo47,omitempty"`

		// iw8 ar anovember94
		Iw8ArAnovember94 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 `json:"iw8_ar_anovember94,omitempty"`

		// iw8 ar asierra12
		Iw8ArAsierra12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 `json:"iw8_ar_asierra12,omitempty"`

		// iw8 ar falima
		Iw8ArFalima *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima `json:"iw8_ar_falima,omitempty"`

		// iw8 ar falpha
		Iw8ArFalpha *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha `json:"iw8_ar_falpha,omitempty"`

		// iw8 ar galima
		Iw8ArGalima *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima `json:"iw8_ar_galima,omitempty"`

		// iw8 ar kilo433
		Iw8ArKilo433 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433 `json:"iw8_ar_kilo433,omitempty"`

		// iw8 ar mcharlie
		Iw8ArMcharlie *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie `json:"iw8_ar_mcharlie,omitempty"`

		// iw8 ar mike4
		Iw8ArMike4 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4 `json:"iw8_ar_mike4,omitempty"`

		// iw8 ar scharlie
		Iw8ArScharlie *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie `json:"iw8_ar_scharlie,omitempty"`

		// iw8 ar sierra552
		Iw8ArSierra552 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552 `json:"iw8_ar_sierra552,omitempty"`

		// iw8 ar tango21
		Iw8ArTango21 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21 `json:"iw8_ar_tango21,omitempty"`

		// iw8 ar valpha
		Iw8ArValpha *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha `json:"iw8_ar_valpha,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle

	rcv.Iw8ArAkilo47 = stage1.Iw8ArAkilo47
	rcv.Iw8ArAnovember94 = stage1.Iw8ArAnovember94
	rcv.Iw8ArAsierra12 = stage1.Iw8ArAsierra12
	rcv.Iw8ArFalima = stage1.Iw8ArFalima
	rcv.Iw8ArFalpha = stage1.Iw8ArFalpha
	rcv.Iw8ArGalima = stage1.Iw8ArGalima
	rcv.Iw8ArKilo433 = stage1.Iw8ArKilo433
	rcv.Iw8ArMcharlie = stage1.Iw8ArMcharlie
	rcv.Iw8ArMike4 = stage1.Iw8ArMike4
	rcv.Iw8ArScharlie = stage1.Iw8ArScharlie
	rcv.Iw8ArSierra552 = stage1.Iw8ArSierra552
	rcv.Iw8ArTango21 = stage1.Iw8ArTango21
	rcv.Iw8ArValpha = stage1.Iw8ArValpha
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_ar_akilo47")
	delete(stage2, "iw8_ar_anovember94")
	delete(stage2, "iw8_ar_asierra12")
	delete(stage2, "iw8_ar_falima")
	delete(stage2, "iw8_ar_falpha")
	delete(stage2, "iw8_ar_galima")
	delete(stage2, "iw8_ar_kilo433")
	delete(stage2, "iw8_ar_mcharlie")
	delete(stage2, "iw8_ar_mike4")
	delete(stage2, "iw8_ar_scharlie")
	delete(stage2, "iw8_ar_sierra552")
	delete(stage2, "iw8_ar_tango21")
	delete(stage2, "iw8_ar_valpha")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 ar akilo47
		Iw8ArAkilo47 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 `json:"iw8_ar_akilo47,omitempty"`

		// iw8 ar anovember94
		Iw8ArAnovember94 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 `json:"iw8_ar_anovember94,omitempty"`

		// iw8 ar asierra12
		Iw8ArAsierra12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 `json:"iw8_ar_asierra12,omitempty"`

		// iw8 ar falima
		Iw8ArFalima *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima `json:"iw8_ar_falima,omitempty"`

		// iw8 ar falpha
		Iw8ArFalpha *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha `json:"iw8_ar_falpha,omitempty"`

		// iw8 ar galima
		Iw8ArGalima *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima `json:"iw8_ar_galima,omitempty"`

		// iw8 ar kilo433
		Iw8ArKilo433 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433 `json:"iw8_ar_kilo433,omitempty"`

		// iw8 ar mcharlie
		Iw8ArMcharlie *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie `json:"iw8_ar_mcharlie,omitempty"`

		// iw8 ar mike4
		Iw8ArMike4 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4 `json:"iw8_ar_mike4,omitempty"`

		// iw8 ar scharlie
		Iw8ArScharlie *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie `json:"iw8_ar_scharlie,omitempty"`

		// iw8 ar sierra552
		Iw8ArSierra552 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552 `json:"iw8_ar_sierra552,omitempty"`

		// iw8 ar tango21
		Iw8ArTango21 *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21 `json:"iw8_ar_tango21,omitempty"`

		// iw8 ar valpha
		Iw8ArValpha *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha `json:"iw8_ar_valpha,omitempty"`
	}

	stage1.Iw8ArAkilo47 = m.Iw8ArAkilo47
	stage1.Iw8ArAnovember94 = m.Iw8ArAnovember94
	stage1.Iw8ArAsierra12 = m.Iw8ArAsierra12
	stage1.Iw8ArFalima = m.Iw8ArFalima
	stage1.Iw8ArFalpha = m.Iw8ArFalpha
	stage1.Iw8ArGalima = m.Iw8ArGalima
	stage1.Iw8ArKilo433 = m.Iw8ArKilo433
	stage1.Iw8ArMcharlie = m.Iw8ArMcharlie
	stage1.Iw8ArMike4 = m.Iw8ArMike4
	stage1.Iw8ArScharlie = m.Iw8ArScharlie
	stage1.Iw8ArSierra552 = m.Iw8ArSierra552
	stage1.Iw8ArTango21 = m.Iw8ArTango21
	stage1.Iw8ArValpha = m.Iw8ArValpha

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8ArAkilo47(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArAnovember94(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArAsierra12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArFalima(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArFalpha(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArGalima(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArKilo433(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArMcharlie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArMike4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArScharlie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArSierra552(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArTango21(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ArValpha(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArAkilo47(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArAkilo47) { // not required
		return nil
	}

	if m.Iw8ArAkilo47 != nil {
		if err := m.Iw8ArAkilo47.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_akilo47")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArAnovember94(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArAnovember94) { // not required
		return nil
	}

	if m.Iw8ArAnovember94 != nil {
		if err := m.Iw8ArAnovember94.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_anovember94")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArAsierra12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArAsierra12) { // not required
		return nil
	}

	if m.Iw8ArAsierra12 != nil {
		if err := m.Iw8ArAsierra12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_asierra12")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArFalima(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArFalima) { // not required
		return nil
	}

	if m.Iw8ArFalima != nil {
		if err := m.Iw8ArFalima.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falima")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArFalpha(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArFalpha) { // not required
		return nil
	}

	if m.Iw8ArFalpha != nil {
		if err := m.Iw8ArFalpha.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falpha")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArGalima(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArGalima) { // not required
		return nil
	}

	if m.Iw8ArGalima != nil {
		if err := m.Iw8ArGalima.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_galima")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArKilo433(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArKilo433) { // not required
		return nil
	}

	if m.Iw8ArKilo433 != nil {
		if err := m.Iw8ArKilo433.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_kilo433")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArMcharlie(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArMcharlie) { // not required
		return nil
	}

	if m.Iw8ArMcharlie != nil {
		if err := m.Iw8ArMcharlie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mcharlie")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArMike4(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArMike4) { // not required
		return nil
	}

	if m.Iw8ArMike4 != nil {
		if err := m.Iw8ArMike4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mike4")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArScharlie(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArScharlie) { // not required
		return nil
	}

	if m.Iw8ArScharlie != nil {
		if err := m.Iw8ArScharlie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_scharlie")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArSierra552(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArSierra552) { // not required
		return nil
	}

	if m.Iw8ArSierra552 != nil {
		if err := m.Iw8ArSierra552.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_sierra552")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArTango21(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArTango21) { // not required
		return nil
	}

	if m.Iw8ArTango21 != nil {
		if err := m.Iw8ArTango21.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_tango21")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) validateIw8ArValpha(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ArValpha) { // not required
		return nil
	}

	if m.Iw8ArValpha != nil {
		if err := m.Iw8ArValpha.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_valpha")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar akilo47
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar akilo47 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar akilo47
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_akilo47" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar akilo47 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar akilo47 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar akilo47 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAkilo47Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar anovember94
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar anovember94 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar anovember94
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_anovember94" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar anovember94 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar anovember94 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar anovember94 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAnovember94Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar asierra12
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar asierra12 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar asierra12
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_asierra12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar asierra12 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar asierra12 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar asierra12 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArAsierra12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falima
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falima additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falima
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falima" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalima
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falima properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falima properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falima properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalimaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falpha
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falpha additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falpha
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_falpha" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalpha
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falpha properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falpha properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar falpha properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArFalphaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima friend stats response data items0 lifetime item data weapon assault rifle iw8 ar galima
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar galima additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar galima
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_galima" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalima
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar galima properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar galima properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar galima properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArGalimaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar kilo433
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar kilo433 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar kilo433
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_kilo433" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar kilo433 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar kilo433 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar kilo433 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArKilo433Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mcharlie
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mcharlie additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mcharlie
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mcharlie" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mcharlie properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mcharlie properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharliePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mcharlie properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMcharlieProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mike4
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mike4 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mike4
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_mike4" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mike4 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mike4 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar mike4 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArMike4Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie friend stats response data items0 lifetime item data weapon assault rifle iw8 ar scharlie
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar scharlie additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar scharlie
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_scharlie" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar scharlie properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar scharlie properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharliePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar scharlie properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArScharlieProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar sierra552
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar sierra552 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar sierra552
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_sierra552" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar sierra552 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar sierra552 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar sierra552 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArSierra552Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21 friend stats response data items0 lifetime item data weapon assault rifle iw8 ar tango21
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar tango21 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar tango21
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_tango21" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar tango21 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar tango21 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar tango21 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArTango21Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha friend stats response data items0 lifetime item data weapon assault rifle iw8 ar valpha
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar valpha additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar valpha
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_assault_rifle" + "." + "iw8_ar_valpha" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValpha
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties friend stats response data items0 lifetime item data weapon assault rifle iw8 ar valpha properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon assault rifle iw8 ar valpha properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon assault rifle iw8 ar valpha properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponAssaultRifleIw8ArValphaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher friend stats response data items0 lifetime item data weapon launcher
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher struct {

	// iw8 la gromeo
	Iw8LaGromeo *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo `json:"iw8_la_gromeo,omitempty"`

	// iw8 la juliet
	Iw8LaJuliet *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet `json:"iw8_la_juliet,omitempty"`

	// iw8 la kgolf
	Iw8LaKgolf *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf `json:"iw8_la_kgolf,omitempty"`

	// iw8 la mike32
	Iw8LaMike32 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32 `json:"iw8_la_mike32,omitempty"`

	// iw8 la rpapa7
	Iw8LaRpapa7 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7 `json:"iw8_la_rpapa7,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 la gromeo
		Iw8LaGromeo *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo `json:"iw8_la_gromeo,omitempty"`

		// iw8 la juliet
		Iw8LaJuliet *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet `json:"iw8_la_juliet,omitempty"`

		// iw8 la kgolf
		Iw8LaKgolf *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf `json:"iw8_la_kgolf,omitempty"`

		// iw8 la mike32
		Iw8LaMike32 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32 `json:"iw8_la_mike32,omitempty"`

		// iw8 la rpapa7
		Iw8LaRpapa7 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7 `json:"iw8_la_rpapa7,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher

	rcv.Iw8LaGromeo = stage1.Iw8LaGromeo
	rcv.Iw8LaJuliet = stage1.Iw8LaJuliet
	rcv.Iw8LaKgolf = stage1.Iw8LaKgolf
	rcv.Iw8LaMike32 = stage1.Iw8LaMike32
	rcv.Iw8LaRpapa7 = stage1.Iw8LaRpapa7
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_la_gromeo")
	delete(stage2, "iw8_la_juliet")
	delete(stage2, "iw8_la_kgolf")
	delete(stage2, "iw8_la_mike32")
	delete(stage2, "iw8_la_rpapa7")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 la gromeo
		Iw8LaGromeo *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo `json:"iw8_la_gromeo,omitempty"`

		// iw8 la juliet
		Iw8LaJuliet *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet `json:"iw8_la_juliet,omitempty"`

		// iw8 la kgolf
		Iw8LaKgolf *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf `json:"iw8_la_kgolf,omitempty"`

		// iw8 la mike32
		Iw8LaMike32 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32 `json:"iw8_la_mike32,omitempty"`

		// iw8 la rpapa7
		Iw8LaRpapa7 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7 `json:"iw8_la_rpapa7,omitempty"`
	}

	stage1.Iw8LaGromeo = m.Iw8LaGromeo
	stage1.Iw8LaJuliet = m.Iw8LaJuliet
	stage1.Iw8LaKgolf = m.Iw8LaKgolf
	stage1.Iw8LaMike32 = m.Iw8LaMike32
	stage1.Iw8LaRpapa7 = m.Iw8LaRpapa7

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8LaGromeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaJuliet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaKgolf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaMike32(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LaRpapa7(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) validateIw8LaGromeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaGromeo) { // not required
		return nil
	}

	if m.Iw8LaGromeo != nil {
		if err := m.Iw8LaGromeo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_gromeo")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) validateIw8LaJuliet(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaJuliet) { // not required
		return nil
	}

	if m.Iw8LaJuliet != nil {
		if err := m.Iw8LaJuliet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_juliet")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) validateIw8LaKgolf(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaKgolf) { // not required
		return nil
	}

	if m.Iw8LaKgolf != nil {
		if err := m.Iw8LaKgolf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_kgolf")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) validateIw8LaMike32(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaMike32) { // not required
		return nil
	}

	if m.Iw8LaMike32 != nil {
		if err := m.Iw8LaMike32.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_mike32")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) validateIw8LaRpapa7(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LaRpapa7) { // not required
		return nil
	}

	if m.Iw8LaRpapa7 != nil {
		if err := m.Iw8LaRpapa7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_rpapa7")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo friend stats response data items0 lifetime item data weapon launcher iw8 la gromeo
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la gromeo additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la gromeo
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_gromeo" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties friend stats response data items0 lifetime item data weapon launcher iw8 la gromeo properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la gromeo properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la gromeo properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaGromeoProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet friend stats response data items0 lifetime item data weapon launcher iw8 la juliet
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la juliet additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la juliet
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_juliet" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJuliet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties friend stats response data items0 lifetime item data weapon launcher iw8 la juliet properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la juliet properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la juliet properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaJulietProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf friend stats response data items0 lifetime item data weapon launcher iw8 la kgolf
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la kgolf additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la kgolf
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_kgolf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties friend stats response data items0 lifetime item data weapon launcher iw8 la kgolf properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la kgolf properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la kgolf properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaKgolfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32 friend stats response data items0 lifetime item data weapon launcher iw8 la mike32
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la mike32 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la mike32
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_mike32" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties friend stats response data items0 lifetime item data weapon launcher iw8 la mike32 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la mike32 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la mike32 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaMike32Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7 friend stats response data items0 lifetime item data weapon launcher iw8 la rpapa7
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la rpapa7 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la rpapa7
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_launcher" + "." + "iw8_la_rpapa7" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties friend stats response data items0 lifetime item data weapon launcher iw8 la rpapa7 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon launcher iw8 la rpapa7 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon launcher iw8 la rpapa7 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLauncherIw8LaRpapa7Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg friend stats response data items0 lifetime item data weapon lmg
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg struct {

	// iw8 lm kilo121
	Iw8LmKilo121 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121 `json:"iw8_lm_kilo121,omitempty"`

	// iw8 lm lima86
	Iw8LmLima86 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86 `json:"iw8_lm_lima86,omitempty"`

	// iw8 lm mgolf34
	Iw8LmMgolf34 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34 `json:"iw8_lm_mgolf34,omitempty"`

	// iw8 lm mgolf36
	Iw8LmMgolf36 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36 `json:"iw8_lm_mgolf36,omitempty"`

	// iw8 lm mkilo3
	Iw8LmMkilo3 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3 `json:"iw8_lm_mkilo3,omitempty"`

	// iw8 lm pkilo
	Iw8LmPkilo *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo `json:"iw8_lm_pkilo,omitempty"`

	// iw8 lm sierrax
	Iw8LmSierrax *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax `json:"iw8_lm_sierrax,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 lm kilo121
		Iw8LmKilo121 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121 `json:"iw8_lm_kilo121,omitempty"`

		// iw8 lm lima86
		Iw8LmLima86 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86 `json:"iw8_lm_lima86,omitempty"`

		// iw8 lm mgolf34
		Iw8LmMgolf34 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34 `json:"iw8_lm_mgolf34,omitempty"`

		// iw8 lm mgolf36
		Iw8LmMgolf36 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36 `json:"iw8_lm_mgolf36,omitempty"`

		// iw8 lm mkilo3
		Iw8LmMkilo3 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3 `json:"iw8_lm_mkilo3,omitempty"`

		// iw8 lm pkilo
		Iw8LmPkilo *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo `json:"iw8_lm_pkilo,omitempty"`

		// iw8 lm sierrax
		Iw8LmSierrax *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax `json:"iw8_lm_sierrax,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg

	rcv.Iw8LmKilo121 = stage1.Iw8LmKilo121
	rcv.Iw8LmLima86 = stage1.Iw8LmLima86
	rcv.Iw8LmMgolf34 = stage1.Iw8LmMgolf34
	rcv.Iw8LmMgolf36 = stage1.Iw8LmMgolf36
	rcv.Iw8LmMkilo3 = stage1.Iw8LmMkilo3
	rcv.Iw8LmPkilo = stage1.Iw8LmPkilo
	rcv.Iw8LmSierrax = stage1.Iw8LmSierrax
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_lm_kilo121")
	delete(stage2, "iw8_lm_lima86")
	delete(stage2, "iw8_lm_mgolf34")
	delete(stage2, "iw8_lm_mgolf36")
	delete(stage2, "iw8_lm_mkilo3")
	delete(stage2, "iw8_lm_pkilo")
	delete(stage2, "iw8_lm_sierrax")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 lm kilo121
		Iw8LmKilo121 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121 `json:"iw8_lm_kilo121,omitempty"`

		// iw8 lm lima86
		Iw8LmLima86 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86 `json:"iw8_lm_lima86,omitempty"`

		// iw8 lm mgolf34
		Iw8LmMgolf34 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34 `json:"iw8_lm_mgolf34,omitempty"`

		// iw8 lm mgolf36
		Iw8LmMgolf36 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36 `json:"iw8_lm_mgolf36,omitempty"`

		// iw8 lm mkilo3
		Iw8LmMkilo3 *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3 `json:"iw8_lm_mkilo3,omitempty"`

		// iw8 lm pkilo
		Iw8LmPkilo *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo `json:"iw8_lm_pkilo,omitempty"`

		// iw8 lm sierrax
		Iw8LmSierrax *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax `json:"iw8_lm_sierrax,omitempty"`
	}

	stage1.Iw8LmKilo121 = m.Iw8LmKilo121
	stage1.Iw8LmLima86 = m.Iw8LmLima86
	stage1.Iw8LmMgolf34 = m.Iw8LmMgolf34
	stage1.Iw8LmMgolf36 = m.Iw8LmMgolf36
	stage1.Iw8LmMkilo3 = m.Iw8LmMkilo3
	stage1.Iw8LmPkilo = m.Iw8LmPkilo
	stage1.Iw8LmSierrax = m.Iw8LmSierrax

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8LmKilo121(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmLima86(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmMgolf34(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmMgolf36(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmMkilo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmPkilo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8LmSierrax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmKilo121(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmKilo121) { // not required
		return nil
	}

	if m.Iw8LmKilo121 != nil {
		if err := m.Iw8LmKilo121.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_kilo121")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmLima86(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmLima86) { // not required
		return nil
	}

	if m.Iw8LmLima86 != nil {
		if err := m.Iw8LmLima86.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_lima86")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmMgolf34(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmMgolf34) { // not required
		return nil
	}

	if m.Iw8LmMgolf34 != nil {
		if err := m.Iw8LmMgolf34.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf34")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmMgolf36(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmMgolf36) { // not required
		return nil
	}

	if m.Iw8LmMgolf36 != nil {
		if err := m.Iw8LmMgolf36.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf36")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmMkilo3(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmMkilo3) { // not required
		return nil
	}

	if m.Iw8LmMkilo3 != nil {
		if err := m.Iw8LmMkilo3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mkilo3")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmPkilo(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmPkilo) { // not required
		return nil
	}

	if m.Iw8LmPkilo != nil {
		if err := m.Iw8LmPkilo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_pkilo")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) validateIw8LmSierrax(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8LmSierrax) { // not required
		return nil
	}

	if m.Iw8LmSierrax != nil {
		if err := m.Iw8LmSierrax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_sierrax")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121 friend stats response data items0 lifetime item data weapon lmg iw8 lm kilo121
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm kilo121 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm kilo121
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_kilo121" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties friend stats response data items0 lifetime item data weapon lmg iw8 lm kilo121 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm kilo121 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm kilo121 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmKilo121Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86 friend stats response data items0 lifetime item data weapon lmg iw8 lm lima86
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm lima86 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm lima86
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_lima86" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties friend stats response data items0 lifetime item data weapon lmg iw8 lm lima86 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm lima86 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm lima86 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmLima86Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34 friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf34
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf34 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf34
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf34" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf34 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf34 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf34 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf34Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36 friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf36
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf36 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf36
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mgolf36" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf36 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf36 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm mgolf36 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMgolf36Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3 friend stats response data items0 lifetime item data weapon lmg iw8 lm mkilo3
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm mkilo3 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm mkilo3
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_mkilo3" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties friend stats response data items0 lifetime item data weapon lmg iw8 lm mkilo3 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm mkilo3 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm mkilo3 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmMkilo3Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo friend stats response data items0 lifetime item data weapon lmg iw8 lm pkilo
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm pkilo additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm pkilo
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_pkilo" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkilo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties friend stats response data items0 lifetime item data weapon lmg iw8 lm pkilo properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm pkilo properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm pkilo properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmPkiloProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax friend stats response data items0 lifetime item data weapon lmg iw8 lm sierrax
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm sierrax additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm sierrax
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_lmg" + "." + "iw8_lm_sierrax" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierrax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties friend stats response data items0 lifetime item data weapon lmg iw8 lm sierrax properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon lmg iw8 lm sierrax properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon lmg iw8 lm sierrax properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponLmgIw8LmSierraxProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman friend stats response data items0 lifetime item data weapon marksman
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman struct {

	// iw8 sn crossbow
	Iw8SnCrossbow *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow `json:"iw8_sn_crossbow,omitempty"`

	// iw8 sn kilo98
	Iw8SnKilo98 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98 `json:"iw8_sn_kilo98,omitempty"`

	// iw8 sn mike14
	Iw8SnMike14 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14 `json:"iw8_sn_mike14,omitempty"`

	// iw8 sn romeo700
	Iw8SnRomeo700 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700 `json:"iw8_sn_romeo700,omitempty"`

	// iw8 sn sbeta
	Iw8SnSbeta *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta `json:"iw8_sn_sbeta,omitempty"`

	// iw8 sn sksierra
	Iw8SnSksierra *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra `json:"iw8_sn_sksierra,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sn crossbow
		Iw8SnCrossbow *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow `json:"iw8_sn_crossbow,omitempty"`

		// iw8 sn kilo98
		Iw8SnKilo98 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98 `json:"iw8_sn_kilo98,omitempty"`

		// iw8 sn mike14
		Iw8SnMike14 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14 `json:"iw8_sn_mike14,omitempty"`

		// iw8 sn romeo700
		Iw8SnRomeo700 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700 `json:"iw8_sn_romeo700,omitempty"`

		// iw8 sn sbeta
		Iw8SnSbeta *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta `json:"iw8_sn_sbeta,omitempty"`

		// iw8 sn sksierra
		Iw8SnSksierra *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra `json:"iw8_sn_sksierra,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman

	rcv.Iw8SnCrossbow = stage1.Iw8SnCrossbow
	rcv.Iw8SnKilo98 = stage1.Iw8SnKilo98
	rcv.Iw8SnMike14 = stage1.Iw8SnMike14
	rcv.Iw8SnRomeo700 = stage1.Iw8SnRomeo700
	rcv.Iw8SnSbeta = stage1.Iw8SnSbeta
	rcv.Iw8SnSksierra = stage1.Iw8SnSksierra
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sn_crossbow")
	delete(stage2, "iw8_sn_kilo98")
	delete(stage2, "iw8_sn_mike14")
	delete(stage2, "iw8_sn_romeo700")
	delete(stage2, "iw8_sn_sbeta")
	delete(stage2, "iw8_sn_sksierra")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sn crossbow
		Iw8SnCrossbow *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow `json:"iw8_sn_crossbow,omitempty"`

		// iw8 sn kilo98
		Iw8SnKilo98 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98 `json:"iw8_sn_kilo98,omitempty"`

		// iw8 sn mike14
		Iw8SnMike14 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14 `json:"iw8_sn_mike14,omitempty"`

		// iw8 sn romeo700
		Iw8SnRomeo700 *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700 `json:"iw8_sn_romeo700,omitempty"`

		// iw8 sn sbeta
		Iw8SnSbeta *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta `json:"iw8_sn_sbeta,omitempty"`

		// iw8 sn sksierra
		Iw8SnSksierra *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra `json:"iw8_sn_sksierra,omitempty"`
	}

	stage1.Iw8SnCrossbow = m.Iw8SnCrossbow
	stage1.Iw8SnKilo98 = m.Iw8SnKilo98
	stage1.Iw8SnMike14 = m.Iw8SnMike14
	stage1.Iw8SnRomeo700 = m.Iw8SnRomeo700
	stage1.Iw8SnSbeta = m.Iw8SnSbeta
	stage1.Iw8SnSksierra = m.Iw8SnSksierra

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8SnCrossbow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnKilo98(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnMike14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnRomeo700(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnSbeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnSksierra(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) validateIw8SnCrossbow(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnCrossbow) { // not required
		return nil
	}

	if m.Iw8SnCrossbow != nil {
		if err := m.Iw8SnCrossbow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_crossbow")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) validateIw8SnKilo98(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnKilo98) { // not required
		return nil
	}

	if m.Iw8SnKilo98 != nil {
		if err := m.Iw8SnKilo98.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_kilo98")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) validateIw8SnMike14(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnMike14) { // not required
		return nil
	}

	if m.Iw8SnMike14 != nil {
		if err := m.Iw8SnMike14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_mike14")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) validateIw8SnRomeo700(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnRomeo700) { // not required
		return nil
	}

	if m.Iw8SnRomeo700 != nil {
		if err := m.Iw8SnRomeo700.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_romeo700")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) validateIw8SnSbeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnSbeta) { // not required
		return nil
	}

	if m.Iw8SnSbeta != nil {
		if err := m.Iw8SnSbeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sbeta")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) validateIw8SnSksierra(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnSksierra) { // not required
		return nil
	}

	if m.Iw8SnSksierra != nil {
		if err := m.Iw8SnSksierra.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sksierra")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksman
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow friend stats response data items0 lifetime item data weapon marksman iw8 sn crossbow
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn crossbow additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn crossbow
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_crossbow" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties friend stats response data items0 lifetime item data weapon marksman iw8 sn crossbow properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn crossbow properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn crossbow properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnCrossbowProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98 friend stats response data items0 lifetime item data weapon marksman iw8 sn kilo98
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn kilo98 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn kilo98
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_kilo98" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties friend stats response data items0 lifetime item data weapon marksman iw8 sn kilo98 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn kilo98 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn kilo98 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnKilo98Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14 friend stats response data items0 lifetime item data weapon marksman iw8 sn mike14
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn mike14 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn mike14
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_mike14" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties friend stats response data items0 lifetime item data weapon marksman iw8 sn mike14 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn mike14 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn mike14 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnMike14Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700 friend stats response data items0 lifetime item data weapon marksman iw8 sn romeo700
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn romeo700 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn romeo700
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_romeo700" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties friend stats response data items0 lifetime item data weapon marksman iw8 sn romeo700 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn romeo700 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn romeo700 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnRomeo700Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta friend stats response data items0 lifetime item data weapon marksman iw8 sn sbeta
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn sbeta additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn sbeta
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sbeta" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties friend stats response data items0 lifetime item data weapon marksman iw8 sn sbeta properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn sbeta properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn sbeta properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSbetaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra friend stats response data items0 lifetime item data weapon marksman iw8 sn sksierra
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn sksierra additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn sksierra
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_marksman" + "." + "iw8_sn_sksierra" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierra
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties friend stats response data items0 lifetime item data weapon marksman iw8 sn sksierra properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon marksman iw8 sn sksierra properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon marksman iw8 sn sksierra properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMarksmanIw8SnSksierraProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee friend stats response data items0 lifetime item data weapon melee
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee struct {

	// iw8 knife
	Iw8Knife *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife `json:"iw8_knife,omitempty"`

	// iw8 me akimboblades
	Iw8MeAkimboblades *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades `json:"iw8_me_akimboblades,omitempty"`

	// iw8 me akimboblunt
	Iw8MeAkimboblunt *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt `json:"iw8_me_akimboblunt,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 knife
		Iw8Knife *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife `json:"iw8_knife,omitempty"`

		// iw8 me akimboblades
		Iw8MeAkimboblades *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades `json:"iw8_me_akimboblades,omitempty"`

		// iw8 me akimboblunt
		Iw8MeAkimboblunt *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt `json:"iw8_me_akimboblunt,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee

	rcv.Iw8Knife = stage1.Iw8Knife
	rcv.Iw8MeAkimboblades = stage1.Iw8MeAkimboblades
	rcv.Iw8MeAkimboblunt = stage1.Iw8MeAkimboblunt
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_knife")
	delete(stage2, "iw8_me_akimboblades")
	delete(stage2, "iw8_me_akimboblunt")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 knife
		Iw8Knife *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife `json:"iw8_knife,omitempty"`

		// iw8 me akimboblades
		Iw8MeAkimboblades *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades `json:"iw8_me_akimboblades,omitempty"`

		// iw8 me akimboblunt
		Iw8MeAkimboblunt *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt `json:"iw8_me_akimboblunt,omitempty"`
	}

	stage1.Iw8Knife = m.Iw8Knife
	stage1.Iw8MeAkimboblades = m.Iw8MeAkimboblades
	stage1.Iw8MeAkimboblunt = m.Iw8MeAkimboblunt

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8Knife(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8MeAkimboblades(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8MeAkimboblunt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) validateIw8Knife(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8Knife) { // not required
		return nil
	}

	if m.Iw8Knife != nil {
		if err := m.Iw8Knife.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_knife")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) validateIw8MeAkimboblades(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8MeAkimboblades) { // not required
		return nil
	}

	if m.Iw8MeAkimboblades != nil {
		if err := m.Iw8MeAkimboblades.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblades")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) validateIw8MeAkimboblunt(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8MeAkimboblunt) { // not required
		return nil
	}

	if m.Iw8MeAkimboblunt != nil {
		if err := m.Iw8MeAkimboblunt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblunt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMelee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife friend stats response data items0 lifetime item data weapon melee iw8 knife
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee iw8 knife additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee iw8 knife
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_knife" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8Knife
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties friend stats response data items0 lifetime item data weapon melee iw8 knife properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee iw8 knife properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee iw8 knife properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8KnifeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades friend stats response data items0 lifetime item data weapon melee iw8 me akimboblades
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee iw8 me akimboblades additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee iw8 me akimboblades
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblades" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblades
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties friend stats response data items0 lifetime item data weapon melee iw8 me akimboblades properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee iw8 me akimboblades properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee iw8 me akimboblades properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobladesProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt friend stats response data items0 lifetime item data weapon melee iw8 me akimboblunt
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee iw8 me akimboblunt additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee iw8 me akimboblunt
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_melee" + "." + "iw8_me_akimboblunt" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimboblunt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties friend stats response data items0 lifetime item data weapon melee iw8 me akimboblunt properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon melee iw8 me akimboblunt properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon melee iw8 me akimboblunt properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponMeleeIw8MeAkimbobluntProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponOther friend stats response data items0 lifetime item data weapon other
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponOther
type FriendStatsResponseDataItems0LifetimeItemDataWeaponOther struct {

	// iw8 me riotshield
	Iw8MeRiotshield *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield `json:"iw8_me_riotshield,omitempty"`

	// friend stats response data items0 lifetime item data weapon other additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 me riotshield
		Iw8MeRiotshield *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield `json:"iw8_me_riotshield,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponOther

	rcv.Iw8MeRiotshield = stage1.Iw8MeRiotshield
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_me_riotshield")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponOther) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 me riotshield
		Iw8MeRiotshield *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield `json:"iw8_me_riotshield,omitempty"`
	}

	stage1.Iw8MeRiotshield = m.Iw8MeRiotshield

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon other
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8MeRiotshield(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther) validateIw8MeRiotshield(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8MeRiotshield) { // not required
		return nil
	}

	if m.Iw8MeRiotshield != nil {
		if err := m.Iw8MeRiotshield.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_other" + "." + "iw8_me_riotshield")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOther) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield friend stats response data items0 lifetime item data weapon other iw8 me riotshield
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield
type FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon other iw8 me riotshield additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon other iw8 me riotshield
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_other" + "." + "iw8_me_riotshield" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshield
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties friend stats response data items0 lifetime item data weapon other iw8 me riotshield properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon other iw8 me riotshield properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon other iw8 me riotshield properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponOtherIw8MeRiotshieldProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol friend stats response data items0 lifetime item data weapon pistol
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol struct {

	// iw8 pi cpapa
	Iw8PiCpapa *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa `json:"iw8_pi_cpapa,omitempty"`

	// iw8 pi decho
	Iw8PiDecho *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho `json:"iw8_pi_decho,omitempty"`

	// iw8 pi golf21
	Iw8PiGolf21 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21 `json:"iw8_pi_golf21,omitempty"`

	// iw8 pi mike1911
	Iw8PiMike1911 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911 `json:"iw8_pi_mike1911,omitempty"`

	// iw8 pi mike9
	Iw8PiMike9 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9 `json:"iw8_pi_mike9,omitempty"`

	// iw8 pi papa320
	Iw8PiPapa320 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320 `json:"iw8_pi_papa320,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 pi cpapa
		Iw8PiCpapa *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa `json:"iw8_pi_cpapa,omitempty"`

		// iw8 pi decho
		Iw8PiDecho *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho `json:"iw8_pi_decho,omitempty"`

		// iw8 pi golf21
		Iw8PiGolf21 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21 `json:"iw8_pi_golf21,omitempty"`

		// iw8 pi mike1911
		Iw8PiMike1911 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911 `json:"iw8_pi_mike1911,omitempty"`

		// iw8 pi mike9
		Iw8PiMike9 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9 `json:"iw8_pi_mike9,omitempty"`

		// iw8 pi papa320
		Iw8PiPapa320 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320 `json:"iw8_pi_papa320,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol

	rcv.Iw8PiCpapa = stage1.Iw8PiCpapa
	rcv.Iw8PiDecho = stage1.Iw8PiDecho
	rcv.Iw8PiGolf21 = stage1.Iw8PiGolf21
	rcv.Iw8PiMike1911 = stage1.Iw8PiMike1911
	rcv.Iw8PiMike9 = stage1.Iw8PiMike9
	rcv.Iw8PiPapa320 = stage1.Iw8PiPapa320
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_pi_cpapa")
	delete(stage2, "iw8_pi_decho")
	delete(stage2, "iw8_pi_golf21")
	delete(stage2, "iw8_pi_mike1911")
	delete(stage2, "iw8_pi_mike9")
	delete(stage2, "iw8_pi_papa320")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 pi cpapa
		Iw8PiCpapa *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa `json:"iw8_pi_cpapa,omitempty"`

		// iw8 pi decho
		Iw8PiDecho *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho `json:"iw8_pi_decho,omitempty"`

		// iw8 pi golf21
		Iw8PiGolf21 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21 `json:"iw8_pi_golf21,omitempty"`

		// iw8 pi mike1911
		Iw8PiMike1911 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911 `json:"iw8_pi_mike1911,omitempty"`

		// iw8 pi mike9
		Iw8PiMike9 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9 `json:"iw8_pi_mike9,omitempty"`

		// iw8 pi papa320
		Iw8PiPapa320 *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320 `json:"iw8_pi_papa320,omitempty"`
	}

	stage1.Iw8PiCpapa = m.Iw8PiCpapa
	stage1.Iw8PiDecho = m.Iw8PiDecho
	stage1.Iw8PiGolf21 = m.Iw8PiGolf21
	stage1.Iw8PiMike1911 = m.Iw8PiMike1911
	stage1.Iw8PiMike9 = m.Iw8PiMike9
	stage1.Iw8PiPapa320 = m.Iw8PiPapa320

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8PiCpapa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiDecho(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiGolf21(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiMike1911(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiMike9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8PiPapa320(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) validateIw8PiCpapa(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiCpapa) { // not required
		return nil
	}

	if m.Iw8PiCpapa != nil {
		if err := m.Iw8PiCpapa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_cpapa")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) validateIw8PiDecho(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiDecho) { // not required
		return nil
	}

	if m.Iw8PiDecho != nil {
		if err := m.Iw8PiDecho.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_decho")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) validateIw8PiGolf21(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiGolf21) { // not required
		return nil
	}

	if m.Iw8PiGolf21 != nil {
		if err := m.Iw8PiGolf21.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_golf21")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) validateIw8PiMike1911(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiMike1911) { // not required
		return nil
	}

	if m.Iw8PiMike1911 != nil {
		if err := m.Iw8PiMike1911.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike1911")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) validateIw8PiMike9(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiMike9) { // not required
		return nil
	}

	if m.Iw8PiMike9 != nil {
		if err := m.Iw8PiMike9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike9")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) validateIw8PiPapa320(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8PiPapa320) { // not required
		return nil
	}

	if m.Iw8PiPapa320 != nil {
		if err := m.Iw8PiPapa320.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_papa320")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa friend stats response data items0 lifetime item data weapon pistol iw8 pi cpapa
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi cpapa additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi cpapa
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_cpapa" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapa
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties friend stats response data items0 lifetime item data weapon pistol iw8 pi cpapa properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi cpapa properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi cpapa properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiCpapaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho friend stats response data items0 lifetime item data weapon pistol iw8 pi decho
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi decho additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi decho
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_decho" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDecho
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties friend stats response data items0 lifetime item data weapon pistol iw8 pi decho properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi decho properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi decho properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiDechoProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21 friend stats response data items0 lifetime item data weapon pistol iw8 pi golf21
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi golf21 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi golf21
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_golf21" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties friend stats response data items0 lifetime item data weapon pistol iw8 pi golf21 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi golf21 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi golf21 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiGolf21Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911 friend stats response data items0 lifetime item data weapon pistol iw8 pi mike1911
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi mike1911 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi mike1911
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike1911" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties friend stats response data items0 lifetime item data weapon pistol iw8 pi mike1911 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi mike1911 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi mike1911 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike1911Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9 friend stats response data items0 lifetime item data weapon pistol iw8 pi mike9
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi mike9 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi mike9
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_mike9" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties friend stats response data items0 lifetime item data weapon pistol iw8 pi mike9 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi mike9 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi mike9 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiMike9Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320 friend stats response data items0 lifetime item data weapon pistol iw8 pi papa320
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi papa320 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi papa320
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_pistol" + "." + "iw8_pi_papa320" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties friend stats response data items0 lifetime item data weapon pistol iw8 pi papa320 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon pistol iw8 pi papa320 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon pistol iw8 pi papa320 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponPistolIw8PiPapa320Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun friend stats response data items0 lifetime item data weapon shotgun
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun struct {

	// iw8 sh aalpha12
	Iw8ShAalpha12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12 `json:"iw8_sh_aalpha12,omitempty"`

	// iw8 sh charlie725
	Iw8ShCharlie725 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725 `json:"iw8_sh_charlie725,omitempty"`

	// iw8 sh dpapa12
	Iw8ShDpapa12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12 `json:"iw8_sh_dpapa12,omitempty"`

	// iw8 sh mike26
	Iw8ShMike26 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26 `json:"iw8_sh_mike26,omitempty"`

	// iw8 sh oscar12
	Iw8ShOscar12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12 `json:"iw8_sh_oscar12,omitempty"`

	// iw8 sh romeo870
	Iw8ShRomeo870 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870 `json:"iw8_sh_romeo870,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sh aalpha12
		Iw8ShAalpha12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12 `json:"iw8_sh_aalpha12,omitempty"`

		// iw8 sh charlie725
		Iw8ShCharlie725 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725 `json:"iw8_sh_charlie725,omitempty"`

		// iw8 sh dpapa12
		Iw8ShDpapa12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12 `json:"iw8_sh_dpapa12,omitempty"`

		// iw8 sh mike26
		Iw8ShMike26 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26 `json:"iw8_sh_mike26,omitempty"`

		// iw8 sh oscar12
		Iw8ShOscar12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12 `json:"iw8_sh_oscar12,omitempty"`

		// iw8 sh romeo870
		Iw8ShRomeo870 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870 `json:"iw8_sh_romeo870,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun

	rcv.Iw8ShAalpha12 = stage1.Iw8ShAalpha12
	rcv.Iw8ShCharlie725 = stage1.Iw8ShCharlie725
	rcv.Iw8ShDpapa12 = stage1.Iw8ShDpapa12
	rcv.Iw8ShMike26 = stage1.Iw8ShMike26
	rcv.Iw8ShOscar12 = stage1.Iw8ShOscar12
	rcv.Iw8ShRomeo870 = stage1.Iw8ShRomeo870
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sh_aalpha12")
	delete(stage2, "iw8_sh_charlie725")
	delete(stage2, "iw8_sh_dpapa12")
	delete(stage2, "iw8_sh_mike26")
	delete(stage2, "iw8_sh_oscar12")
	delete(stage2, "iw8_sh_romeo870")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sh aalpha12
		Iw8ShAalpha12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12 `json:"iw8_sh_aalpha12,omitempty"`

		// iw8 sh charlie725
		Iw8ShCharlie725 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725 `json:"iw8_sh_charlie725,omitempty"`

		// iw8 sh dpapa12
		Iw8ShDpapa12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12 `json:"iw8_sh_dpapa12,omitempty"`

		// iw8 sh mike26
		Iw8ShMike26 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26 `json:"iw8_sh_mike26,omitempty"`

		// iw8 sh oscar12
		Iw8ShOscar12 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12 `json:"iw8_sh_oscar12,omitempty"`

		// iw8 sh romeo870
		Iw8ShRomeo870 *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870 `json:"iw8_sh_romeo870,omitempty"`
	}

	stage1.Iw8ShAalpha12 = m.Iw8ShAalpha12
	stage1.Iw8ShCharlie725 = m.Iw8ShCharlie725
	stage1.Iw8ShDpapa12 = m.Iw8ShDpapa12
	stage1.Iw8ShMike26 = m.Iw8ShMike26
	stage1.Iw8ShOscar12 = m.Iw8ShOscar12
	stage1.Iw8ShRomeo870 = m.Iw8ShRomeo870

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8ShAalpha12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShCharlie725(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShDpapa12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShMike26(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShOscar12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8ShRomeo870(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) validateIw8ShAalpha12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShAalpha12) { // not required
		return nil
	}

	if m.Iw8ShAalpha12 != nil {
		if err := m.Iw8ShAalpha12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_aalpha12")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) validateIw8ShCharlie725(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShCharlie725) { // not required
		return nil
	}

	if m.Iw8ShCharlie725 != nil {
		if err := m.Iw8ShCharlie725.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_charlie725")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) validateIw8ShDpapa12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShDpapa12) { // not required
		return nil
	}

	if m.Iw8ShDpapa12 != nil {
		if err := m.Iw8ShDpapa12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_dpapa12")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) validateIw8ShMike26(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShMike26) { // not required
		return nil
	}

	if m.Iw8ShMike26 != nil {
		if err := m.Iw8ShMike26.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_mike26")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) validateIw8ShOscar12(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShOscar12) { // not required
		return nil
	}

	if m.Iw8ShOscar12 != nil {
		if err := m.Iw8ShOscar12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_oscar12")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) validateIw8ShRomeo870(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8ShRomeo870) { // not required
		return nil
	}

	if m.Iw8ShRomeo870 != nil {
		if err := m.Iw8ShRomeo870.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_romeo870")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12 friend stats response data items0 lifetime item data weapon shotgun iw8 sh aalpha12
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh aalpha12 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh aalpha12
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_aalpha12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties friend stats response data items0 lifetime item data weapon shotgun iw8 sh aalpha12 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh aalpha12 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh aalpha12 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShAalpha12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725 friend stats response data items0 lifetime item data weapon shotgun iw8 sh charlie725
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh charlie725 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh charlie725
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_charlie725" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties friend stats response data items0 lifetime item data weapon shotgun iw8 sh charlie725 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh charlie725 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh charlie725 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShCharlie725Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12 friend stats response data items0 lifetime item data weapon shotgun iw8 sh dpapa12
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh dpapa12 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh dpapa12
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_dpapa12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties friend stats response data items0 lifetime item data weapon shotgun iw8 sh dpapa12 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh dpapa12 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh dpapa12 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShDpapa12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26 friend stats response data items0 lifetime item data weapon shotgun iw8 sh mike26
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh mike26 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh mike26
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_mike26" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties friend stats response data items0 lifetime item data weapon shotgun iw8 sh mike26 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh mike26 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh mike26 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShMike26Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12 friend stats response data items0 lifetime item data weapon shotgun iw8 sh oscar12
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh oscar12 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh oscar12
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_oscar12" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties friend stats response data items0 lifetime item data weapon shotgun iw8 sh oscar12 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh oscar12 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh oscar12 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShOscar12Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870 friend stats response data items0 lifetime item data weapon shotgun iw8 sh romeo870
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh romeo870 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh romeo870
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_shotgun" + "." + "iw8_sh_romeo870" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties friend stats response data items0 lifetime item data weapon shotgun iw8 sh romeo870 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon shotgun iw8 sh romeo870 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon shotgun iw8 sh romeo870 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponShotgunIw8ShRomeo870Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg friend stats response data items0 lifetime item data weapon smg
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg struct {

	// iw8 sm augolf
	Iw8SmAugolf *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf `json:"iw8_sm_augolf,omitempty"`

	// iw8 sm beta
	Iw8SmBeta *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta `json:"iw8_sm_beta,omitempty"`

	// iw8 sm charlie9
	Iw8SmCharlie9 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9 `json:"iw8_sm_charlie9,omitempty"`

	// iw8 sm mpapa5
	Iw8SmMpapa5 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5 `json:"iw8_sm_mpapa5,omitempty"`

	// iw8 sm mpapa7
	Iw8SmMpapa7 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7 `json:"iw8_sm_mpapa7,omitempty"`

	// iw8 sm papa90
	Iw8SmPapa90 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90 `json:"iw8_sm_papa90,omitempty"`

	// iw8 sm smgolf45
	Iw8SmSmgolf45 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45 `json:"iw8_sm_smgolf45,omitempty"`

	// iw8 sm uzulu
	Iw8SmUzulu *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu `json:"iw8_sm_uzulu,omitempty"`

	// iw8 sm victor
	Iw8SmVictor *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor `json:"iw8_sm_victor,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sm augolf
		Iw8SmAugolf *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf `json:"iw8_sm_augolf,omitempty"`

		// iw8 sm beta
		Iw8SmBeta *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta `json:"iw8_sm_beta,omitempty"`

		// iw8 sm charlie9
		Iw8SmCharlie9 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9 `json:"iw8_sm_charlie9,omitempty"`

		// iw8 sm mpapa5
		Iw8SmMpapa5 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5 `json:"iw8_sm_mpapa5,omitempty"`

		// iw8 sm mpapa7
		Iw8SmMpapa7 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7 `json:"iw8_sm_mpapa7,omitempty"`

		// iw8 sm papa90
		Iw8SmPapa90 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90 `json:"iw8_sm_papa90,omitempty"`

		// iw8 sm smgolf45
		Iw8SmSmgolf45 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45 `json:"iw8_sm_smgolf45,omitempty"`

		// iw8 sm uzulu
		Iw8SmUzulu *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu `json:"iw8_sm_uzulu,omitempty"`

		// iw8 sm victor
		Iw8SmVictor *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor `json:"iw8_sm_victor,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg

	rcv.Iw8SmAugolf = stage1.Iw8SmAugolf
	rcv.Iw8SmBeta = stage1.Iw8SmBeta
	rcv.Iw8SmCharlie9 = stage1.Iw8SmCharlie9
	rcv.Iw8SmMpapa5 = stage1.Iw8SmMpapa5
	rcv.Iw8SmMpapa7 = stage1.Iw8SmMpapa7
	rcv.Iw8SmPapa90 = stage1.Iw8SmPapa90
	rcv.Iw8SmSmgolf45 = stage1.Iw8SmSmgolf45
	rcv.Iw8SmUzulu = stage1.Iw8SmUzulu
	rcv.Iw8SmVictor = stage1.Iw8SmVictor
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sm_augolf")
	delete(stage2, "iw8_sm_beta")
	delete(stage2, "iw8_sm_charlie9")
	delete(stage2, "iw8_sm_mpapa5")
	delete(stage2, "iw8_sm_mpapa7")
	delete(stage2, "iw8_sm_papa90")
	delete(stage2, "iw8_sm_smgolf45")
	delete(stage2, "iw8_sm_uzulu")
	delete(stage2, "iw8_sm_victor")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sm augolf
		Iw8SmAugolf *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf `json:"iw8_sm_augolf,omitempty"`

		// iw8 sm beta
		Iw8SmBeta *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta `json:"iw8_sm_beta,omitempty"`

		// iw8 sm charlie9
		Iw8SmCharlie9 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9 `json:"iw8_sm_charlie9,omitempty"`

		// iw8 sm mpapa5
		Iw8SmMpapa5 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5 `json:"iw8_sm_mpapa5,omitempty"`

		// iw8 sm mpapa7
		Iw8SmMpapa7 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7 `json:"iw8_sm_mpapa7,omitempty"`

		// iw8 sm papa90
		Iw8SmPapa90 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90 `json:"iw8_sm_papa90,omitempty"`

		// iw8 sm smgolf45
		Iw8SmSmgolf45 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45 `json:"iw8_sm_smgolf45,omitempty"`

		// iw8 sm uzulu
		Iw8SmUzulu *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu `json:"iw8_sm_uzulu,omitempty"`

		// iw8 sm victor
		Iw8SmVictor *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor `json:"iw8_sm_victor,omitempty"`
	}

	stage1.Iw8SmAugolf = m.Iw8SmAugolf
	stage1.Iw8SmBeta = m.Iw8SmBeta
	stage1.Iw8SmCharlie9 = m.Iw8SmCharlie9
	stage1.Iw8SmMpapa5 = m.Iw8SmMpapa5
	stage1.Iw8SmMpapa7 = m.Iw8SmMpapa7
	stage1.Iw8SmPapa90 = m.Iw8SmPapa90
	stage1.Iw8SmSmgolf45 = m.Iw8SmSmgolf45
	stage1.Iw8SmUzulu = m.Iw8SmUzulu
	stage1.Iw8SmVictor = m.Iw8SmVictor

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8SmAugolf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmBeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmCharlie9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmMpapa5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmMpapa7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmPapa90(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmSmgolf45(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmUzulu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SmVictor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmAugolf(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmAugolf) { // not required
		return nil
	}

	if m.Iw8SmAugolf != nil {
		if err := m.Iw8SmAugolf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_augolf")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmBeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmBeta) { // not required
		return nil
	}

	if m.Iw8SmBeta != nil {
		if err := m.Iw8SmBeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_beta")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmCharlie9(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmCharlie9) { // not required
		return nil
	}

	if m.Iw8SmCharlie9 != nil {
		if err := m.Iw8SmCharlie9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_charlie9")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmMpapa5(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmMpapa5) { // not required
		return nil
	}

	if m.Iw8SmMpapa5 != nil {
		if err := m.Iw8SmMpapa5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa5")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmMpapa7(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmMpapa7) { // not required
		return nil
	}

	if m.Iw8SmMpapa7 != nil {
		if err := m.Iw8SmMpapa7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa7")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmPapa90(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmPapa90) { // not required
		return nil
	}

	if m.Iw8SmPapa90 != nil {
		if err := m.Iw8SmPapa90.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_papa90")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmSmgolf45(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmSmgolf45) { // not required
		return nil
	}

	if m.Iw8SmSmgolf45 != nil {
		if err := m.Iw8SmSmgolf45.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_smgolf45")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmUzulu(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmUzulu) { // not required
		return nil
	}

	if m.Iw8SmUzulu != nil {
		if err := m.Iw8SmUzulu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_uzulu")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) validateIw8SmVictor(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SmVictor) { // not required
		return nil
	}

	if m.Iw8SmVictor != nil {
		if err := m.Iw8SmVictor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_victor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf friend stats response data items0 lifetime item data weapon smg iw8 sm augolf
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm augolf additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm augolf
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_augolf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties friend stats response data items0 lifetime item data weapon smg iw8 sm augolf properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm augolf properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm augolf properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmAugolfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta friend stats response data items0 lifetime item data weapon smg iw8 sm beta
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm beta additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm beta
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_beta" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties friend stats response data items0 lifetime item data weapon smg iw8 sm beta properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm beta properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm beta properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmBetaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9 friend stats response data items0 lifetime item data weapon smg iw8 sm charlie9
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm charlie9 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm charlie9
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_charlie9" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties friend stats response data items0 lifetime item data weapon smg iw8 sm charlie9 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm charlie9 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm charlie9 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmCharlie9Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5 friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa5
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa5 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa5
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa5" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa5 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa5 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa5 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa5Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7 friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa7
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa7 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa7
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_mpapa7" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa7 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa7 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm mpapa7 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmMpapa7Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90 friend stats response data items0 lifetime item data weapon smg iw8 sm papa90
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm papa90 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm papa90
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_papa90" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties friend stats response data items0 lifetime item data weapon smg iw8 sm papa90 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm papa90 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm papa90 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmPapa90Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45 friend stats response data items0 lifetime item data weapon smg iw8 sm smgolf45
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm smgolf45 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm smgolf45
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_smgolf45" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties friend stats response data items0 lifetime item data weapon smg iw8 sm smgolf45 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm smgolf45 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm smgolf45 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmSmgolf45Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu friend stats response data items0 lifetime item data weapon smg iw8 sm uzulu
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm uzulu additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm uzulu
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_uzulu" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzulu
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties friend stats response data items0 lifetime item data weapon smg iw8 sm uzulu properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm uzulu properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm uzulu properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmUzuluProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor friend stats response data items0 lifetime item data weapon smg iw8 sm victor
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm victor additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm victor
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_smg" + "." + "iw8_sm_victor" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties friend stats response data items0 lifetime item data weapon smg iw8 sm victor properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon smg iw8 sm victor properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon smg iw8 sm victor properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSmgIw8SmVictorProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper friend stats response data items0 lifetime item data weapon sniper
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper struct {

	// iw8 sn alpha50
	Iw8SnAlpha50 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50 `json:"iw8_sn_alpha50,omitempty"`

	// iw8 sn delta
	Iw8SnDelta *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta `json:"iw8_sn_delta,omitempty"`

	// iw8 sn hdromeo
	Iw8SnHdromeo *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo `json:"iw8_sn_hdromeo,omitempty"`

	// iw8 sn xmike109
	Iw8SnXmike109 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109 `json:"iw8_sn_xmike109,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// iw8 sn alpha50
		Iw8SnAlpha50 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50 `json:"iw8_sn_alpha50,omitempty"`

		// iw8 sn delta
		Iw8SnDelta *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta `json:"iw8_sn_delta,omitempty"`

		// iw8 sn hdromeo
		Iw8SnHdromeo *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo `json:"iw8_sn_hdromeo,omitempty"`

		// iw8 sn xmike109
		Iw8SnXmike109 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109 `json:"iw8_sn_xmike109,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper

	rcv.Iw8SnAlpha50 = stage1.Iw8SnAlpha50
	rcv.Iw8SnDelta = stage1.Iw8SnDelta
	rcv.Iw8SnHdromeo = stage1.Iw8SnHdromeo
	rcv.Iw8SnXmike109 = stage1.Iw8SnXmike109
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "iw8_sn_alpha50")
	delete(stage2, "iw8_sn_delta")
	delete(stage2, "iw8_sn_hdromeo")
	delete(stage2, "iw8_sn_xmike109")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// iw8 sn alpha50
		Iw8SnAlpha50 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50 `json:"iw8_sn_alpha50,omitempty"`

		// iw8 sn delta
		Iw8SnDelta *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta `json:"iw8_sn_delta,omitempty"`

		// iw8 sn hdromeo
		Iw8SnHdromeo *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo `json:"iw8_sn_hdromeo,omitempty"`

		// iw8 sn xmike109
		Iw8SnXmike109 *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109 `json:"iw8_sn_xmike109,omitempty"`
	}

	stage1.Iw8SnAlpha50 = m.Iw8SnAlpha50
	stage1.Iw8SnDelta = m.Iw8SnDelta
	stage1.Iw8SnHdromeo = m.Iw8SnHdromeo
	stage1.Iw8SnXmike109 = m.Iw8SnXmike109

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIw8SnAlpha50(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnHdromeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIw8SnXmike109(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) validateIw8SnAlpha50(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnAlpha50) { // not required
		return nil
	}

	if m.Iw8SnAlpha50 != nil {
		if err := m.Iw8SnAlpha50.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_alpha50")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) validateIw8SnDelta(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnDelta) { // not required
		return nil
	}

	if m.Iw8SnDelta != nil {
		if err := m.Iw8SnDelta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_delta")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) validateIw8SnHdromeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnHdromeo) { // not required
		return nil
	}

	if m.Iw8SnHdromeo != nil {
		if err := m.Iw8SnHdromeo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_hdromeo")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) validateIw8SnXmike109(formats strfmt.Registry) error {

	if swag.IsZero(m.Iw8SnXmike109) { // not required
		return nil
	}

	if m.Iw8SnXmike109 != nil {
		if err := m.Iw8SnXmike109.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_xmike109")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50 friend stats response data items0 lifetime item data weapon sniper iw8 sn alpha50
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn alpha50 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn alpha50
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_alpha50" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties friend stats response data items0 lifetime item data weapon sniper iw8 sn alpha50 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn alpha50 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn alpha50 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnAlpha50Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta friend stats response data items0 lifetime item data weapon sniper iw8 sn delta
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn delta additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn delta
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_delta" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDelta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties friend stats response data items0 lifetime item data weapon sniper iw8 sn delta properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn delta properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn delta properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnDeltaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo friend stats response data items0 lifetime item data weapon sniper iw8 sn hdromeo
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn hdromeo additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn hdromeo
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_hdromeo" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties friend stats response data items0 lifetime item data weapon sniper iw8 sn hdromeo properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn hdromeo properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn hdromeo properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnHdromeoProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109 friend stats response data items0 lifetime item data weapon sniper iw8 sn xmike109
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109 struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn xmike109 additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn xmike109
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "itemData" + "." + "weapon_sniper" + "." + "iw8_sn_xmike109" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties friend stats response data items0 lifetime item data weapon sniper iw8 sn xmike109 properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties
type FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// headshots
	Headshots float64 `json:"headshots,omitempty"`

	// hits
	Hits float64 `json:"hits,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// shots
	Shots float64 `json:"shots,omitempty"`

	// friend stats response data items0 lifetime item data weapon sniper iw8 sn xmike109 properties additional properties
	FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties

	rcv.Accuracy = stage1.Accuracy
	rcv.Deaths = stage1.Deaths
	rcv.Headshots = stage1.Headshots
	rcv.Hits = stage1.Hits
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Shots = stage1.Shots
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "accuracy")
	delete(stage2, "deaths")
	delete(stage2, "headshots")
	delete(stage2, "hits")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "shots")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// accuracy
		Accuracy float64 `json:"accuracy,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// headshots
		Headshots float64 `json:"headshots,omitempty"`

		// hits
		Hits float64 `json:"hits,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// shots
		Shots float64 `json:"shots,omitempty"`
	}

	stage1.Accuracy = m.Accuracy
	stage1.Deaths = m.Deaths
	stage1.Headshots = m.Headshots
	stage1.Hits = m.Hits
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Shots = m.Shots

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109PropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime item data weapon sniper iw8 sn xmike109 properties
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeItemDataWeaponSniperIw8SnXmike109Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeMode friend stats response data items0 lifetime mode
//
// swagger:model FriendStatsResponseDataItems0LifetimeMode
type FriendStatsResponseDataItems0LifetimeMode struct {

	// arena
	Arena *FriendStatsResponseDataItems0LifetimeModeArena `json:"arena,omitempty"`

	// arm
	Arm *FriendStatsResponseDataItems0LifetimeModeArm `json:"arm,omitempty"`

	// br
	Br *FriendStatsResponseDataItems0LifetimeModeBr `json:"br,omitempty"`

	// br all
	BrAll *FriendStatsResponseDataItems0LifetimeModeBrAll `json:"br_all,omitempty"`

	// br dmz
	BrDmz *FriendStatsResponseDataItems0LifetimeModeBrDmz `json:"br_dmz,omitempty"`

	// conf
	Conf *FriendStatsResponseDataItems0LifetimeModeConf `json:"conf,omitempty"`

	// cyber
	Cyber *FriendStatsResponseDataItems0LifetimeModeCyber `json:"cyber,omitempty"`

	// dom
	Dom *FriendStatsResponseDataItems0LifetimeModeDom `json:"dom,omitempty"`

	// grnd
	Grnd *FriendStatsResponseDataItems0LifetimeModeGrnd `json:"grnd,omitempty"`

	// gun
	Gun *FriendStatsResponseDataItems0LifetimeModeGun `json:"gun,omitempty"`

	// hc conf
	HcConf *FriendStatsResponseDataItems0LifetimeModeHcConf `json:"hc_conf,omitempty"`

	// hc cyber
	HcCyber *FriendStatsResponseDataItems0LifetimeModeHcCyber `json:"hc_cyber,omitempty"`

	// hc dom
	HcDom *FriendStatsResponseDataItems0LifetimeModeHcDom `json:"hc_dom,omitempty"`

	// hc hq
	HcHq *FriendStatsResponseDataItems0LifetimeModeHcHq `json:"hc_hq,omitempty"`

	// hc sd
	HcSd *FriendStatsResponseDataItems0LifetimeModeHcSd `json:"hc_sd,omitempty"`

	// hc war
	HcWar *FriendStatsResponseDataItems0LifetimeModeHcWar `json:"hc_war,omitempty"`

	// hq
	Hq *FriendStatsResponseDataItems0LifetimeModeHq `json:"hq,omitempty"`

	// infect
	Infect *FriendStatsResponseDataItems0LifetimeModeInfect `json:"infect,omitempty"`

	// koth
	Koth *FriendStatsResponseDataItems0LifetimeModeKoth `json:"koth,omitempty"`

	// sd
	Sd *FriendStatsResponseDataItems0LifetimeModeSd `json:"sd,omitempty"`

	// war
	War *FriendStatsResponseDataItems0LifetimeModeWar `json:"war,omitempty"`

	// friend stats response data items0 lifetime mode additional properties
	FriendStatsResponseDataItems0LifetimeModeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeMode) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// arena
		Arena *FriendStatsResponseDataItems0LifetimeModeArena `json:"arena,omitempty"`

		// arm
		Arm *FriendStatsResponseDataItems0LifetimeModeArm `json:"arm,omitempty"`

		// br
		Br *FriendStatsResponseDataItems0LifetimeModeBr `json:"br,omitempty"`

		// br all
		BrAll *FriendStatsResponseDataItems0LifetimeModeBrAll `json:"br_all,omitempty"`

		// br dmz
		BrDmz *FriendStatsResponseDataItems0LifetimeModeBrDmz `json:"br_dmz,omitempty"`

		// conf
		Conf *FriendStatsResponseDataItems0LifetimeModeConf `json:"conf,omitempty"`

		// cyber
		Cyber *FriendStatsResponseDataItems0LifetimeModeCyber `json:"cyber,omitempty"`

		// dom
		Dom *FriendStatsResponseDataItems0LifetimeModeDom `json:"dom,omitempty"`

		// grnd
		Grnd *FriendStatsResponseDataItems0LifetimeModeGrnd `json:"grnd,omitempty"`

		// gun
		Gun *FriendStatsResponseDataItems0LifetimeModeGun `json:"gun,omitempty"`

		// hc conf
		HcConf *FriendStatsResponseDataItems0LifetimeModeHcConf `json:"hc_conf,omitempty"`

		// hc cyber
		HcCyber *FriendStatsResponseDataItems0LifetimeModeHcCyber `json:"hc_cyber,omitempty"`

		// hc dom
		HcDom *FriendStatsResponseDataItems0LifetimeModeHcDom `json:"hc_dom,omitempty"`

		// hc hq
		HcHq *FriendStatsResponseDataItems0LifetimeModeHcHq `json:"hc_hq,omitempty"`

		// hc sd
		HcSd *FriendStatsResponseDataItems0LifetimeModeHcSd `json:"hc_sd,omitempty"`

		// hc war
		HcWar *FriendStatsResponseDataItems0LifetimeModeHcWar `json:"hc_war,omitempty"`

		// hq
		Hq *FriendStatsResponseDataItems0LifetimeModeHq `json:"hq,omitempty"`

		// infect
		Infect *FriendStatsResponseDataItems0LifetimeModeInfect `json:"infect,omitempty"`

		// koth
		Koth *FriendStatsResponseDataItems0LifetimeModeKoth `json:"koth,omitempty"`

		// sd
		Sd *FriendStatsResponseDataItems0LifetimeModeSd `json:"sd,omitempty"`

		// war
		War *FriendStatsResponseDataItems0LifetimeModeWar `json:"war,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeMode

	rcv.Arena = stage1.Arena
	rcv.Arm = stage1.Arm
	rcv.Br = stage1.Br
	rcv.BrAll = stage1.BrAll
	rcv.BrDmz = stage1.BrDmz
	rcv.Conf = stage1.Conf
	rcv.Cyber = stage1.Cyber
	rcv.Dom = stage1.Dom
	rcv.Grnd = stage1.Grnd
	rcv.Gun = stage1.Gun
	rcv.HcConf = stage1.HcConf
	rcv.HcCyber = stage1.HcCyber
	rcv.HcDom = stage1.HcDom
	rcv.HcHq = stage1.HcHq
	rcv.HcSd = stage1.HcSd
	rcv.HcWar = stage1.HcWar
	rcv.Hq = stage1.Hq
	rcv.Infect = stage1.Infect
	rcv.Koth = stage1.Koth
	rcv.Sd = stage1.Sd
	rcv.War = stage1.War
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "arena")
	delete(stage2, "arm")
	delete(stage2, "br")
	delete(stage2, "br_all")
	delete(stage2, "br_dmz")
	delete(stage2, "conf")
	delete(stage2, "cyber")
	delete(stage2, "dom")
	delete(stage2, "grnd")
	delete(stage2, "gun")
	delete(stage2, "hc_conf")
	delete(stage2, "hc_cyber")
	delete(stage2, "hc_dom")
	delete(stage2, "hc_hq")
	delete(stage2, "hc_sd")
	delete(stage2, "hc_war")
	delete(stage2, "hq")
	delete(stage2, "infect")
	delete(stage2, "koth")
	delete(stage2, "sd")
	delete(stage2, "war")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeMode) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// arena
		Arena *FriendStatsResponseDataItems0LifetimeModeArena `json:"arena,omitempty"`

		// arm
		Arm *FriendStatsResponseDataItems0LifetimeModeArm `json:"arm,omitempty"`

		// br
		Br *FriendStatsResponseDataItems0LifetimeModeBr `json:"br,omitempty"`

		// br all
		BrAll *FriendStatsResponseDataItems0LifetimeModeBrAll `json:"br_all,omitempty"`

		// br dmz
		BrDmz *FriendStatsResponseDataItems0LifetimeModeBrDmz `json:"br_dmz,omitempty"`

		// conf
		Conf *FriendStatsResponseDataItems0LifetimeModeConf `json:"conf,omitempty"`

		// cyber
		Cyber *FriendStatsResponseDataItems0LifetimeModeCyber `json:"cyber,omitempty"`

		// dom
		Dom *FriendStatsResponseDataItems0LifetimeModeDom `json:"dom,omitempty"`

		// grnd
		Grnd *FriendStatsResponseDataItems0LifetimeModeGrnd `json:"grnd,omitempty"`

		// gun
		Gun *FriendStatsResponseDataItems0LifetimeModeGun `json:"gun,omitempty"`

		// hc conf
		HcConf *FriendStatsResponseDataItems0LifetimeModeHcConf `json:"hc_conf,omitempty"`

		// hc cyber
		HcCyber *FriendStatsResponseDataItems0LifetimeModeHcCyber `json:"hc_cyber,omitempty"`

		// hc dom
		HcDom *FriendStatsResponseDataItems0LifetimeModeHcDom `json:"hc_dom,omitempty"`

		// hc hq
		HcHq *FriendStatsResponseDataItems0LifetimeModeHcHq `json:"hc_hq,omitempty"`

		// hc sd
		HcSd *FriendStatsResponseDataItems0LifetimeModeHcSd `json:"hc_sd,omitempty"`

		// hc war
		HcWar *FriendStatsResponseDataItems0LifetimeModeHcWar `json:"hc_war,omitempty"`

		// hq
		Hq *FriendStatsResponseDataItems0LifetimeModeHq `json:"hq,omitempty"`

		// infect
		Infect *FriendStatsResponseDataItems0LifetimeModeInfect `json:"infect,omitempty"`

		// koth
		Koth *FriendStatsResponseDataItems0LifetimeModeKoth `json:"koth,omitempty"`

		// sd
		Sd *FriendStatsResponseDataItems0LifetimeModeSd `json:"sd,omitempty"`

		// war
		War *FriendStatsResponseDataItems0LifetimeModeWar `json:"war,omitempty"`
	}

	stage1.Arena = m.Arena
	stage1.Arm = m.Arm
	stage1.Br = m.Br
	stage1.BrAll = m.BrAll
	stage1.BrDmz = m.BrDmz
	stage1.Conf = m.Conf
	stage1.Cyber = m.Cyber
	stage1.Dom = m.Dom
	stage1.Grnd = m.Grnd
	stage1.Gun = m.Gun
	stage1.HcConf = m.HcConf
	stage1.HcCyber = m.HcCyber
	stage1.HcDom = m.HcDom
	stage1.HcHq = m.HcHq
	stage1.HcSd = m.HcSd
	stage1.HcWar = m.HcWar
	stage1.Hq = m.Hq
	stage1.Infect = m.Infect
	stage1.Koth = m.Koth
	stage1.Sd = m.Sd
	stage1.War = m.War

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode
func (m *FriendStatsResponseDataItems0LifetimeMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArena(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrDmz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCyber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcCyber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcDom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcHq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcSd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcWar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKoth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWar(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateArena(formats strfmt.Registry) error {

	if swag.IsZero(m.Arena) { // not required
		return nil
	}

	if m.Arena != nil {
		if err := m.Arena.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "arena")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateArm(formats strfmt.Registry) error {

	if swag.IsZero(m.Arm) { // not required
		return nil
	}

	if m.Arm != nil {
		if err := m.Arm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "arm")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateBr(formats strfmt.Registry) error {

	if swag.IsZero(m.Br) { // not required
		return nil
	}

	if m.Br != nil {
		if err := m.Br.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "br")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateBrAll(formats strfmt.Registry) error {

	if swag.IsZero(m.BrAll) { // not required
		return nil
	}

	if m.BrAll != nil {
		if err := m.BrAll.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "br_all")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateBrDmz(formats strfmt.Registry) error {

	if swag.IsZero(m.BrDmz) { // not required
		return nil
	}

	if m.BrDmz != nil {
		if err := m.BrDmz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "br_dmz")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateConf(formats strfmt.Registry) error {

	if swag.IsZero(m.Conf) { // not required
		return nil
	}

	if m.Conf != nil {
		if err := m.Conf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "conf")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateCyber(formats strfmt.Registry) error {

	if swag.IsZero(m.Cyber) { // not required
		return nil
	}

	if m.Cyber != nil {
		if err := m.Cyber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "cyber")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateDom(formats strfmt.Registry) error {

	if swag.IsZero(m.Dom) { // not required
		return nil
	}

	if m.Dom != nil {
		if err := m.Dom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "dom")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateGrnd(formats strfmt.Registry) error {

	if swag.IsZero(m.Grnd) { // not required
		return nil
	}

	if m.Grnd != nil {
		if err := m.Grnd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "grnd")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateGun(formats strfmt.Registry) error {

	if swag.IsZero(m.Gun) { // not required
		return nil
	}

	if m.Gun != nil {
		if err := m.Gun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "gun")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHcConf(formats strfmt.Registry) error {

	if swag.IsZero(m.HcConf) { // not required
		return nil
	}

	if m.HcConf != nil {
		if err := m.HcConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_conf")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHcCyber(formats strfmt.Registry) error {

	if swag.IsZero(m.HcCyber) { // not required
		return nil
	}

	if m.HcCyber != nil {
		if err := m.HcCyber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_cyber")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHcDom(formats strfmt.Registry) error {

	if swag.IsZero(m.HcDom) { // not required
		return nil
	}

	if m.HcDom != nil {
		if err := m.HcDom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_dom")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHcHq(formats strfmt.Registry) error {

	if swag.IsZero(m.HcHq) { // not required
		return nil
	}

	if m.HcHq != nil {
		if err := m.HcHq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_hq")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHcSd(formats strfmt.Registry) error {

	if swag.IsZero(m.HcSd) { // not required
		return nil
	}

	if m.HcSd != nil {
		if err := m.HcSd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_sd")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHcWar(formats strfmt.Registry) error {

	if swag.IsZero(m.HcWar) { // not required
		return nil
	}

	if m.HcWar != nil {
		if err := m.HcWar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_war")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateHq(formats strfmt.Registry) error {

	if swag.IsZero(m.Hq) { // not required
		return nil
	}

	if m.Hq != nil {
		if err := m.Hq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hq")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateInfect(formats strfmt.Registry) error {

	if swag.IsZero(m.Infect) { // not required
		return nil
	}

	if m.Infect != nil {
		if err := m.Infect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "infect")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateKoth(formats strfmt.Registry) error {

	if swag.IsZero(m.Koth) { // not required
		return nil
	}

	if m.Koth != nil {
		if err := m.Koth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "koth")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateSd(formats strfmt.Registry) error {

	if swag.IsZero(m.Sd) { // not required
		return nil
	}

	if m.Sd != nil {
		if err := m.Sd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "sd")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeMode) validateWar(formats strfmt.Registry) error {

	if swag.IsZero(m.War) { // not required
		return nil
	}

	if m.War != nil {
		if err := m.War.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "war")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeMode) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeArena friend stats response data items0 lifetime mode arena
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeArena
type FriendStatsResponseDataItems0LifetimeModeArena struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeArenaProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode arena additional properties
	FriendStatsResponseDataItems0LifetimeModeArenaAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeArena) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeArenaProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeArena

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeArenaAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeArena) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeArenaProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeArenaAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeArenaAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode arena
func (m *FriendStatsResponseDataItems0LifetimeModeArena) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeArena) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "arena" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArena) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArena) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeArena
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeArenaProperties friend stats response data items0 lifetime mode arena properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeArenaProperties
type FriendStatsResponseDataItems0LifetimeModeArenaProperties struct {

	// assists
	Assists float64 `json:"assists,omitempty"`

	// damage
	Damage float64 `json:"damage,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode arena properties additional properties
	FriendStatsResponseDataItems0LifetimeModeArenaPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeArenaProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// damage
		Damage float64 `json:"damage,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeArenaProperties

	rcv.Assists = stage1.Assists
	rcv.Damage = stage1.Damage
	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "assists")
	delete(stage2, "damage")
	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeArenaPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeArenaProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// damage
		Damage float64 `json:"damage,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Assists = m.Assists
	stage1.Damage = m.Damage
	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeArenaPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeArenaPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode arena properties
func (m *FriendStatsResponseDataItems0LifetimeModeArenaProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArenaProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArenaProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeArenaProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeArm friend stats response data items0 lifetime mode arm
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeArm
type FriendStatsResponseDataItems0LifetimeModeArm struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeArmProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode arm additional properties
	FriendStatsResponseDataItems0LifetimeModeArmAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeArm) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeArmProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeArm

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeArmAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeArm) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeArmProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeArmAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeArmAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode arm
func (m *FriendStatsResponseDataItems0LifetimeModeArm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeArm) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "arm" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArm) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeArm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeArmProperties friend stats response data items0 lifetime mode arm properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeArmProperties
type FriendStatsResponseDataItems0LifetimeModeArmProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode arm properties additional properties
	FriendStatsResponseDataItems0LifetimeModeArmPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeArmProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeArmProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeArmPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeArmProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeArmPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeArmPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode arm properties
func (m *FriendStatsResponseDataItems0LifetimeModeArmProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArmProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeArmProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeArmProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeBr friend stats response data items0 lifetime mode br
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeBr
type FriendStatsResponseDataItems0LifetimeModeBr struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeBrProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode br additional properties
	FriendStatsResponseDataItems0LifetimeModeBrAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeBr) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeBrProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeBr

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeBrAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeBr) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeBrProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeBrAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeBrAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode br
func (m *FriendStatsResponseDataItems0LifetimeModeBr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeBr) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "br" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBr) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeBr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeBrAll friend stats response data items0 lifetime mode br all
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeBrAll
type FriendStatsResponseDataItems0LifetimeModeBrAll struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeBrAllProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode br all additional properties
	FriendStatsResponseDataItems0LifetimeModeBrAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeBrAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeBrAllProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeBrAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeBrAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeBrAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeBrAllProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeBrAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeBrAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode br all
func (m *FriendStatsResponseDataItems0LifetimeModeBrAll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeBrAll) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "br_all" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrAll) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeBrAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeBrAllProperties friend stats response data items0 lifetime mode br all properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeBrAllProperties
type FriendStatsResponseDataItems0LifetimeModeBrAllProperties struct {

	// cash
	Cash float64 `json:"cash,omitempty"`

	// contracts
	Contracts float64 `json:"contracts,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// downs
	Downs float64 `json:"downs,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// tokens
	Tokens float64 `json:"tokens,omitempty"`

	// top five
	TopFive float64 `json:"topFive,omitempty"`

	// top ten
	TopTen float64 `json:"topTen,omitempty"`

	// top twenty five
	TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// friend stats response data items0 lifetime mode br all properties additional properties
	FriendStatsResponseDataItems0LifetimeModeBrAllPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeBrAllProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeBrAllProperties

	rcv.Cash = stage1.Cash
	rcv.Contracts = stage1.Contracts
	rcv.Deaths = stage1.Deaths
	rcv.Downs = stage1.Downs
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	rcv.Tokens = stage1.Tokens
	rcv.TopFive = stage1.TopFive
	rcv.TopTen = stage1.TopTen
	rcv.TopTwentyFive = stage1.TopTwentyFive
	rcv.Wins = stage1.Wins
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cash")
	delete(stage2, "contracts")
	delete(stage2, "deaths")
	delete(stage2, "downs")
	delete(stage2, "gamesPlayed")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	delete(stage2, "tokens")
	delete(stage2, "topFive")
	delete(stage2, "topTen")
	delete(stage2, "topTwentyFive")
	delete(stage2, "wins")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeBrAllPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeBrAllProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}

	stage1.Cash = m.Cash
	stage1.Contracts = m.Contracts
	stage1.Deaths = m.Deaths
	stage1.Downs = m.Downs
	stage1.GamesPlayed = m.GamesPlayed
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed
	stage1.Tokens = m.Tokens
	stage1.TopFive = m.TopFive
	stage1.TopTen = m.TopTen
	stage1.TopTwentyFive = m.TopTwentyFive
	stage1.Wins = m.Wins

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeBrAllPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeBrAllPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode br all properties
func (m *FriendStatsResponseDataItems0LifetimeModeBrAllProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrAllProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrAllProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeBrAllProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeBrDmz friend stats response data items0 lifetime mode br dmz
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeBrDmz
type FriendStatsResponseDataItems0LifetimeModeBrDmz struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode br dmz additional properties
	FriendStatsResponseDataItems0LifetimeModeBrDmzAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmz) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeBrDmz

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeBrDmzAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeBrDmz) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeBrDmzAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeBrDmzAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode br dmz
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmz) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeBrDmz) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "br_dmz" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmz) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmz) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeBrDmz
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeBrDmzProperties friend stats response data items0 lifetime mode br dmz properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeBrDmzProperties
type FriendStatsResponseDataItems0LifetimeModeBrDmzProperties struct {

	// cash
	Cash float64 `json:"cash,omitempty"`

	// contracts
	Contracts float64 `json:"contracts,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// downs
	Downs float64 `json:"downs,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// tokens
	Tokens float64 `json:"tokens,omitempty"`

	// top five
	TopFive float64 `json:"topFive,omitempty"`

	// top ten
	TopTen float64 `json:"topTen,omitempty"`

	// top twenty five
	TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// friend stats response data items0 lifetime mode br dmz properties additional properties
	FriendStatsResponseDataItems0LifetimeModeBrDmzPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeBrDmzProperties

	rcv.Cash = stage1.Cash
	rcv.Contracts = stage1.Contracts
	rcv.Deaths = stage1.Deaths
	rcv.Downs = stage1.Downs
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	rcv.Tokens = stage1.Tokens
	rcv.TopFive = stage1.TopFive
	rcv.TopTen = stage1.TopTen
	rcv.TopTwentyFive = stage1.TopTwentyFive
	rcv.Wins = stage1.Wins
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cash")
	delete(stage2, "contracts")
	delete(stage2, "deaths")
	delete(stage2, "downs")
	delete(stage2, "gamesPlayed")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	delete(stage2, "tokens")
	delete(stage2, "topFive")
	delete(stage2, "topTen")
	delete(stage2, "topTwentyFive")
	delete(stage2, "wins")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeBrDmzPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeBrDmzProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}

	stage1.Cash = m.Cash
	stage1.Contracts = m.Contracts
	stage1.Deaths = m.Deaths
	stage1.Downs = m.Downs
	stage1.GamesPlayed = m.GamesPlayed
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed
	stage1.Tokens = m.Tokens
	stage1.TopFive = m.TopFive
	stage1.TopTen = m.TopTen
	stage1.TopTwentyFive = m.TopTwentyFive
	stage1.Wins = m.Wins

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeBrDmzPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeBrDmzPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode br dmz properties
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrDmzProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeBrDmzProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeBrProperties friend stats response data items0 lifetime mode br properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeBrProperties
type FriendStatsResponseDataItems0LifetimeModeBrProperties struct {

	// cash
	Cash float64 `json:"cash,omitempty"`

	// contracts
	Contracts float64 `json:"contracts,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// downs
	Downs float64 `json:"downs,omitempty"`

	// games played
	GamesPlayed float64 `json:"gamesPlayed,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// tokens
	Tokens float64 `json:"tokens,omitempty"`

	// top five
	TopFive float64 `json:"topFive,omitempty"`

	// top ten
	TopTen float64 `json:"topTen,omitempty"`

	// top twenty five
	TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

	// wins
	Wins float64 `json:"wins,omitempty"`

	// friend stats response data items0 lifetime mode br properties additional properties
	FriendStatsResponseDataItems0LifetimeModeBrPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeBrProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeBrProperties

	rcv.Cash = stage1.Cash
	rcv.Contracts = stage1.Contracts
	rcv.Deaths = stage1.Deaths
	rcv.Downs = stage1.Downs
	rcv.GamesPlayed = stage1.GamesPlayed
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	rcv.Tokens = stage1.Tokens
	rcv.TopFive = stage1.TopFive
	rcv.TopTen = stage1.TopTen
	rcv.TopTwentyFive = stage1.TopTwentyFive
	rcv.Wins = stage1.Wins
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "cash")
	delete(stage2, "contracts")
	delete(stage2, "deaths")
	delete(stage2, "downs")
	delete(stage2, "gamesPlayed")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	delete(stage2, "tokens")
	delete(stage2, "topFive")
	delete(stage2, "topTen")
	delete(stage2, "topTwentyFive")
	delete(stage2, "wins")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeBrPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeBrProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// cash
		Cash float64 `json:"cash,omitempty"`

		// contracts
		Contracts float64 `json:"contracts,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// downs
		Downs float64 `json:"downs,omitempty"`

		// games played
		GamesPlayed float64 `json:"gamesPlayed,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`

		// tokens
		Tokens float64 `json:"tokens,omitempty"`

		// top five
		TopFive float64 `json:"topFive,omitempty"`

		// top ten
		TopTen float64 `json:"topTen,omitempty"`

		// top twenty five
		TopTwentyFive float64 `json:"topTwentyFive,omitempty"`

		// wins
		Wins float64 `json:"wins,omitempty"`
	}

	stage1.Cash = m.Cash
	stage1.Contracts = m.Contracts
	stage1.Deaths = m.Deaths
	stage1.Downs = m.Downs
	stage1.GamesPlayed = m.GamesPlayed
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed
	stage1.Tokens = m.Tokens
	stage1.TopFive = m.TopFive
	stage1.TopTen = m.TopTen
	stage1.TopTwentyFive = m.TopTwentyFive
	stage1.Wins = m.Wins

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeBrPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeBrPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode br properties
func (m *FriendStatsResponseDataItems0LifetimeModeBrProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeBrProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeBrProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeConf friend stats response data items0 lifetime mode conf
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeConf
type FriendStatsResponseDataItems0LifetimeModeConf struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeConfProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode conf additional properties
	FriendStatsResponseDataItems0LifetimeModeConfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeConf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeConfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeConf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeConfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeConf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeConfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeConfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeConfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode conf
func (m *FriendStatsResponseDataItems0LifetimeModeConf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeConf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "conf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeConf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeConf) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeConf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeConfProperties friend stats response data items0 lifetime mode conf properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeConfProperties
type FriendStatsResponseDataItems0LifetimeModeConfProperties struct {

	// confirms
	Confirms float64 `json:"confirms,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// denies
	Denies float64 `json:"denies,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode conf properties additional properties
	FriendStatsResponseDataItems0LifetimeModeConfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeConfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeConfProperties

	rcv.Confirms = stage1.Confirms
	rcv.Deaths = stage1.Deaths
	rcv.Denies = stage1.Denies
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "confirms")
	delete(stage2, "deaths")
	delete(stage2, "denies")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeConfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeConfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Confirms = m.Confirms
	stage1.Deaths = m.Deaths
	stage1.Denies = m.Denies
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeConfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeConfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode conf properties
func (m *FriendStatsResponseDataItems0LifetimeModeConfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeConfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeConfProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeConfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeCyber friend stats response data items0 lifetime mode cyber
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeCyber
type FriendStatsResponseDataItems0LifetimeModeCyber struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeCyberProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode cyber additional properties
	FriendStatsResponseDataItems0LifetimeModeCyberAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeCyber) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeCyberProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeCyber

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeCyberAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeCyber) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeCyberProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeCyberAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeCyberAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode cyber
func (m *FriendStatsResponseDataItems0LifetimeModeCyber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeCyber) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "cyber" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeCyber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeCyber) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeCyber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeCyberProperties friend stats response data items0 lifetime mode cyber properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeCyberProperties
type FriendStatsResponseDataItems0LifetimeModeCyberProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode cyber properties additional properties
	FriendStatsResponseDataItems0LifetimeModeCyberPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeCyberProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeCyberProperties

	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeCyberPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeCyberProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeCyberPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeCyberPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode cyber properties
func (m *FriendStatsResponseDataItems0LifetimeModeCyberProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeCyberProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeCyberProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeCyberProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeDom friend stats response data items0 lifetime mode dom
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeDom
type FriendStatsResponseDataItems0LifetimeModeDom struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeDomProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode dom additional properties
	FriendStatsResponseDataItems0LifetimeModeDomAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeDom) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeDomProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeDom

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeDomAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeDom) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeDomProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeDomAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeDomAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode dom
func (m *FriendStatsResponseDataItems0LifetimeModeDom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeDom) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "dom" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeDom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeDom) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeDom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeDomProperties friend stats response data items0 lifetime mode dom properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeDomProperties
type FriendStatsResponseDataItems0LifetimeModeDomProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode dom properties additional properties
	FriendStatsResponseDataItems0LifetimeModeDomPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeDomProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeDomProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeDomPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeDomProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeDomPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeDomPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode dom properties
func (m *FriendStatsResponseDataItems0LifetimeModeDomProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeDomProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeDomProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeDomProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeGrnd friend stats response data items0 lifetime mode grnd
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeGrnd
type FriendStatsResponseDataItems0LifetimeModeGrnd struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeGrndProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode grnd additional properties
	FriendStatsResponseDataItems0LifetimeModeGrndAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeGrnd) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeGrndProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeGrnd

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeGrndAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeGrnd) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeGrndProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeGrndAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeGrndAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode grnd
func (m *FriendStatsResponseDataItems0LifetimeModeGrnd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeGrnd) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "grnd" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGrnd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGrnd) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeGrnd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeGrndProperties friend stats response data items0 lifetime mode grnd properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeGrndProperties
type FriendStatsResponseDataItems0LifetimeModeGrndProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// obj time
	ObjTime float64 `json:"objTime,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode grnd properties additional properties
	FriendStatsResponseDataItems0LifetimeModeGrndPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeGrndProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeGrndProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.ObjTime = stage1.ObjTime
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "objTime")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeGrndPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeGrndProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.ObjTime = m.ObjTime
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeGrndPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeGrndPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode grnd properties
func (m *FriendStatsResponseDataItems0LifetimeModeGrndProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGrndProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGrndProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeGrndProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeGun friend stats response data items0 lifetime mode gun
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeGun
type FriendStatsResponseDataItems0LifetimeModeGun struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeGunProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode gun additional properties
	FriendStatsResponseDataItems0LifetimeModeGunAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeGun) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeGunProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeGun

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeGunAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeGun) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeGunProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeGunAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeGunAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode gun
func (m *FriendStatsResponseDataItems0LifetimeModeGun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeGun) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "gun" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGun) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeGun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeGunProperties friend stats response data items0 lifetime mode gun properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeGunProperties
type FriendStatsResponseDataItems0LifetimeModeGunProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// set backs
	SetBacks float64 `json:"setBacks,omitempty"`

	// stabs
	Stabs float64 `json:"stabs,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode gun properties additional properties
	FriendStatsResponseDataItems0LifetimeModeGunPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeGunProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// set backs
		SetBacks float64 `json:"setBacks,omitempty"`

		// stabs
		Stabs float64 `json:"stabs,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeGunProperties

	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.SetBacks = stage1.SetBacks
	rcv.Stabs = stage1.Stabs
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "setBacks")
	delete(stage2, "stabs")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeGunPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeGunProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// set backs
		SetBacks float64 `json:"setBacks,omitempty"`

		// stabs
		Stabs float64 `json:"stabs,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.SetBacks = m.SetBacks
	stage1.Stabs = m.Stabs
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeGunPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeGunPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode gun properties
func (m *FriendStatsResponseDataItems0LifetimeModeGunProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGunProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeGunProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeGunProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcConf friend stats response data items0 lifetime mode hc conf
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcConf
type FriendStatsResponseDataItems0LifetimeModeHcConf struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHcConfProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hc conf additional properties
	FriendStatsResponseDataItems0LifetimeModeHcConfAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcConf) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcConfProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcConf

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcConfAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcConf) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcConfProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcConfAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcConfAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc conf
func (m *FriendStatsResponseDataItems0LifetimeModeHcConf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHcConf) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_conf" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcConf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcConf) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcConf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcConfProperties friend stats response data items0 lifetime mode hc conf properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcConfProperties
type FriendStatsResponseDataItems0LifetimeModeHcConfProperties struct {

	// confirms
	Confirms float64 `json:"confirms,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// denies
	Denies float64 `json:"denies,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hc conf properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHcConfPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcConfProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcConfProperties

	rcv.Confirms = stage1.Confirms
	rcv.Deaths = stage1.Deaths
	rcv.Denies = stage1.Denies
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "confirms")
	delete(stage2, "deaths")
	delete(stage2, "denies")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcConfPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcConfProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// confirms
		Confirms float64 `json:"confirms,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// denies
		Denies float64 `json:"denies,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Confirms = m.Confirms
	stage1.Deaths = m.Deaths
	stage1.Denies = m.Denies
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcConfPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcConfPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc conf properties
func (m *FriendStatsResponseDataItems0LifetimeModeHcConfProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcConfProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcConfProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcConfProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcCyber friend stats response data items0 lifetime mode hc cyber
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcCyber
type FriendStatsResponseDataItems0LifetimeModeHcCyber struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hc cyber additional properties
	FriendStatsResponseDataItems0LifetimeModeHcCyberAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyber) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcCyber

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcCyberAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcCyber) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcCyberAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcCyberAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc cyber
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHcCyber) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_cyber" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyber) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcCyber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcCyberProperties friend stats response data items0 lifetime mode hc cyber properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcCyberProperties
type FriendStatsResponseDataItems0LifetimeModeHcCyberProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// revives
	Revives float64 `json:"revives,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hc cyber properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHcCyberPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcCyberProperties

	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Revives = stage1.Revives
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "revives")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcCyberPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcCyberProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// revives
		Revives float64 `json:"revives,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Revives = m.Revives
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcCyberPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcCyberPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc cyber properties
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcCyberProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcCyberProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcDom friend stats response data items0 lifetime mode hc dom
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcDom
type FriendStatsResponseDataItems0LifetimeModeHcDom struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHcDomProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hc dom additional properties
	FriendStatsResponseDataItems0LifetimeModeHcDomAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcDom) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcDomProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcDom

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcDomAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcDom) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcDomProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcDomAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcDomAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc dom
func (m *FriendStatsResponseDataItems0LifetimeModeHcDom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHcDom) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_dom" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcDom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcDom) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcDom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcDomProperties friend stats response data items0 lifetime mode hc dom properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcDomProperties
type FriendStatsResponseDataItems0LifetimeModeHcDomProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hc dom properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHcDomPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcDomProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcDomProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcDomPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcDomProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcDomPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcDomPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc dom properties
func (m *FriendStatsResponseDataItems0LifetimeModeHcDomProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcDomProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcDomProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcDomProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcHq friend stats response data items0 lifetime mode hc hq
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcHq
type FriendStatsResponseDataItems0LifetimeModeHcHq struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHcHqProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hc hq additional properties
	FriendStatsResponseDataItems0LifetimeModeHcHqAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcHq) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcHqProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcHq

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcHqAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcHq) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcHqProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcHqAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcHqAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc hq
func (m *FriendStatsResponseDataItems0LifetimeModeHcHq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHcHq) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_hq" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcHq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcHq) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcHq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcHqProperties friend stats response data items0 lifetime mode hc hq properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcHqProperties
type FriendStatsResponseDataItems0LifetimeModeHcHqProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hc hq properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHcHqPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcHqProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcHqProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcHqPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcHqProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcHqPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcHqPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc hq properties
func (m *FriendStatsResponseDataItems0LifetimeModeHcHqProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcHqProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcHqProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcHqProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcSd friend stats response data items0 lifetime mode hc sd
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcSd
type FriendStatsResponseDataItems0LifetimeModeHcSd struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHcSdProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hc sd additional properties
	FriendStatsResponseDataItems0LifetimeModeHcSdAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcSd) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcSdProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcSd

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcSdAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcSd) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcSdProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcSdAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcSdAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc sd
func (m *FriendStatsResponseDataItems0LifetimeModeHcSd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHcSd) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_sd" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcSd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcSd) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcSd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcSdProperties friend stats response data items0 lifetime mode hc sd properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcSdProperties
type FriendStatsResponseDataItems0LifetimeModeHcSdProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defuses
	Defuses float64 `json:"defuses,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hc sd properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHcSdPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcSdProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcSdProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defuses = stage1.Defuses
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defuses")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcSdPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcSdProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defuses = m.Defuses
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcSdPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcSdPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc sd properties
func (m *FriendStatsResponseDataItems0LifetimeModeHcSdProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcSdProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcSdProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcSdProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcWar friend stats response data items0 lifetime mode hc war
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcWar
type FriendStatsResponseDataItems0LifetimeModeHcWar struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHcWarProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hc war additional properties
	FriendStatsResponseDataItems0LifetimeModeHcWarAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcWar) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcWarProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcWar

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcWarAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcWar) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHcWarProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcWarAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcWarAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc war
func (m *FriendStatsResponseDataItems0LifetimeModeHcWar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHcWar) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hc_war" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcWar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcWar) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcWar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHcWarProperties friend stats response data items0 lifetime mode hc war properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHcWarProperties
type FriendStatsResponseDataItems0LifetimeModeHcWarProperties struct {

	// assists
	Assists float64 `json:"assists,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hc war properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHcWarPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHcWarProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHcWarProperties

	rcv.Assists = stage1.Assists
	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "assists")
	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHcWarPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHcWarProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Assists = m.Assists
	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHcWarPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHcWarPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hc war properties
func (m *FriendStatsResponseDataItems0LifetimeModeHcWarProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcWarProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHcWarProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHcWarProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHq friend stats response data items0 lifetime mode hq
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHq
type FriendStatsResponseDataItems0LifetimeModeHq struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeHqProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode hq additional properties
	FriendStatsResponseDataItems0LifetimeModeHqAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHq) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHqProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHq

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHqAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHq) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeHqProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHqAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHqAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hq
func (m *FriendStatsResponseDataItems0LifetimeModeHq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeHq) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "hq" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHq) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeHqProperties friend stats response data items0 lifetime mode hq properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeHqProperties
type FriendStatsResponseDataItems0LifetimeModeHqProperties struct {

	// captures
	Captures float64 `json:"captures,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode hq properties additional properties
	FriendStatsResponseDataItems0LifetimeModeHqPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeHqProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeHqProperties

	rcv.Captures = stage1.Captures
	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "captures")
	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeHqPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeHqProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// captures
		Captures float64 `json:"captures,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Captures = m.Captures
	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeHqPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeHqPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode hq properties
func (m *FriendStatsResponseDataItems0LifetimeModeHqProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHqProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeHqProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeHqProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeInfect friend stats response data items0 lifetime mode infect
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeInfect
type FriendStatsResponseDataItems0LifetimeModeInfect struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeInfectProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode infect additional properties
	FriendStatsResponseDataItems0LifetimeModeInfectAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeInfect) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeInfectProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeInfect

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeInfectAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeInfect) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeInfectProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeInfectAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeInfectAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode infect
func (m *FriendStatsResponseDataItems0LifetimeModeInfect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeInfect) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "infect" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeInfect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeInfect) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeInfect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeInfectProperties friend stats response data items0 lifetime mode infect properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeInfectProperties
type FriendStatsResponseDataItems0LifetimeModeInfectProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// infected
	Infected float64 `json:"infected,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time
	Time float64 `json:"time,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode infect properties additional properties
	FriendStatsResponseDataItems0LifetimeModeInfectPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeInfectProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// infected
		Infected float64 `json:"infected,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time
		Time float64 `json:"time,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeInfectProperties

	rcv.Deaths = stage1.Deaths
	rcv.Infected = stage1.Infected
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.Time = stage1.Time
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "infected")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "time")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeInfectPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeInfectProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// infected
		Infected float64 `json:"infected,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time
		Time float64 `json:"time,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Infected = m.Infected
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.Time = m.Time
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeInfectPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeInfectPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode infect properties
func (m *FriendStatsResponseDataItems0LifetimeModeInfectProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeInfectProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeInfectProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeInfectProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeKoth friend stats response data items0 lifetime mode koth
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeKoth
type FriendStatsResponseDataItems0LifetimeModeKoth struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeKothProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode koth additional properties
	FriendStatsResponseDataItems0LifetimeModeKothAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeKoth) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeKothProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeKoth

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeKothAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeKoth) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeKothProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeKothAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeKothAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode koth
func (m *FriendStatsResponseDataItems0LifetimeModeKoth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeKoth) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "koth" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeKoth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeKoth) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeKoth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeKothProperties friend stats response data items0 lifetime mode koth properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeKothProperties
type FriendStatsResponseDataItems0LifetimeModeKothProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defends
	Defends float64 `json:"defends,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// obj time
	ObjTime float64 `json:"objTime,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode koth properties additional properties
	FriendStatsResponseDataItems0LifetimeModeKothPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeKothProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeKothProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defends = stage1.Defends
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.ObjTime = stage1.ObjTime
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defends")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "objTime")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeKothPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeKothProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defends
		Defends float64 `json:"defends,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// obj time
		ObjTime float64 `json:"objTime,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defends = m.Defends
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.ObjTime = m.ObjTime
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeKothPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeKothPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode koth properties
func (m *FriendStatsResponseDataItems0LifetimeModeKothProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeKothProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeKothProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeKothProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeSd friend stats response data items0 lifetime mode sd
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeSd
type FriendStatsResponseDataItems0LifetimeModeSd struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeSdProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode sd additional properties
	FriendStatsResponseDataItems0LifetimeModeSdAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeSd) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeSdProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeSd

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeSdAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeSd) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeSdProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeSdAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeSdAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode sd
func (m *FriendStatsResponseDataItems0LifetimeModeSd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeSd) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "sd" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeSd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeSd) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeSd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeSdProperties friend stats response data items0 lifetime mode sd properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeSdProperties
type FriendStatsResponseDataItems0LifetimeModeSdProperties struct {

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// defuses
	Defuses float64 `json:"defuses,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// plants
	Plants float64 `json:"plants,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode sd properties additional properties
	FriendStatsResponseDataItems0LifetimeModeSdPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeSdProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeSdProperties

	rcv.Deaths = stage1.Deaths
	rcv.Defuses = stage1.Defuses
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Plants = stage1.Plants
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "deaths")
	delete(stage2, "defuses")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "plants")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeSdPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeSdProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// defuses
		Defuses float64 `json:"defuses,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// plants
		Plants float64 `json:"plants,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Deaths = m.Deaths
	stage1.Defuses = m.Defuses
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Plants = m.Plants
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeSdPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeSdPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode sd properties
func (m *FriendStatsResponseDataItems0LifetimeModeSdProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeSdProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeSdProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeSdProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeWar friend stats response data items0 lifetime mode war
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeWar
type FriendStatsResponseDataItems0LifetimeModeWar struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeModeWarProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime mode war additional properties
	FriendStatsResponseDataItems0LifetimeModeWarAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeWar) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeWarProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeWar

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeWarAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeWar) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeModeWarProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeWarAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeWarAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode war
func (m *FriendStatsResponseDataItems0LifetimeModeWar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeModeWar) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "mode" + "." + "war" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeWar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeWar) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeWar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeModeWarProperties friend stats response data items0 lifetime mode war properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeModeWarProperties
type FriendStatsResponseDataItems0LifetimeModeWarProperties struct {

	// assists
	Assists float64 `json:"assists,omitempty"`

	// deaths
	Deaths float64 `json:"deaths,omitempty"`

	// kd ratio
	KdRatio float64 `json:"kdRatio,omitempty"`

	// kills
	Kills float64 `json:"kills,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// score per minute
	ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

	// time played
	TimePlayed float64 `json:"timePlayed,omitempty"`

	// friend stats response data items0 lifetime mode war properties additional properties
	FriendStatsResponseDataItems0LifetimeModeWarPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeModeWarProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeModeWarProperties

	rcv.Assists = stage1.Assists
	rcv.Deaths = stage1.Deaths
	rcv.KdRatio = stage1.KdRatio
	rcv.Kills = stage1.Kills
	rcv.Score = stage1.Score
	rcv.ScorePerMinute = stage1.ScorePerMinute
	rcv.TimePlayed = stage1.TimePlayed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "assists")
	delete(stage2, "deaths")
	delete(stage2, "kdRatio")
	delete(stage2, "kills")
	delete(stage2, "score")
	delete(stage2, "scorePerMinute")
	delete(stage2, "timePlayed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeModeWarPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeModeWarProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// assists
		Assists float64 `json:"assists,omitempty"`

		// deaths
		Deaths float64 `json:"deaths,omitempty"`

		// kd ratio
		KdRatio float64 `json:"kdRatio,omitempty"`

		// kills
		Kills float64 `json:"kills,omitempty"`

		// score
		Score float64 `json:"score,omitempty"`

		// score per minute
		ScorePerMinute float64 `json:"scorePerMinute,omitempty"`

		// time played
		TimePlayed float64 `json:"timePlayed,omitempty"`
	}

	stage1.Assists = m.Assists
	stage1.Deaths = m.Deaths
	stage1.KdRatio = m.KdRatio
	stage1.Kills = m.Kills
	stage1.Score = m.Score
	stage1.ScorePerMinute = m.ScorePerMinute
	stage1.TimePlayed = m.TimePlayed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeModeWarPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeModeWarPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime mode war properties
func (m *FriendStatsResponseDataItems0LifetimeModeWarProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeWarProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeModeWarProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeModeWarProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakData friend stats response data items0 lifetime scorestreak data
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakData
type FriendStatsResponseDataItems0LifetimeScorestreakData struct {

	// lethal scorestreak data
	LethalScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData `json:"lethalScorestreakData,omitempty"`

	// support scorestreak data
	SupportScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData `json:"supportScorestreakData,omitempty"`

	// friend stats response data items0 lifetime scorestreak data additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// lethal scorestreak data
		LethalScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData `json:"lethalScorestreakData,omitempty"`

		// support scorestreak data
		SupportScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData `json:"supportScorestreakData,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakData

	rcv.LethalScorestreakData = stage1.LethalScorestreakData
	rcv.SupportScorestreakData = stage1.SupportScorestreakData
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "lethalScorestreakData")
	delete(stage2, "supportScorestreakData")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// lethal scorestreak data
		LethalScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData `json:"lethalScorestreakData,omitempty"`

		// support scorestreak data
		SupportScorestreakData *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData `json:"supportScorestreakData,omitempty"`
	}

	stage1.LethalScorestreakData = m.LethalScorestreakData
	stage1.SupportScorestreakData = m.SupportScorestreakData

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data
func (m *FriendStatsResponseDataItems0LifetimeScorestreakData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLethalScorestreakData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportScorestreakData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakData) validateLethalScorestreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.LethalScorestreakData) { // not required
		return nil
	}

	if m.LethalScorestreakData != nil {
		if err := m.LethalScorestreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakData) validateSupportScorestreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportScorestreakData) { // not required
		return nil
	}

	if m.SupportScorestreakData != nil {
		if err := m.SupportScorestreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakData) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData friend stats response data items0 lifetime scorestreak data lethal scorestreak data
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData struct {

	// bradley
	Bradley *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley `json:"bradley,omitempty"`

	// chopper gunner
	ChopperGunner *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner `json:"chopper_gunner,omitempty"`

	// chopper support
	ChopperSupport *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport `json:"chopper_support,omitempty"`

	// cruise predator
	CruisePredator *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator `json:"cruise_predator,omitempty"`

	// gunship
	Gunship *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship `json:"gunship,omitempty"`

	// hover jet
	HoverJet *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet `json:"hover_jet,omitempty"`

	// juggernaut
	Juggernaut *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut `json:"juggernaut,omitempty"`

	// manual turret
	ManualTurret *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret `json:"manual_turret,omitempty"`

	// nuke
	Nuke *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke `json:"nuke,omitempty"`

	// pac sentry
	PacSentry *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry `json:"pac_sentry,omitempty"`

	// precision airstrike
	PrecisionAirstrike *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike `json:"precision_airstrike,omitempty"`

	// sentry gun
	SentryGun *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun `json:"sentry_gun,omitempty"`

	// toma strike
	TomaStrike *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike `json:"toma_strike,omitempty"`

	// white phosphorus
	WhitePhosphorus *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus `json:"white_phosphorus,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// bradley
		Bradley *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley `json:"bradley,omitempty"`

		// chopper gunner
		ChopperGunner *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner `json:"chopper_gunner,omitempty"`

		// chopper support
		ChopperSupport *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport `json:"chopper_support,omitempty"`

		// cruise predator
		CruisePredator *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator `json:"cruise_predator,omitempty"`

		// gunship
		Gunship *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship `json:"gunship,omitempty"`

		// hover jet
		HoverJet *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet `json:"hover_jet,omitempty"`

		// juggernaut
		Juggernaut *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut `json:"juggernaut,omitempty"`

		// manual turret
		ManualTurret *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret `json:"manual_turret,omitempty"`

		// nuke
		Nuke *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke `json:"nuke,omitempty"`

		// pac sentry
		PacSentry *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry `json:"pac_sentry,omitempty"`

		// precision airstrike
		PrecisionAirstrike *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike `json:"precision_airstrike,omitempty"`

		// sentry gun
		SentryGun *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun `json:"sentry_gun,omitempty"`

		// toma strike
		TomaStrike *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike `json:"toma_strike,omitempty"`

		// white phosphorus
		WhitePhosphorus *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus `json:"white_phosphorus,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData

	rcv.Bradley = stage1.Bradley
	rcv.ChopperGunner = stage1.ChopperGunner
	rcv.ChopperSupport = stage1.ChopperSupport
	rcv.CruisePredator = stage1.CruisePredator
	rcv.Gunship = stage1.Gunship
	rcv.HoverJet = stage1.HoverJet
	rcv.Juggernaut = stage1.Juggernaut
	rcv.ManualTurret = stage1.ManualTurret
	rcv.Nuke = stage1.Nuke
	rcv.PacSentry = stage1.PacSentry
	rcv.PrecisionAirstrike = stage1.PrecisionAirstrike
	rcv.SentryGun = stage1.SentryGun
	rcv.TomaStrike = stage1.TomaStrike
	rcv.WhitePhosphorus = stage1.WhitePhosphorus
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "bradley")
	delete(stage2, "chopper_gunner")
	delete(stage2, "chopper_support")
	delete(stage2, "cruise_predator")
	delete(stage2, "gunship")
	delete(stage2, "hover_jet")
	delete(stage2, "juggernaut")
	delete(stage2, "manual_turret")
	delete(stage2, "nuke")
	delete(stage2, "pac_sentry")
	delete(stage2, "precision_airstrike")
	delete(stage2, "sentry_gun")
	delete(stage2, "toma_strike")
	delete(stage2, "white_phosphorus")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// bradley
		Bradley *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley `json:"bradley,omitempty"`

		// chopper gunner
		ChopperGunner *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner `json:"chopper_gunner,omitempty"`

		// chopper support
		ChopperSupport *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport `json:"chopper_support,omitempty"`

		// cruise predator
		CruisePredator *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator `json:"cruise_predator,omitempty"`

		// gunship
		Gunship *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship `json:"gunship,omitempty"`

		// hover jet
		HoverJet *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet `json:"hover_jet,omitempty"`

		// juggernaut
		Juggernaut *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut `json:"juggernaut,omitempty"`

		// manual turret
		ManualTurret *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret `json:"manual_turret,omitempty"`

		// nuke
		Nuke *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke `json:"nuke,omitempty"`

		// pac sentry
		PacSentry *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry `json:"pac_sentry,omitempty"`

		// precision airstrike
		PrecisionAirstrike *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike `json:"precision_airstrike,omitempty"`

		// sentry gun
		SentryGun *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun `json:"sentry_gun,omitempty"`

		// toma strike
		TomaStrike *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike `json:"toma_strike,omitempty"`

		// white phosphorus
		WhitePhosphorus *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus `json:"white_phosphorus,omitempty"`
	}

	stage1.Bradley = m.Bradley
	stage1.ChopperGunner = m.ChopperGunner
	stage1.ChopperSupport = m.ChopperSupport
	stage1.CruisePredator = m.CruisePredator
	stage1.Gunship = m.Gunship
	stage1.HoverJet = m.HoverJet
	stage1.Juggernaut = m.Juggernaut
	stage1.ManualTurret = m.ManualTurret
	stage1.Nuke = m.Nuke
	stage1.PacSentry = m.PacSentry
	stage1.PrecisionAirstrike = m.PrecisionAirstrike
	stage1.SentryGun = m.SentryGun
	stage1.TomaStrike = m.TomaStrike
	stage1.WhitePhosphorus = m.WhitePhosphorus

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBradley(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChopperGunner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChopperSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCruisePredator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGunship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoverJet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJuggernaut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualTurret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNuke(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacSentry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecisionAirstrike(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentryGun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTomaStrike(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitePhosphorus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateBradley(formats strfmt.Registry) error {

	if swag.IsZero(m.Bradley) { // not required
		return nil
	}

	if m.Bradley != nil {
		if err := m.Bradley.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "bradley")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateChopperGunner(formats strfmt.Registry) error {

	if swag.IsZero(m.ChopperGunner) { // not required
		return nil
	}

	if m.ChopperGunner != nil {
		if err := m.ChopperGunner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_gunner")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateChopperSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.ChopperSupport) { // not required
		return nil
	}

	if m.ChopperSupport != nil {
		if err := m.ChopperSupport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_support")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateCruisePredator(formats strfmt.Registry) error {

	if swag.IsZero(m.CruisePredator) { // not required
		return nil
	}

	if m.CruisePredator != nil {
		if err := m.CruisePredator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "cruise_predator")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateGunship(formats strfmt.Registry) error {

	if swag.IsZero(m.Gunship) { // not required
		return nil
	}

	if m.Gunship != nil {
		if err := m.Gunship.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "gunship")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateHoverJet(formats strfmt.Registry) error {

	if swag.IsZero(m.HoverJet) { // not required
		return nil
	}

	if m.HoverJet != nil {
		if err := m.HoverJet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "hover_jet")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateJuggernaut(formats strfmt.Registry) error {

	if swag.IsZero(m.Juggernaut) { // not required
		return nil
	}

	if m.Juggernaut != nil {
		if err := m.Juggernaut.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "juggernaut")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateManualTurret(formats strfmt.Registry) error {

	if swag.IsZero(m.ManualTurret) { // not required
		return nil
	}

	if m.ManualTurret != nil {
		if err := m.ManualTurret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "manual_turret")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateNuke(formats strfmt.Registry) error {

	if swag.IsZero(m.Nuke) { // not required
		return nil
	}

	if m.Nuke != nil {
		if err := m.Nuke.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "nuke")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validatePacSentry(formats strfmt.Registry) error {

	if swag.IsZero(m.PacSentry) { // not required
		return nil
	}

	if m.PacSentry != nil {
		if err := m.PacSentry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "pac_sentry")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validatePrecisionAirstrike(formats strfmt.Registry) error {

	if swag.IsZero(m.PrecisionAirstrike) { // not required
		return nil
	}

	if m.PrecisionAirstrike != nil {
		if err := m.PrecisionAirstrike.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "precision_airstrike")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateSentryGun(formats strfmt.Registry) error {

	if swag.IsZero(m.SentryGun) { // not required
		return nil
	}

	if m.SentryGun != nil {
		if err := m.SentryGun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "sentry_gun")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateTomaStrike(formats strfmt.Registry) error {

	if swag.IsZero(m.TomaStrike) { // not required
		return nil
	}

	if m.TomaStrike != nil {
		if err := m.TomaStrike.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "toma_strike")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) validateWhitePhosphorus(formats strfmt.Registry) error {

	if swag.IsZero(m.WhitePhosphorus) { // not required
		return nil
	}

	if m.WhitePhosphorus != nil {
		if err := m.WhitePhosphorus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "white_phosphorus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley friend stats response data items0 lifetime scorestreak data lethal scorestreak data bradley
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data bradley additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data bradley
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "bradley" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradley
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data bradley properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data bradley properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data bradley properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataBradleyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper gunner
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper gunner additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper gunner
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_gunner" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper gunner properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper gunner properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper gunner properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperGunnerProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper support
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper support additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper support
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "chopper_support" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper support properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper support properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data chopper support properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataChopperSupportProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator friend stats response data items0 lifetime scorestreak data lethal scorestreak data cruise predator
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data cruise predator additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data cruise predator
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "cruise_predator" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data cruise predator properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data cruise predator properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data cruise predator properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataCruisePredatorProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship friend stats response data items0 lifetime scorestreak data lethal scorestreak data gunship
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data gunship additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data gunship
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "gunship" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data gunship properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data gunship properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data gunship properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataGunshipProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet friend stats response data items0 lifetime scorestreak data lethal scorestreak data hover jet
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data hover jet additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data hover jet
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "hover_jet" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data hover jet properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data hover jet properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data hover jet properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataHoverJetProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut friend stats response data items0 lifetime scorestreak data lethal scorestreak data juggernaut
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data juggernaut additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data juggernaut
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "juggernaut" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernaut
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data juggernaut properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data juggernaut properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data juggernaut properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataJuggernautProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret friend stats response data items0 lifetime scorestreak data lethal scorestreak data manual turret
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data manual turret additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data manual turret
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "manual_turret" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data manual turret properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data manual turret properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data manual turret properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataManualTurretProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke friend stats response data items0 lifetime scorestreak data lethal scorestreak data nuke
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data nuke additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data nuke
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "nuke" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNuke
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data nuke properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data nuke properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data nuke properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataNukeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry friend stats response data items0 lifetime scorestreak data lethal scorestreak data pac sentry
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data pac sentry additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data pac sentry
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "pac_sentry" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data pac sentry properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data pac sentry properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data pac sentry properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPacSentryProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike friend stats response data items0 lifetime scorestreak data lethal scorestreak data precision airstrike
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data precision airstrike additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data precision airstrike
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "precision_airstrike" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrike
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data precision airstrike properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data precision airstrike properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data precision airstrike properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataPrecisionAirstrikeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun friend stats response data items0 lifetime scorestreak data lethal scorestreak data sentry gun
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data sentry gun additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data sentry gun
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "sentry_gun" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data sentry gun properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data sentry gun properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data sentry gun properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataSentryGunProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike friend stats response data items0 lifetime scorestreak data lethal scorestreak data toma strike
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data toma strike additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data toma strike
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "toma_strike" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrike
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data toma strike properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data toma strike properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data toma strike properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataTomaStrikeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus friend stats response data items0 lifetime scorestreak data lethal scorestreak data white phosphorus
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data white phosphorus additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data white phosphorus
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "lethalScorestreakData" + "." + "white_phosphorus" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties friend stats response data items0 lifetime scorestreak data lethal scorestreak data white phosphorus properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data lethal scorestreak data white phosphorus properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data lethal scorestreak data white phosphorus properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataLethalScorestreakDataWhitePhosphorusProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData friend stats response data items0 lifetime scorestreak data support scorestreak data
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData struct {

	// airdrop
	Airdrop *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop `json:"airdrop,omitempty"`

	// airdrop multiple
	AirdropMultiple *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple `json:"airdrop_multiple,omitempty"`

	// directional uav
	DirectionalUav *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav `json:"directional_uav,omitempty"`

	// radar drone overwatch
	RadarDroneOverwatch *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch `json:"radar_drone_overwatch,omitempty"`

	// scrambler drone guard
	ScramblerDroneGuard *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard `json:"scrambler_drone_guard,omitempty"`

	// uav
	Uav *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav `json:"uav,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// airdrop
		Airdrop *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop `json:"airdrop,omitempty"`

		// airdrop multiple
		AirdropMultiple *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple `json:"airdrop_multiple,omitempty"`

		// directional uav
		DirectionalUav *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav `json:"directional_uav,omitempty"`

		// radar drone overwatch
		RadarDroneOverwatch *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch `json:"radar_drone_overwatch,omitempty"`

		// scrambler drone guard
		ScramblerDroneGuard *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard `json:"scrambler_drone_guard,omitempty"`

		// uav
		Uav *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav `json:"uav,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData

	rcv.Airdrop = stage1.Airdrop
	rcv.AirdropMultiple = stage1.AirdropMultiple
	rcv.DirectionalUav = stage1.DirectionalUav
	rcv.RadarDroneOverwatch = stage1.RadarDroneOverwatch
	rcv.ScramblerDroneGuard = stage1.ScramblerDroneGuard
	rcv.Uav = stage1.Uav
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "airdrop")
	delete(stage2, "airdrop_multiple")
	delete(stage2, "directional_uav")
	delete(stage2, "radar_drone_overwatch")
	delete(stage2, "scrambler_drone_guard")
	delete(stage2, "uav")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// airdrop
		Airdrop *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop `json:"airdrop,omitempty"`

		// airdrop multiple
		AirdropMultiple *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple `json:"airdrop_multiple,omitempty"`

		// directional uav
		DirectionalUav *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav `json:"directional_uav,omitempty"`

		// radar drone overwatch
		RadarDroneOverwatch *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch `json:"radar_drone_overwatch,omitempty"`

		// scrambler drone guard
		ScramblerDroneGuard *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard `json:"scrambler_drone_guard,omitempty"`

		// uav
		Uav *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav `json:"uav,omitempty"`
	}

	stage1.Airdrop = m.Airdrop
	stage1.AirdropMultiple = m.AirdropMultiple
	stage1.DirectionalUav = m.DirectionalUav
	stage1.RadarDroneOverwatch = m.RadarDroneOverwatch
	stage1.ScramblerDroneGuard = m.ScramblerDroneGuard
	stage1.Uav = m.Uav

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirdrop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirdropMultiple(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectionalUav(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadarDroneOverwatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScramblerDroneGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUav(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) validateAirdrop(formats strfmt.Registry) error {

	if swag.IsZero(m.Airdrop) { // not required
		return nil
	}

	if m.Airdrop != nil {
		if err := m.Airdrop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) validateAirdropMultiple(formats strfmt.Registry) error {

	if swag.IsZero(m.AirdropMultiple) { // not required
		return nil
	}

	if m.AirdropMultiple != nil {
		if err := m.AirdropMultiple.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop_multiple")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) validateDirectionalUav(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectionalUav) { // not required
		return nil
	}

	if m.DirectionalUav != nil {
		if err := m.DirectionalUav.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "directional_uav")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) validateRadarDroneOverwatch(formats strfmt.Registry) error {

	if swag.IsZero(m.RadarDroneOverwatch) { // not required
		return nil
	}

	if m.RadarDroneOverwatch != nil {
		if err := m.RadarDroneOverwatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "radar_drone_overwatch")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) validateScramblerDroneGuard(formats strfmt.Registry) error {

	if swag.IsZero(m.ScramblerDroneGuard) { // not required
		return nil
	}

	if m.ScramblerDroneGuard != nil {
		if err := m.ScramblerDroneGuard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "scrambler_drone_guard")
			}
			return err
		}
	}

	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) validateUav(formats strfmt.Registry) error {

	if swag.IsZero(m.Uav) { // not required
		return nil
	}

	if m.Uav != nil {
		if err := m.Uav.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "uav")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdrop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop multiple
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop multiple additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop multiple
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "airdrop_multiple" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiple
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop multiple properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop multiple properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultiplePropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop multiple properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropMultipleProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data airdrop properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataAirdropProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav friend stats response data items0 lifetime scorestreak data support scorestreak data directional uav
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data directional uav additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data directional uav
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "directional_uav" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUav
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties friend stats response data items0 lifetime scorestreak data support scorestreak data directional uav properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data directional uav properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data directional uav properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataDirectionalUavProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch friend stats response data items0 lifetime scorestreak data support scorestreak data radar drone overwatch
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data radar drone overwatch additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data radar drone overwatch
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "radar_drone_overwatch" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties friend stats response data items0 lifetime scorestreak data support scorestreak data radar drone overwatch properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data radar drone overwatch properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data radar drone overwatch properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataRadarDroneOverwatchProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard friend stats response data items0 lifetime scorestreak data support scorestreak data scrambler drone guard
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data scrambler drone guard additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data scrambler drone guard
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "scrambler_drone_guard" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties friend stats response data items0 lifetime scorestreak data support scorestreak data scrambler drone guard properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data scrambler drone guard properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data scrambler drone guard properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataScramblerDroneGuardProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav friend stats response data items0 lifetime scorestreak data support scorestreak data uav
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav struct {

	// properties
	Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties `json:"properties,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data uav additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data uav
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifetime" + "." + "scorestreakData" + "." + "supportScorestreakData" + "." + "uav" + "." + "properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUav
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties friend stats response data items0 lifetime scorestreak data support scorestreak data uav properties
//
// swagger:model FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties
type FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties struct {

	// awarded count
	AwardedCount float64 `json:"awardedCount,omitempty"`

	// extra stat1
	ExtraStat1 float64 `json:"extraStat1,omitempty"`

	// uses
	Uses float64 `json:"uses,omitempty"`

	// friend stats response data items0 lifetime scorestreak data support scorestreak data uav properties additional properties
	FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties

	rcv.AwardedCount = stage1.AwardedCount
	rcv.ExtraStat1 = stage1.ExtraStat1
	rcv.Uses = stage1.Uses
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "awardedCount")
	delete(stage2, "extraStat1")
	delete(stage2, "uses")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// awarded count
		AwardedCount float64 `json:"awardedCount,omitempty"`

		// extra stat1
		ExtraStat1 float64 `json:"extraStat1,omitempty"`

		// uses
		Uses float64 `json:"uses,omitempty"`
	}

	stage1.AwardedCount = m.AwardedCount
	stage1.ExtraStat1 = m.ExtraStat1
	stage1.Uses = m.Uses

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavPropertiesAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 lifetime scorestreak data support scorestreak data uav properties
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0LifetimeScorestreakDataSupportScorestreakDataUavProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0Weekly friend stats response data items0 weekly
//
// swagger:model FriendStatsResponseDataItems0Weekly
type FriendStatsResponseDataItems0Weekly struct {

	// all
	All *FriendStatsResponseDataItems0WeeklyAll `json:"all,omitempty"`

	// map
	Map interface{} `json:"map,omitempty"`

	// mode
	Mode interface{} `json:"mode,omitempty"`

	// friend stats response data items0 weekly additional properties
	FriendStatsResponseDataItems0WeeklyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0Weekly) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// all
		All *FriendStatsResponseDataItems0WeeklyAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0Weekly

	rcv.All = stage1.All
	rcv.Map = stage1.Map
	rcv.Mode = stage1.Mode
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "all")
	delete(stage2, "map")
	delete(stage2, "mode")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0WeeklyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0Weekly) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// all
		All *FriendStatsResponseDataItems0WeeklyAll `json:"all,omitempty"`

		// map
		Map interface{} `json:"map,omitempty"`

		// mode
		Mode interface{} `json:"mode,omitempty"`
	}

	stage1.All = m.All
	stage1.Map = m.Map
	stage1.Mode = m.Mode

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0WeeklyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0WeeklyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 weekly
func (m *FriendStatsResponseDataItems0Weekly) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FriendStatsResponseDataItems0Weekly) validateAll(formats strfmt.Registry) error {

	if swag.IsZero(m.All) { // not required
		return nil
	}

	if m.All != nil {
		if err := m.All.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekly" + "." + "all")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0Weekly) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0Weekly) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0Weekly
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FriendStatsResponseDataItems0WeeklyAll friend stats response data items0 weekly all
//
// swagger:model FriendStatsResponseDataItems0WeeklyAll
type FriendStatsResponseDataItems0WeeklyAll struct {

	// properties
	Properties interface{} `json:"properties,omitempty"`

	// friend stats response data items0 weekly all additional properties
	FriendStatsResponseDataItems0WeeklyAllAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FriendStatsResponseDataItems0WeeklyAll) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FriendStatsResponseDataItems0WeeklyAll

	rcv.Properties = stage1.Properties
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "properties")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FriendStatsResponseDataItems0WeeklyAllAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FriendStatsResponseDataItems0WeeklyAll) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// properties
		Properties interface{} `json:"properties,omitempty"`
	}

	stage1.Properties = m.Properties

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FriendStatsResponseDataItems0WeeklyAllAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FriendStatsResponseDataItems0WeeklyAllAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this friend stats response data items0 weekly all
func (m *FriendStatsResponseDataItems0WeeklyAll) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0WeeklyAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FriendStatsResponseDataItems0WeeklyAll) UnmarshalBinary(b []byte) error {
	var res FriendStatsResponseDataItems0WeeklyAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
