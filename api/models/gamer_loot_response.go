// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GamerLootResponse gamer loot response
//
// swagger:model gamerLootResponse
type GamerLootResponse struct {

	// data
	Data *GamerLootResponseData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// gamer loot response additional properties
	GamerLootResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerLootResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data *GamerLootResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerLootResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerLootResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerLootResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data *GamerLootResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerLootResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerLootResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer loot response
func (m *GamerLootResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerLootResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerLootResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerLootResponse) UnmarshalBinary(b []byte) error {
	var res GamerLootResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerLootResponseData gamer loot response data
//
// swagger:model GamerLootResponseData
type GamerLootResponseData struct {

	// message
	Message string `json:"message,omitempty"`

	// streams
	Streams *GamerLootResponseDataStreams `json:"streams,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// gamer loot response data additional properties
	GamerLootResponseDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerLootResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// message
		Message string `json:"message,omitempty"`

		// streams
		Streams *GamerLootResponseDataStreams `json:"streams,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerLootResponseData

	rcv.Message = stage1.Message
	rcv.Streams = stage1.Streams
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "message")
	delete(stage2, "streams")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerLootResponseDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerLootResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// message
		Message string `json:"message,omitempty"`

		// streams
		Streams *GamerLootResponseDataStreams `json:"streams,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.Message = m.Message
	stage1.Streams = m.Streams
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerLootResponseDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerLootResponseDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer loot response data
func (m *GamerLootResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStreams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerLootResponseData) validateStreams(formats strfmt.Registry) error {

	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	if m.Streams != nil {
		if err := m.Streams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "streams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerLootResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerLootResponseData) UnmarshalBinary(b []byte) error {
	var res GamerLootResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerLootResponseDataStreams gamer loot response data streams
//
// swagger:model GamerLootResponseDataStreams
type GamerLootResponseDataStreams struct {

	// loot season 0
	LootSeason0 *GamerLootResponseDataStreamsLootSeason0 `json:"loot_season_0,omitempty"`

	// loot season 1
	LootSeason1 *GamerLootResponseDataStreamsLootSeason1 `json:"loot_season_1,omitempty"`

	// gamer loot response data streams additional properties
	GamerLootResponseDataStreamsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerLootResponseDataStreams) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// loot season 0
		LootSeason0 *GamerLootResponseDataStreamsLootSeason0 `json:"loot_season_0,omitempty"`

		// loot season 1
		LootSeason1 *GamerLootResponseDataStreamsLootSeason1 `json:"loot_season_1,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerLootResponseDataStreams

	rcv.LootSeason0 = stage1.LootSeason0
	rcv.LootSeason1 = stage1.LootSeason1
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "loot_season_0")
	delete(stage2, "loot_season_1")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerLootResponseDataStreamsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerLootResponseDataStreams) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// loot season 0
		LootSeason0 *GamerLootResponseDataStreamsLootSeason0 `json:"loot_season_0,omitempty"`

		// loot season 1
		LootSeason1 *GamerLootResponseDataStreamsLootSeason1 `json:"loot_season_1,omitempty"`
	}

	stage1.LootSeason0 = m.LootSeason0
	stage1.LootSeason1 = m.LootSeason1

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerLootResponseDataStreamsAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerLootResponseDataStreamsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer loot response data streams
func (m *GamerLootResponseDataStreams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLootSeason0(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLootSeason1(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamerLootResponseDataStreams) validateLootSeason0(formats strfmt.Registry) error {

	if swag.IsZero(m.LootSeason0) { // not required
		return nil
	}

	if m.LootSeason0 != nil {
		if err := m.LootSeason0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "streams" + "." + "loot_season_0")
			}
			return err
		}
	}

	return nil
}

func (m *GamerLootResponseDataStreams) validateLootSeason1(formats strfmt.Registry) error {

	if swag.IsZero(m.LootSeason1) { // not required
		return nil
	}

	if m.LootSeason1 != nil {
		if err := m.LootSeason1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "streams" + "." + "loot_season_1")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamerLootResponseDataStreams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerLootResponseDataStreams) UnmarshalBinary(b []byte) error {
	var res GamerLootResponseDataStreams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerLootResponseDataStreamsLootSeason0 gamer loot response data streams loot season0
//
// swagger:model GamerLootResponseDataStreamsLootSeason0
type GamerLootResponseDataStreamsLootSeason0 struct {

	// category name label
	CategoryNameLabel string `json:"categoryNameLabel,omitempty"`

	// category title label
	CategoryTitleLabel string `json:"categoryTitleLabel,omitempty"`

	// items obtained
	ItemsObtained interface{} `json:"itemsObtained,omitempty"`

	// loot type
	LootType interface{} `json:"lootType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// premium
	Premium bool `json:"premium,omitempty"`

	// premium token owned not redeemed
	PremiumTokenOwnedNotRedeemed bool `json:"premiumTokenOwnedNotRedeemed,omitempty"`

	// rarity
	Rarity interface{} `json:"rarity,omitempty"`

	// season info Url key
	SeasonInfoURLKey string `json:"seasonInfoUrlKey,omitempty"`

	// stream type
	StreamType string `json:"streamType,omitempty"`

	// tier
	Tier int64 `json:"tier,omitempty"`

	// tier skip tokens unredeemed
	TierSkipTokensUnredeemed interface{} `json:"tierSkipTokensUnredeemed,omitempty"`

	// gamer loot response data streams loot season0 additional properties
	GamerLootResponseDataStreamsLootSeason0AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerLootResponseDataStreamsLootSeason0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// category name label
		CategoryNameLabel string `json:"categoryNameLabel,omitempty"`

		// category title label
		CategoryTitleLabel string `json:"categoryTitleLabel,omitempty"`

		// items obtained
		ItemsObtained interface{} `json:"itemsObtained,omitempty"`

		// loot type
		LootType interface{} `json:"lootType,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// premium
		Premium bool `json:"premium,omitempty"`

		// premium token owned not redeemed
		PremiumTokenOwnedNotRedeemed bool `json:"premiumTokenOwnedNotRedeemed,omitempty"`

		// rarity
		Rarity interface{} `json:"rarity,omitempty"`

		// season info Url key
		SeasonInfoURLKey string `json:"seasonInfoUrlKey,omitempty"`

		// stream type
		StreamType string `json:"streamType,omitempty"`

		// tier
		Tier int64 `json:"tier,omitempty"`

		// tier skip tokens unredeemed
		TierSkipTokensUnredeemed interface{} `json:"tierSkipTokensUnredeemed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerLootResponseDataStreamsLootSeason0

	rcv.CategoryNameLabel = stage1.CategoryNameLabel
	rcv.CategoryTitleLabel = stage1.CategoryTitleLabel
	rcv.ItemsObtained = stage1.ItemsObtained
	rcv.LootType = stage1.LootType
	rcv.Name = stage1.Name
	rcv.Premium = stage1.Premium
	rcv.PremiumTokenOwnedNotRedeemed = stage1.PremiumTokenOwnedNotRedeemed
	rcv.Rarity = stage1.Rarity
	rcv.SeasonInfoURLKey = stage1.SeasonInfoURLKey
	rcv.StreamType = stage1.StreamType
	rcv.Tier = stage1.Tier
	rcv.TierSkipTokensUnredeemed = stage1.TierSkipTokensUnredeemed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "categoryNameLabel")
	delete(stage2, "categoryTitleLabel")
	delete(stage2, "itemsObtained")
	delete(stage2, "lootType")
	delete(stage2, "name")
	delete(stage2, "premium")
	delete(stage2, "premiumTokenOwnedNotRedeemed")
	delete(stage2, "rarity")
	delete(stage2, "seasonInfoUrlKey")
	delete(stage2, "streamType")
	delete(stage2, "tier")
	delete(stage2, "tierSkipTokensUnredeemed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerLootResponseDataStreamsLootSeason0AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerLootResponseDataStreamsLootSeason0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// category name label
		CategoryNameLabel string `json:"categoryNameLabel,omitempty"`

		// category title label
		CategoryTitleLabel string `json:"categoryTitleLabel,omitempty"`

		// items obtained
		ItemsObtained interface{} `json:"itemsObtained,omitempty"`

		// loot type
		LootType interface{} `json:"lootType,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// premium
		Premium bool `json:"premium,omitempty"`

		// premium token owned not redeemed
		PremiumTokenOwnedNotRedeemed bool `json:"premiumTokenOwnedNotRedeemed,omitempty"`

		// rarity
		Rarity interface{} `json:"rarity,omitempty"`

		// season info Url key
		SeasonInfoURLKey string `json:"seasonInfoUrlKey,omitempty"`

		// stream type
		StreamType string `json:"streamType,omitempty"`

		// tier
		Tier int64 `json:"tier,omitempty"`

		// tier skip tokens unredeemed
		TierSkipTokensUnredeemed interface{} `json:"tierSkipTokensUnredeemed,omitempty"`
	}

	stage1.CategoryNameLabel = m.CategoryNameLabel
	stage1.CategoryTitleLabel = m.CategoryTitleLabel
	stage1.ItemsObtained = m.ItemsObtained
	stage1.LootType = m.LootType
	stage1.Name = m.Name
	stage1.Premium = m.Premium
	stage1.PremiumTokenOwnedNotRedeemed = m.PremiumTokenOwnedNotRedeemed
	stage1.Rarity = m.Rarity
	stage1.SeasonInfoURLKey = m.SeasonInfoURLKey
	stage1.StreamType = m.StreamType
	stage1.Tier = m.Tier
	stage1.TierSkipTokensUnredeemed = m.TierSkipTokensUnredeemed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerLootResponseDataStreamsLootSeason0AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerLootResponseDataStreamsLootSeason0AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer loot response data streams loot season0
func (m *GamerLootResponseDataStreamsLootSeason0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerLootResponseDataStreamsLootSeason0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerLootResponseDataStreamsLootSeason0) UnmarshalBinary(b []byte) error {
	var res GamerLootResponseDataStreamsLootSeason0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GamerLootResponseDataStreamsLootSeason1 gamer loot response data streams loot season1
//
// swagger:model GamerLootResponseDataStreamsLootSeason1
type GamerLootResponseDataStreamsLootSeason1 struct {

	// category name label
	CategoryNameLabel string `json:"categoryNameLabel,omitempty"`

	// category title label
	CategoryTitleLabel string `json:"categoryTitleLabel,omitempty"`

	// items obtained
	ItemsObtained interface{} `json:"itemsObtained,omitempty"`

	// loot type
	LootType interface{} `json:"lootType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// premium
	Premium bool `json:"premium,omitempty"`

	// premium token owned not redeemed
	PremiumTokenOwnedNotRedeemed bool `json:"premiumTokenOwnedNotRedeemed,omitempty"`

	// rarity
	Rarity interface{} `json:"rarity,omitempty"`

	// season info Url key
	SeasonInfoURLKey string `json:"seasonInfoUrlKey,omitempty"`

	// stream type
	StreamType string `json:"streamType,omitempty"`

	// tier
	Tier int64 `json:"tier,omitempty"`

	// tier skip tokens unredeemed
	TierSkipTokensUnredeemed interface{} `json:"tierSkipTokensUnredeemed,omitempty"`

	// gamer loot response data streams loot season1 additional properties
	GamerLootResponseDataStreamsLootSeason1AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *GamerLootResponseDataStreamsLootSeason1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// category name label
		CategoryNameLabel string `json:"categoryNameLabel,omitempty"`

		// category title label
		CategoryTitleLabel string `json:"categoryTitleLabel,omitempty"`

		// items obtained
		ItemsObtained interface{} `json:"itemsObtained,omitempty"`

		// loot type
		LootType interface{} `json:"lootType,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// premium
		Premium bool `json:"premium,omitempty"`

		// premium token owned not redeemed
		PremiumTokenOwnedNotRedeemed bool `json:"premiumTokenOwnedNotRedeemed,omitempty"`

		// rarity
		Rarity interface{} `json:"rarity,omitempty"`

		// season info Url key
		SeasonInfoURLKey string `json:"seasonInfoUrlKey,omitempty"`

		// stream type
		StreamType string `json:"streamType,omitempty"`

		// tier
		Tier int64 `json:"tier,omitempty"`

		// tier skip tokens unredeemed
		TierSkipTokensUnredeemed interface{} `json:"tierSkipTokensUnredeemed,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GamerLootResponseDataStreamsLootSeason1

	rcv.CategoryNameLabel = stage1.CategoryNameLabel
	rcv.CategoryTitleLabel = stage1.CategoryTitleLabel
	rcv.ItemsObtained = stage1.ItemsObtained
	rcv.LootType = stage1.LootType
	rcv.Name = stage1.Name
	rcv.Premium = stage1.Premium
	rcv.PremiumTokenOwnedNotRedeemed = stage1.PremiumTokenOwnedNotRedeemed
	rcv.Rarity = stage1.Rarity
	rcv.SeasonInfoURLKey = stage1.SeasonInfoURLKey
	rcv.StreamType = stage1.StreamType
	rcv.Tier = stage1.Tier
	rcv.TierSkipTokensUnredeemed = stage1.TierSkipTokensUnredeemed
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "categoryNameLabel")
	delete(stage2, "categoryTitleLabel")
	delete(stage2, "itemsObtained")
	delete(stage2, "lootType")
	delete(stage2, "name")
	delete(stage2, "premium")
	delete(stage2, "premiumTokenOwnedNotRedeemed")
	delete(stage2, "rarity")
	delete(stage2, "seasonInfoUrlKey")
	delete(stage2, "streamType")
	delete(stage2, "tier")
	delete(stage2, "tierSkipTokensUnredeemed")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.GamerLootResponseDataStreamsLootSeason1AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m GamerLootResponseDataStreamsLootSeason1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// category name label
		CategoryNameLabel string `json:"categoryNameLabel,omitempty"`

		// category title label
		CategoryTitleLabel string `json:"categoryTitleLabel,omitempty"`

		// items obtained
		ItemsObtained interface{} `json:"itemsObtained,omitempty"`

		// loot type
		LootType interface{} `json:"lootType,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// premium
		Premium bool `json:"premium,omitempty"`

		// premium token owned not redeemed
		PremiumTokenOwnedNotRedeemed bool `json:"premiumTokenOwnedNotRedeemed,omitempty"`

		// rarity
		Rarity interface{} `json:"rarity,omitempty"`

		// season info Url key
		SeasonInfoURLKey string `json:"seasonInfoUrlKey,omitempty"`

		// stream type
		StreamType string `json:"streamType,omitempty"`

		// tier
		Tier int64 `json:"tier,omitempty"`

		// tier skip tokens unredeemed
		TierSkipTokensUnredeemed interface{} `json:"tierSkipTokensUnredeemed,omitempty"`
	}

	stage1.CategoryNameLabel = m.CategoryNameLabel
	stage1.CategoryTitleLabel = m.CategoryTitleLabel
	stage1.ItemsObtained = m.ItemsObtained
	stage1.LootType = m.LootType
	stage1.Name = m.Name
	stage1.Premium = m.Premium
	stage1.PremiumTokenOwnedNotRedeemed = m.PremiumTokenOwnedNotRedeemed
	stage1.Rarity = m.Rarity
	stage1.SeasonInfoURLKey = m.SeasonInfoURLKey
	stage1.StreamType = m.StreamType
	stage1.Tier = m.Tier
	stage1.TierSkipTokensUnredeemed = m.TierSkipTokensUnredeemed

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.GamerLootResponseDataStreamsLootSeason1AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.GamerLootResponseDataStreamsLootSeason1AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this gamer loot response data streams loot season1
func (m *GamerLootResponseDataStreamsLootSeason1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GamerLootResponseDataStreamsLootSeason1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamerLootResponseDataStreamsLootSeason1) UnmarshalBinary(b []byte) error {
	var res GamerLootResponseDataStreamsLootSeason1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
