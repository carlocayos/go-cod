// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BattlePassLootResponse battle pass loot response
//
// swagger:model battlePassLootResponse
type BattlePassLootResponse struct {

	// data
	Data *BattlePassLootResponseData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// battle pass loot response additional properties
	BattlePassLootResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data *BattlePassLootResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data *BattlePassLootResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response
func (m *BattlePassLootResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BattlePassLootResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponse) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseData battle pass loot response data
//
// swagger:model BattlePassLootResponseData
type BattlePassLootResponseData struct {

	// category name
	CategoryName string `json:"categoryName,omitempty"`

	// category title
	CategoryTitle string `json:"categoryTitle,omitempty"`

	// chase
	Chase interface{} `json:"chase,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// tiers
	Tiers *BattlePassLootResponseDataTiers `json:"tiers,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data additional properties
	BattlePassLootResponseDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// category name
		CategoryName string `json:"categoryName,omitempty"`

		// category title
		CategoryTitle string `json:"categoryTitle,omitempty"`

		// chase
		Chase interface{} `json:"chase,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// tiers
		Tiers *BattlePassLootResponseDataTiers `json:"tiers,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseData

	rcv.CategoryName = stage1.CategoryName
	rcv.CategoryTitle = stage1.CategoryTitle
	rcv.Chase = stage1.Chase
	rcv.Message = stage1.Message
	rcv.Tiers = stage1.Tiers
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "categoryName")
	delete(stage2, "categoryTitle")
	delete(stage2, "chase")
	delete(stage2, "message")
	delete(stage2, "tiers")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// category name
		CategoryName string `json:"categoryName,omitempty"`

		// category title
		CategoryTitle string `json:"categoryTitle,omitempty"`

		// chase
		Chase interface{} `json:"chase,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// tiers
		Tiers *BattlePassLootResponseDataTiers `json:"tiers,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.CategoryName = m.CategoryName
	stage1.CategoryTitle = m.CategoryTitle
	stage1.Chase = m.Chase
	stage1.Message = m.Message
	stage1.Tiers = m.Tiers
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data
func (m *BattlePassLootResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTiers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BattlePassLootResponseData) validateTiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Tiers) { // not required
		return nil
	}

	if m.Tiers != nil {
		if err := m.Tiers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseData) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiers battle pass loot response data tiers
//
// swagger:model BattlePassLootResponseDataTiers
type BattlePassLootResponseDataTiers struct {

	// 0
	Nr0 *BattlePassLootResponseDataTiersNr0 `json:"0,omitempty"`

	// 1
	Nr1 *BattlePassLootResponseDataTiersNr1 `json:"1,omitempty"`

	// 10
	Nr10 *BattlePassLootResponseDataTiersNr10 `json:"10,omitempty"`

	// 100
	Nr100 *BattlePassLootResponseDataTiersNr100 `json:"100,omitempty"`

	// 101
	Nr101 *BattlePassLootResponseDataTiersNr101 `json:"101,omitempty"`

	// 102
	Nr102 *BattlePassLootResponseDataTiersNr102 `json:"102,omitempty"`

	// 103
	Nr103 *BattlePassLootResponseDataTiersNr103 `json:"103,omitempty"`

	// 104
	Nr104 *BattlePassLootResponseDataTiersNr104 `json:"104,omitempty"`

	// 105
	Nr105 *BattlePassLootResponseDataTiersNr105 `json:"105,omitempty"`

	// 106
	Nr106 *BattlePassLootResponseDataTiersNr106 `json:"106,omitempty"`

	// 107
	Nr107 *BattlePassLootResponseDataTiersNr107 `json:"107,omitempty"`

	// 108
	Nr108 *BattlePassLootResponseDataTiersNr108 `json:"108,omitempty"`

	// 109
	Nr109 *BattlePassLootResponseDataTiersNr109 `json:"109,omitempty"`

	// 11
	Nr11 *BattlePassLootResponseDataTiersNr11 `json:"11,omitempty"`

	// 110
	Nr110 *BattlePassLootResponseDataTiersNr110 `json:"110,omitempty"`

	// 12
	Nr12 *BattlePassLootResponseDataTiersNr12 `json:"12,omitempty"`

	// 13
	Nr13 *BattlePassLootResponseDataTiersNr13 `json:"13,omitempty"`

	// 14
	Nr14 *BattlePassLootResponseDataTiersNr14 `json:"14,omitempty"`

	// 15
	Nr15 *BattlePassLootResponseDataTiersNr15 `json:"15,omitempty"`

	// 16
	Nr16 *BattlePassLootResponseDataTiersNr16 `json:"16,omitempty"`

	// 17
	Nr17 *BattlePassLootResponseDataTiersNr17 `json:"17,omitempty"`

	// 18
	Nr18 *BattlePassLootResponseDataTiersNr18 `json:"18,omitempty"`

	// 19
	Nr19 *BattlePassLootResponseDataTiersNr19 `json:"19,omitempty"`

	// 2
	Nr2 *BattlePassLootResponseDataTiersNr2 `json:"2,omitempty"`

	// 20
	Nr20 *BattlePassLootResponseDataTiersNr20 `json:"20,omitempty"`

	// 21
	Nr21 *BattlePassLootResponseDataTiersNr21 `json:"21,omitempty"`

	// 22
	Nr22 *BattlePassLootResponseDataTiersNr22 `json:"22,omitempty"`

	// 23
	Nr23 *BattlePassLootResponseDataTiersNr23 `json:"23,omitempty"`

	// 24
	Nr24 *BattlePassLootResponseDataTiersNr24 `json:"24,omitempty"`

	// 25
	Nr25 *BattlePassLootResponseDataTiersNr25 `json:"25,omitempty"`

	// 26
	Nr26 *BattlePassLootResponseDataTiersNr26 `json:"26,omitempty"`

	// 27
	Nr27 *BattlePassLootResponseDataTiersNr27 `json:"27,omitempty"`

	// 28
	Nr28 *BattlePassLootResponseDataTiersNr28 `json:"28,omitempty"`

	// 29
	Nr29 *BattlePassLootResponseDataTiersNr29 `json:"29,omitempty"`

	// 3
	Nr3 *BattlePassLootResponseDataTiersNr3 `json:"3,omitempty"`

	// 30
	Nr30 *BattlePassLootResponseDataTiersNr30 `json:"30,omitempty"`

	// 31
	Nr31 *BattlePassLootResponseDataTiersNr31 `json:"31,omitempty"`

	// 32
	Nr32 *BattlePassLootResponseDataTiersNr32 `json:"32,omitempty"`

	// 33
	Nr33 *BattlePassLootResponseDataTiersNr33 `json:"33,omitempty"`

	// 34
	Nr34 *BattlePassLootResponseDataTiersNr34 `json:"34,omitempty"`

	// 35
	Nr35 *BattlePassLootResponseDataTiersNr35 `json:"35,omitempty"`

	// 36
	Nr36 *BattlePassLootResponseDataTiersNr36 `json:"36,omitempty"`

	// 37
	Nr37 *BattlePassLootResponseDataTiersNr37 `json:"37,omitempty"`

	// 38
	Nr38 *BattlePassLootResponseDataTiersNr38 `json:"38,omitempty"`

	// 39
	Nr39 *BattlePassLootResponseDataTiersNr39 `json:"39,omitempty"`

	// 4
	Nr4 *BattlePassLootResponseDataTiersNr4 `json:"4,omitempty"`

	// 40
	Nr40 *BattlePassLootResponseDataTiersNr40 `json:"40,omitempty"`

	// 41
	Nr41 *BattlePassLootResponseDataTiersNr41 `json:"41,omitempty"`

	// 42
	Nr42 *BattlePassLootResponseDataTiersNr42 `json:"42,omitempty"`

	// 43
	Nr43 *BattlePassLootResponseDataTiersNr43 `json:"43,omitempty"`

	// 44
	Nr44 *BattlePassLootResponseDataTiersNr44 `json:"44,omitempty"`

	// 45
	Nr45 *BattlePassLootResponseDataTiersNr45 `json:"45,omitempty"`

	// 46
	Nr46 *BattlePassLootResponseDataTiersNr46 `json:"46,omitempty"`

	// 47
	Nr47 *BattlePassLootResponseDataTiersNr47 `json:"47,omitempty"`

	// 48
	Nr48 *BattlePassLootResponseDataTiersNr48 `json:"48,omitempty"`

	// 49
	Nr49 *BattlePassLootResponseDataTiersNr49 `json:"49,omitempty"`

	// 5
	Nr5 *BattlePassLootResponseDataTiersNr5 `json:"5,omitempty"`

	// 50
	Nr50 *BattlePassLootResponseDataTiersNr50 `json:"50,omitempty"`

	// 51
	Nr51 *BattlePassLootResponseDataTiersNr51 `json:"51,omitempty"`

	// 52
	Nr52 *BattlePassLootResponseDataTiersNr52 `json:"52,omitempty"`

	// 53
	Nr53 *BattlePassLootResponseDataTiersNr53 `json:"53,omitempty"`

	// 54
	Nr54 *BattlePassLootResponseDataTiersNr54 `json:"54,omitempty"`

	// 55
	Nr55 *BattlePassLootResponseDataTiersNr55 `json:"55,omitempty"`

	// 56
	Nr56 *BattlePassLootResponseDataTiersNr56 `json:"56,omitempty"`

	// 57
	Nr57 *BattlePassLootResponseDataTiersNr57 `json:"57,omitempty"`

	// 58
	Nr58 *BattlePassLootResponseDataTiersNr58 `json:"58,omitempty"`

	// 59
	Nr59 *BattlePassLootResponseDataTiersNr59 `json:"59,omitempty"`

	// 6
	Nr6 *BattlePassLootResponseDataTiersNr6 `json:"6,omitempty"`

	// 60
	Nr60 *BattlePassLootResponseDataTiersNr60 `json:"60,omitempty"`

	// 61
	Nr61 *BattlePassLootResponseDataTiersNr61 `json:"61,omitempty"`

	// 62
	Nr62 *BattlePassLootResponseDataTiersNr62 `json:"62,omitempty"`

	// 63
	Nr63 *BattlePassLootResponseDataTiersNr63 `json:"63,omitempty"`

	// 64
	Nr64 *BattlePassLootResponseDataTiersNr64 `json:"64,omitempty"`

	// 65
	Nr65 *BattlePassLootResponseDataTiersNr65 `json:"65,omitempty"`

	// 66
	Nr66 *BattlePassLootResponseDataTiersNr66 `json:"66,omitempty"`

	// 67
	Nr67 *BattlePassLootResponseDataTiersNr67 `json:"67,omitempty"`

	// 68
	Nr68 *BattlePassLootResponseDataTiersNr68 `json:"68,omitempty"`

	// 69
	Nr69 *BattlePassLootResponseDataTiersNr69 `json:"69,omitempty"`

	// 7
	Nr7 *BattlePassLootResponseDataTiersNr7 `json:"7,omitempty"`

	// 70
	Nr70 *BattlePassLootResponseDataTiersNr70 `json:"70,omitempty"`

	// 71
	Nr71 *BattlePassLootResponseDataTiersNr71 `json:"71,omitempty"`

	// 72
	Nr72 *BattlePassLootResponseDataTiersNr72 `json:"72,omitempty"`

	// 73
	Nr73 *BattlePassLootResponseDataTiersNr73 `json:"73,omitempty"`

	// 74
	Nr74 *BattlePassLootResponseDataTiersNr74 `json:"74,omitempty"`

	// 75
	Nr75 *BattlePassLootResponseDataTiersNr75 `json:"75,omitempty"`

	// 76
	Nr76 *BattlePassLootResponseDataTiersNr76 `json:"76,omitempty"`

	// 77
	Nr77 *BattlePassLootResponseDataTiersNr77 `json:"77,omitempty"`

	// 78
	Nr78 *BattlePassLootResponseDataTiersNr78 `json:"78,omitempty"`

	// 79
	Nr79 *BattlePassLootResponseDataTiersNr79 `json:"79,omitempty"`

	// 8
	Nr8 *BattlePassLootResponseDataTiersNr8 `json:"8,omitempty"`

	// 80
	Nr80 *BattlePassLootResponseDataTiersNr80 `json:"80,omitempty"`

	// 81
	Nr81 *BattlePassLootResponseDataTiersNr81 `json:"81,omitempty"`

	// 82
	Nr82 *BattlePassLootResponseDataTiersNr82 `json:"82,omitempty"`

	// 83
	Nr83 *BattlePassLootResponseDataTiersNr83 `json:"83,omitempty"`

	// 84
	Nr84 *BattlePassLootResponseDataTiersNr84 `json:"84,omitempty"`

	// 85
	Nr85 *BattlePassLootResponseDataTiersNr85 `json:"85,omitempty"`

	// 86
	Nr86 *BattlePassLootResponseDataTiersNr86 `json:"86,omitempty"`

	// 87
	Nr87 *BattlePassLootResponseDataTiersNr87 `json:"87,omitempty"`

	// 88
	Nr88 *BattlePassLootResponseDataTiersNr88 `json:"88,omitempty"`

	// 89
	Nr89 *BattlePassLootResponseDataTiersNr89 `json:"89,omitempty"`

	// 9
	Nr9 *BattlePassLootResponseDataTiersNr9 `json:"9,omitempty"`

	// 90
	Nr90 *BattlePassLootResponseDataTiersNr90 `json:"90,omitempty"`

	// 91
	Nr91 *BattlePassLootResponseDataTiersNr91 `json:"91,omitempty"`

	// 92
	Nr92 *BattlePassLootResponseDataTiersNr92 `json:"92,omitempty"`

	// 93
	Nr93 *BattlePassLootResponseDataTiersNr93 `json:"93,omitempty"`

	// 94
	Nr94 *BattlePassLootResponseDataTiersNr94 `json:"94,omitempty"`

	// 95
	Nr95 *BattlePassLootResponseDataTiersNr95 `json:"95,omitempty"`

	// 96
	Nr96 *BattlePassLootResponseDataTiersNr96 `json:"96,omitempty"`

	// 97
	Nr97 *BattlePassLootResponseDataTiersNr97 `json:"97,omitempty"`

	// 98
	Nr98 *BattlePassLootResponseDataTiersNr98 `json:"98,omitempty"`

	// 99
	Nr99 *BattlePassLootResponseDataTiersNr99 `json:"99,omitempty"`

	// battle pass loot response data tiers additional properties
	BattlePassLootResponseDataTiersAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiers) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// 0
		Nr0 *BattlePassLootResponseDataTiersNr0 `json:"0,omitempty"`

		// 1
		Nr1 *BattlePassLootResponseDataTiersNr1 `json:"1,omitempty"`

		// 10
		Nr10 *BattlePassLootResponseDataTiersNr10 `json:"10,omitempty"`

		// 100
		Nr100 *BattlePassLootResponseDataTiersNr100 `json:"100,omitempty"`

		// 101
		Nr101 *BattlePassLootResponseDataTiersNr101 `json:"101,omitempty"`

		// 102
		Nr102 *BattlePassLootResponseDataTiersNr102 `json:"102,omitempty"`

		// 103
		Nr103 *BattlePassLootResponseDataTiersNr103 `json:"103,omitempty"`

		// 104
		Nr104 *BattlePassLootResponseDataTiersNr104 `json:"104,omitempty"`

		// 105
		Nr105 *BattlePassLootResponseDataTiersNr105 `json:"105,omitempty"`

		// 106
		Nr106 *BattlePassLootResponseDataTiersNr106 `json:"106,omitempty"`

		// 107
		Nr107 *BattlePassLootResponseDataTiersNr107 `json:"107,omitempty"`

		// 108
		Nr108 *BattlePassLootResponseDataTiersNr108 `json:"108,omitempty"`

		// 109
		Nr109 *BattlePassLootResponseDataTiersNr109 `json:"109,omitempty"`

		// 11
		Nr11 *BattlePassLootResponseDataTiersNr11 `json:"11,omitempty"`

		// 110
		Nr110 *BattlePassLootResponseDataTiersNr110 `json:"110,omitempty"`

		// 12
		Nr12 *BattlePassLootResponseDataTiersNr12 `json:"12,omitempty"`

		// 13
		Nr13 *BattlePassLootResponseDataTiersNr13 `json:"13,omitempty"`

		// 14
		Nr14 *BattlePassLootResponseDataTiersNr14 `json:"14,omitempty"`

		// 15
		Nr15 *BattlePassLootResponseDataTiersNr15 `json:"15,omitempty"`

		// 16
		Nr16 *BattlePassLootResponseDataTiersNr16 `json:"16,omitempty"`

		// 17
		Nr17 *BattlePassLootResponseDataTiersNr17 `json:"17,omitempty"`

		// 18
		Nr18 *BattlePassLootResponseDataTiersNr18 `json:"18,omitempty"`

		// 19
		Nr19 *BattlePassLootResponseDataTiersNr19 `json:"19,omitempty"`

		// 2
		Nr2 *BattlePassLootResponseDataTiersNr2 `json:"2,omitempty"`

		// 20
		Nr20 *BattlePassLootResponseDataTiersNr20 `json:"20,omitempty"`

		// 21
		Nr21 *BattlePassLootResponseDataTiersNr21 `json:"21,omitempty"`

		// 22
		Nr22 *BattlePassLootResponseDataTiersNr22 `json:"22,omitempty"`

		// 23
		Nr23 *BattlePassLootResponseDataTiersNr23 `json:"23,omitempty"`

		// 24
		Nr24 *BattlePassLootResponseDataTiersNr24 `json:"24,omitempty"`

		// 25
		Nr25 *BattlePassLootResponseDataTiersNr25 `json:"25,omitempty"`

		// 26
		Nr26 *BattlePassLootResponseDataTiersNr26 `json:"26,omitempty"`

		// 27
		Nr27 *BattlePassLootResponseDataTiersNr27 `json:"27,omitempty"`

		// 28
		Nr28 *BattlePassLootResponseDataTiersNr28 `json:"28,omitempty"`

		// 29
		Nr29 *BattlePassLootResponseDataTiersNr29 `json:"29,omitempty"`

		// 3
		Nr3 *BattlePassLootResponseDataTiersNr3 `json:"3,omitempty"`

		// 30
		Nr30 *BattlePassLootResponseDataTiersNr30 `json:"30,omitempty"`

		// 31
		Nr31 *BattlePassLootResponseDataTiersNr31 `json:"31,omitempty"`

		// 32
		Nr32 *BattlePassLootResponseDataTiersNr32 `json:"32,omitempty"`

		// 33
		Nr33 *BattlePassLootResponseDataTiersNr33 `json:"33,omitempty"`

		// 34
		Nr34 *BattlePassLootResponseDataTiersNr34 `json:"34,omitempty"`

		// 35
		Nr35 *BattlePassLootResponseDataTiersNr35 `json:"35,omitempty"`

		// 36
		Nr36 *BattlePassLootResponseDataTiersNr36 `json:"36,omitempty"`

		// 37
		Nr37 *BattlePassLootResponseDataTiersNr37 `json:"37,omitempty"`

		// 38
		Nr38 *BattlePassLootResponseDataTiersNr38 `json:"38,omitempty"`

		// 39
		Nr39 *BattlePassLootResponseDataTiersNr39 `json:"39,omitempty"`

		// 4
		Nr4 *BattlePassLootResponseDataTiersNr4 `json:"4,omitempty"`

		// 40
		Nr40 *BattlePassLootResponseDataTiersNr40 `json:"40,omitempty"`

		// 41
		Nr41 *BattlePassLootResponseDataTiersNr41 `json:"41,omitempty"`

		// 42
		Nr42 *BattlePassLootResponseDataTiersNr42 `json:"42,omitempty"`

		// 43
		Nr43 *BattlePassLootResponseDataTiersNr43 `json:"43,omitempty"`

		// 44
		Nr44 *BattlePassLootResponseDataTiersNr44 `json:"44,omitempty"`

		// 45
		Nr45 *BattlePassLootResponseDataTiersNr45 `json:"45,omitempty"`

		// 46
		Nr46 *BattlePassLootResponseDataTiersNr46 `json:"46,omitempty"`

		// 47
		Nr47 *BattlePassLootResponseDataTiersNr47 `json:"47,omitempty"`

		// 48
		Nr48 *BattlePassLootResponseDataTiersNr48 `json:"48,omitempty"`

		// 49
		Nr49 *BattlePassLootResponseDataTiersNr49 `json:"49,omitempty"`

		// 5
		Nr5 *BattlePassLootResponseDataTiersNr5 `json:"5,omitempty"`

		// 50
		Nr50 *BattlePassLootResponseDataTiersNr50 `json:"50,omitempty"`

		// 51
		Nr51 *BattlePassLootResponseDataTiersNr51 `json:"51,omitempty"`

		// 52
		Nr52 *BattlePassLootResponseDataTiersNr52 `json:"52,omitempty"`

		// 53
		Nr53 *BattlePassLootResponseDataTiersNr53 `json:"53,omitempty"`

		// 54
		Nr54 *BattlePassLootResponseDataTiersNr54 `json:"54,omitempty"`

		// 55
		Nr55 *BattlePassLootResponseDataTiersNr55 `json:"55,omitempty"`

		// 56
		Nr56 *BattlePassLootResponseDataTiersNr56 `json:"56,omitempty"`

		// 57
		Nr57 *BattlePassLootResponseDataTiersNr57 `json:"57,omitempty"`

		// 58
		Nr58 *BattlePassLootResponseDataTiersNr58 `json:"58,omitempty"`

		// 59
		Nr59 *BattlePassLootResponseDataTiersNr59 `json:"59,omitempty"`

		// 6
		Nr6 *BattlePassLootResponseDataTiersNr6 `json:"6,omitempty"`

		// 60
		Nr60 *BattlePassLootResponseDataTiersNr60 `json:"60,omitempty"`

		// 61
		Nr61 *BattlePassLootResponseDataTiersNr61 `json:"61,omitempty"`

		// 62
		Nr62 *BattlePassLootResponseDataTiersNr62 `json:"62,omitempty"`

		// 63
		Nr63 *BattlePassLootResponseDataTiersNr63 `json:"63,omitempty"`

		// 64
		Nr64 *BattlePassLootResponseDataTiersNr64 `json:"64,omitempty"`

		// 65
		Nr65 *BattlePassLootResponseDataTiersNr65 `json:"65,omitempty"`

		// 66
		Nr66 *BattlePassLootResponseDataTiersNr66 `json:"66,omitempty"`

		// 67
		Nr67 *BattlePassLootResponseDataTiersNr67 `json:"67,omitempty"`

		// 68
		Nr68 *BattlePassLootResponseDataTiersNr68 `json:"68,omitempty"`

		// 69
		Nr69 *BattlePassLootResponseDataTiersNr69 `json:"69,omitempty"`

		// 7
		Nr7 *BattlePassLootResponseDataTiersNr7 `json:"7,omitempty"`

		// 70
		Nr70 *BattlePassLootResponseDataTiersNr70 `json:"70,omitempty"`

		// 71
		Nr71 *BattlePassLootResponseDataTiersNr71 `json:"71,omitempty"`

		// 72
		Nr72 *BattlePassLootResponseDataTiersNr72 `json:"72,omitempty"`

		// 73
		Nr73 *BattlePassLootResponseDataTiersNr73 `json:"73,omitempty"`

		// 74
		Nr74 *BattlePassLootResponseDataTiersNr74 `json:"74,omitempty"`

		// 75
		Nr75 *BattlePassLootResponseDataTiersNr75 `json:"75,omitempty"`

		// 76
		Nr76 *BattlePassLootResponseDataTiersNr76 `json:"76,omitempty"`

		// 77
		Nr77 *BattlePassLootResponseDataTiersNr77 `json:"77,omitempty"`

		// 78
		Nr78 *BattlePassLootResponseDataTiersNr78 `json:"78,omitempty"`

		// 79
		Nr79 *BattlePassLootResponseDataTiersNr79 `json:"79,omitempty"`

		// 8
		Nr8 *BattlePassLootResponseDataTiersNr8 `json:"8,omitempty"`

		// 80
		Nr80 *BattlePassLootResponseDataTiersNr80 `json:"80,omitempty"`

		// 81
		Nr81 *BattlePassLootResponseDataTiersNr81 `json:"81,omitempty"`

		// 82
		Nr82 *BattlePassLootResponseDataTiersNr82 `json:"82,omitempty"`

		// 83
		Nr83 *BattlePassLootResponseDataTiersNr83 `json:"83,omitempty"`

		// 84
		Nr84 *BattlePassLootResponseDataTiersNr84 `json:"84,omitempty"`

		// 85
		Nr85 *BattlePassLootResponseDataTiersNr85 `json:"85,omitempty"`

		// 86
		Nr86 *BattlePassLootResponseDataTiersNr86 `json:"86,omitempty"`

		// 87
		Nr87 *BattlePassLootResponseDataTiersNr87 `json:"87,omitempty"`

		// 88
		Nr88 *BattlePassLootResponseDataTiersNr88 `json:"88,omitempty"`

		// 89
		Nr89 *BattlePassLootResponseDataTiersNr89 `json:"89,omitempty"`

		// 9
		Nr9 *BattlePassLootResponseDataTiersNr9 `json:"9,omitempty"`

		// 90
		Nr90 *BattlePassLootResponseDataTiersNr90 `json:"90,omitempty"`

		// 91
		Nr91 *BattlePassLootResponseDataTiersNr91 `json:"91,omitempty"`

		// 92
		Nr92 *BattlePassLootResponseDataTiersNr92 `json:"92,omitempty"`

		// 93
		Nr93 *BattlePassLootResponseDataTiersNr93 `json:"93,omitempty"`

		// 94
		Nr94 *BattlePassLootResponseDataTiersNr94 `json:"94,omitempty"`

		// 95
		Nr95 *BattlePassLootResponseDataTiersNr95 `json:"95,omitempty"`

		// 96
		Nr96 *BattlePassLootResponseDataTiersNr96 `json:"96,omitempty"`

		// 97
		Nr97 *BattlePassLootResponseDataTiersNr97 `json:"97,omitempty"`

		// 98
		Nr98 *BattlePassLootResponseDataTiersNr98 `json:"98,omitempty"`

		// 99
		Nr99 *BattlePassLootResponseDataTiersNr99 `json:"99,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiers

	rcv.Nr0 = stage1.Nr0
	rcv.Nr1 = stage1.Nr1
	rcv.Nr10 = stage1.Nr10
	rcv.Nr100 = stage1.Nr100
	rcv.Nr101 = stage1.Nr101
	rcv.Nr102 = stage1.Nr102
	rcv.Nr103 = stage1.Nr103
	rcv.Nr104 = stage1.Nr104
	rcv.Nr105 = stage1.Nr105
	rcv.Nr106 = stage1.Nr106
	rcv.Nr107 = stage1.Nr107
	rcv.Nr108 = stage1.Nr108
	rcv.Nr109 = stage1.Nr109
	rcv.Nr11 = stage1.Nr11
	rcv.Nr110 = stage1.Nr110
	rcv.Nr12 = stage1.Nr12
	rcv.Nr13 = stage1.Nr13
	rcv.Nr14 = stage1.Nr14
	rcv.Nr15 = stage1.Nr15
	rcv.Nr16 = stage1.Nr16
	rcv.Nr17 = stage1.Nr17
	rcv.Nr18 = stage1.Nr18
	rcv.Nr19 = stage1.Nr19
	rcv.Nr2 = stage1.Nr2
	rcv.Nr20 = stage1.Nr20
	rcv.Nr21 = stage1.Nr21
	rcv.Nr22 = stage1.Nr22
	rcv.Nr23 = stage1.Nr23
	rcv.Nr24 = stage1.Nr24
	rcv.Nr25 = stage1.Nr25
	rcv.Nr26 = stage1.Nr26
	rcv.Nr27 = stage1.Nr27
	rcv.Nr28 = stage1.Nr28
	rcv.Nr29 = stage1.Nr29
	rcv.Nr3 = stage1.Nr3
	rcv.Nr30 = stage1.Nr30
	rcv.Nr31 = stage1.Nr31
	rcv.Nr32 = stage1.Nr32
	rcv.Nr33 = stage1.Nr33
	rcv.Nr34 = stage1.Nr34
	rcv.Nr35 = stage1.Nr35
	rcv.Nr36 = stage1.Nr36
	rcv.Nr37 = stage1.Nr37
	rcv.Nr38 = stage1.Nr38
	rcv.Nr39 = stage1.Nr39
	rcv.Nr4 = stage1.Nr4
	rcv.Nr40 = stage1.Nr40
	rcv.Nr41 = stage1.Nr41
	rcv.Nr42 = stage1.Nr42
	rcv.Nr43 = stage1.Nr43
	rcv.Nr44 = stage1.Nr44
	rcv.Nr45 = stage1.Nr45
	rcv.Nr46 = stage1.Nr46
	rcv.Nr47 = stage1.Nr47
	rcv.Nr48 = stage1.Nr48
	rcv.Nr49 = stage1.Nr49
	rcv.Nr5 = stage1.Nr5
	rcv.Nr50 = stage1.Nr50
	rcv.Nr51 = stage1.Nr51
	rcv.Nr52 = stage1.Nr52
	rcv.Nr53 = stage1.Nr53
	rcv.Nr54 = stage1.Nr54
	rcv.Nr55 = stage1.Nr55
	rcv.Nr56 = stage1.Nr56
	rcv.Nr57 = stage1.Nr57
	rcv.Nr58 = stage1.Nr58
	rcv.Nr59 = stage1.Nr59
	rcv.Nr6 = stage1.Nr6
	rcv.Nr60 = stage1.Nr60
	rcv.Nr61 = stage1.Nr61
	rcv.Nr62 = stage1.Nr62
	rcv.Nr63 = stage1.Nr63
	rcv.Nr64 = stage1.Nr64
	rcv.Nr65 = stage1.Nr65
	rcv.Nr66 = stage1.Nr66
	rcv.Nr67 = stage1.Nr67
	rcv.Nr68 = stage1.Nr68
	rcv.Nr69 = stage1.Nr69
	rcv.Nr7 = stage1.Nr7
	rcv.Nr70 = stage1.Nr70
	rcv.Nr71 = stage1.Nr71
	rcv.Nr72 = stage1.Nr72
	rcv.Nr73 = stage1.Nr73
	rcv.Nr74 = stage1.Nr74
	rcv.Nr75 = stage1.Nr75
	rcv.Nr76 = stage1.Nr76
	rcv.Nr77 = stage1.Nr77
	rcv.Nr78 = stage1.Nr78
	rcv.Nr79 = stage1.Nr79
	rcv.Nr8 = stage1.Nr8
	rcv.Nr80 = stage1.Nr80
	rcv.Nr81 = stage1.Nr81
	rcv.Nr82 = stage1.Nr82
	rcv.Nr83 = stage1.Nr83
	rcv.Nr84 = stage1.Nr84
	rcv.Nr85 = stage1.Nr85
	rcv.Nr86 = stage1.Nr86
	rcv.Nr87 = stage1.Nr87
	rcv.Nr88 = stage1.Nr88
	rcv.Nr89 = stage1.Nr89
	rcv.Nr9 = stage1.Nr9
	rcv.Nr90 = stage1.Nr90
	rcv.Nr91 = stage1.Nr91
	rcv.Nr92 = stage1.Nr92
	rcv.Nr93 = stage1.Nr93
	rcv.Nr94 = stage1.Nr94
	rcv.Nr95 = stage1.Nr95
	rcv.Nr96 = stage1.Nr96
	rcv.Nr97 = stage1.Nr97
	rcv.Nr98 = stage1.Nr98
	rcv.Nr99 = stage1.Nr99
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "0")
	delete(stage2, "1")
	delete(stage2, "10")
	delete(stage2, "100")
	delete(stage2, "101")
	delete(stage2, "102")
	delete(stage2, "103")
	delete(stage2, "104")
	delete(stage2, "105")
	delete(stage2, "106")
	delete(stage2, "107")
	delete(stage2, "108")
	delete(stage2, "109")
	delete(stage2, "11")
	delete(stage2, "110")
	delete(stage2, "12")
	delete(stage2, "13")
	delete(stage2, "14")
	delete(stage2, "15")
	delete(stage2, "16")
	delete(stage2, "17")
	delete(stage2, "18")
	delete(stage2, "19")
	delete(stage2, "2")
	delete(stage2, "20")
	delete(stage2, "21")
	delete(stage2, "22")
	delete(stage2, "23")
	delete(stage2, "24")
	delete(stage2, "25")
	delete(stage2, "26")
	delete(stage2, "27")
	delete(stage2, "28")
	delete(stage2, "29")
	delete(stage2, "3")
	delete(stage2, "30")
	delete(stage2, "31")
	delete(stage2, "32")
	delete(stage2, "33")
	delete(stage2, "34")
	delete(stage2, "35")
	delete(stage2, "36")
	delete(stage2, "37")
	delete(stage2, "38")
	delete(stage2, "39")
	delete(stage2, "4")
	delete(stage2, "40")
	delete(stage2, "41")
	delete(stage2, "42")
	delete(stage2, "43")
	delete(stage2, "44")
	delete(stage2, "45")
	delete(stage2, "46")
	delete(stage2, "47")
	delete(stage2, "48")
	delete(stage2, "49")
	delete(stage2, "5")
	delete(stage2, "50")
	delete(stage2, "51")
	delete(stage2, "52")
	delete(stage2, "53")
	delete(stage2, "54")
	delete(stage2, "55")
	delete(stage2, "56")
	delete(stage2, "57")
	delete(stage2, "58")
	delete(stage2, "59")
	delete(stage2, "6")
	delete(stage2, "60")
	delete(stage2, "61")
	delete(stage2, "62")
	delete(stage2, "63")
	delete(stage2, "64")
	delete(stage2, "65")
	delete(stage2, "66")
	delete(stage2, "67")
	delete(stage2, "68")
	delete(stage2, "69")
	delete(stage2, "7")
	delete(stage2, "70")
	delete(stage2, "71")
	delete(stage2, "72")
	delete(stage2, "73")
	delete(stage2, "74")
	delete(stage2, "75")
	delete(stage2, "76")
	delete(stage2, "77")
	delete(stage2, "78")
	delete(stage2, "79")
	delete(stage2, "8")
	delete(stage2, "80")
	delete(stage2, "81")
	delete(stage2, "82")
	delete(stage2, "83")
	delete(stage2, "84")
	delete(stage2, "85")
	delete(stage2, "86")
	delete(stage2, "87")
	delete(stage2, "88")
	delete(stage2, "89")
	delete(stage2, "9")
	delete(stage2, "90")
	delete(stage2, "91")
	delete(stage2, "92")
	delete(stage2, "93")
	delete(stage2, "94")
	delete(stage2, "95")
	delete(stage2, "96")
	delete(stage2, "97")
	delete(stage2, "98")
	delete(stage2, "99")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiers) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// 0
		Nr0 *BattlePassLootResponseDataTiersNr0 `json:"0,omitempty"`

		// 1
		Nr1 *BattlePassLootResponseDataTiersNr1 `json:"1,omitempty"`

		// 10
		Nr10 *BattlePassLootResponseDataTiersNr10 `json:"10,omitempty"`

		// 100
		Nr100 *BattlePassLootResponseDataTiersNr100 `json:"100,omitempty"`

		// 101
		Nr101 *BattlePassLootResponseDataTiersNr101 `json:"101,omitempty"`

		// 102
		Nr102 *BattlePassLootResponseDataTiersNr102 `json:"102,omitempty"`

		// 103
		Nr103 *BattlePassLootResponseDataTiersNr103 `json:"103,omitempty"`

		// 104
		Nr104 *BattlePassLootResponseDataTiersNr104 `json:"104,omitempty"`

		// 105
		Nr105 *BattlePassLootResponseDataTiersNr105 `json:"105,omitempty"`

		// 106
		Nr106 *BattlePassLootResponseDataTiersNr106 `json:"106,omitempty"`

		// 107
		Nr107 *BattlePassLootResponseDataTiersNr107 `json:"107,omitempty"`

		// 108
		Nr108 *BattlePassLootResponseDataTiersNr108 `json:"108,omitempty"`

		// 109
		Nr109 *BattlePassLootResponseDataTiersNr109 `json:"109,omitempty"`

		// 11
		Nr11 *BattlePassLootResponseDataTiersNr11 `json:"11,omitempty"`

		// 110
		Nr110 *BattlePassLootResponseDataTiersNr110 `json:"110,omitempty"`

		// 12
		Nr12 *BattlePassLootResponseDataTiersNr12 `json:"12,omitempty"`

		// 13
		Nr13 *BattlePassLootResponseDataTiersNr13 `json:"13,omitempty"`

		// 14
		Nr14 *BattlePassLootResponseDataTiersNr14 `json:"14,omitempty"`

		// 15
		Nr15 *BattlePassLootResponseDataTiersNr15 `json:"15,omitempty"`

		// 16
		Nr16 *BattlePassLootResponseDataTiersNr16 `json:"16,omitempty"`

		// 17
		Nr17 *BattlePassLootResponseDataTiersNr17 `json:"17,omitempty"`

		// 18
		Nr18 *BattlePassLootResponseDataTiersNr18 `json:"18,omitempty"`

		// 19
		Nr19 *BattlePassLootResponseDataTiersNr19 `json:"19,omitempty"`

		// 2
		Nr2 *BattlePassLootResponseDataTiersNr2 `json:"2,omitempty"`

		// 20
		Nr20 *BattlePassLootResponseDataTiersNr20 `json:"20,omitempty"`

		// 21
		Nr21 *BattlePassLootResponseDataTiersNr21 `json:"21,omitempty"`

		// 22
		Nr22 *BattlePassLootResponseDataTiersNr22 `json:"22,omitempty"`

		// 23
		Nr23 *BattlePassLootResponseDataTiersNr23 `json:"23,omitempty"`

		// 24
		Nr24 *BattlePassLootResponseDataTiersNr24 `json:"24,omitempty"`

		// 25
		Nr25 *BattlePassLootResponseDataTiersNr25 `json:"25,omitempty"`

		// 26
		Nr26 *BattlePassLootResponseDataTiersNr26 `json:"26,omitempty"`

		// 27
		Nr27 *BattlePassLootResponseDataTiersNr27 `json:"27,omitempty"`

		// 28
		Nr28 *BattlePassLootResponseDataTiersNr28 `json:"28,omitempty"`

		// 29
		Nr29 *BattlePassLootResponseDataTiersNr29 `json:"29,omitempty"`

		// 3
		Nr3 *BattlePassLootResponseDataTiersNr3 `json:"3,omitempty"`

		// 30
		Nr30 *BattlePassLootResponseDataTiersNr30 `json:"30,omitempty"`

		// 31
		Nr31 *BattlePassLootResponseDataTiersNr31 `json:"31,omitempty"`

		// 32
		Nr32 *BattlePassLootResponseDataTiersNr32 `json:"32,omitempty"`

		// 33
		Nr33 *BattlePassLootResponseDataTiersNr33 `json:"33,omitempty"`

		// 34
		Nr34 *BattlePassLootResponseDataTiersNr34 `json:"34,omitempty"`

		// 35
		Nr35 *BattlePassLootResponseDataTiersNr35 `json:"35,omitempty"`

		// 36
		Nr36 *BattlePassLootResponseDataTiersNr36 `json:"36,omitempty"`

		// 37
		Nr37 *BattlePassLootResponseDataTiersNr37 `json:"37,omitempty"`

		// 38
		Nr38 *BattlePassLootResponseDataTiersNr38 `json:"38,omitempty"`

		// 39
		Nr39 *BattlePassLootResponseDataTiersNr39 `json:"39,omitempty"`

		// 4
		Nr4 *BattlePassLootResponseDataTiersNr4 `json:"4,omitempty"`

		// 40
		Nr40 *BattlePassLootResponseDataTiersNr40 `json:"40,omitempty"`

		// 41
		Nr41 *BattlePassLootResponseDataTiersNr41 `json:"41,omitempty"`

		// 42
		Nr42 *BattlePassLootResponseDataTiersNr42 `json:"42,omitempty"`

		// 43
		Nr43 *BattlePassLootResponseDataTiersNr43 `json:"43,omitempty"`

		// 44
		Nr44 *BattlePassLootResponseDataTiersNr44 `json:"44,omitempty"`

		// 45
		Nr45 *BattlePassLootResponseDataTiersNr45 `json:"45,omitempty"`

		// 46
		Nr46 *BattlePassLootResponseDataTiersNr46 `json:"46,omitempty"`

		// 47
		Nr47 *BattlePassLootResponseDataTiersNr47 `json:"47,omitempty"`

		// 48
		Nr48 *BattlePassLootResponseDataTiersNr48 `json:"48,omitempty"`

		// 49
		Nr49 *BattlePassLootResponseDataTiersNr49 `json:"49,omitempty"`

		// 5
		Nr5 *BattlePassLootResponseDataTiersNr5 `json:"5,omitempty"`

		// 50
		Nr50 *BattlePassLootResponseDataTiersNr50 `json:"50,omitempty"`

		// 51
		Nr51 *BattlePassLootResponseDataTiersNr51 `json:"51,omitempty"`

		// 52
		Nr52 *BattlePassLootResponseDataTiersNr52 `json:"52,omitempty"`

		// 53
		Nr53 *BattlePassLootResponseDataTiersNr53 `json:"53,omitempty"`

		// 54
		Nr54 *BattlePassLootResponseDataTiersNr54 `json:"54,omitempty"`

		// 55
		Nr55 *BattlePassLootResponseDataTiersNr55 `json:"55,omitempty"`

		// 56
		Nr56 *BattlePassLootResponseDataTiersNr56 `json:"56,omitempty"`

		// 57
		Nr57 *BattlePassLootResponseDataTiersNr57 `json:"57,omitempty"`

		// 58
		Nr58 *BattlePassLootResponseDataTiersNr58 `json:"58,omitempty"`

		// 59
		Nr59 *BattlePassLootResponseDataTiersNr59 `json:"59,omitempty"`

		// 6
		Nr6 *BattlePassLootResponseDataTiersNr6 `json:"6,omitempty"`

		// 60
		Nr60 *BattlePassLootResponseDataTiersNr60 `json:"60,omitempty"`

		// 61
		Nr61 *BattlePassLootResponseDataTiersNr61 `json:"61,omitempty"`

		// 62
		Nr62 *BattlePassLootResponseDataTiersNr62 `json:"62,omitempty"`

		// 63
		Nr63 *BattlePassLootResponseDataTiersNr63 `json:"63,omitempty"`

		// 64
		Nr64 *BattlePassLootResponseDataTiersNr64 `json:"64,omitempty"`

		// 65
		Nr65 *BattlePassLootResponseDataTiersNr65 `json:"65,omitempty"`

		// 66
		Nr66 *BattlePassLootResponseDataTiersNr66 `json:"66,omitempty"`

		// 67
		Nr67 *BattlePassLootResponseDataTiersNr67 `json:"67,omitempty"`

		// 68
		Nr68 *BattlePassLootResponseDataTiersNr68 `json:"68,omitempty"`

		// 69
		Nr69 *BattlePassLootResponseDataTiersNr69 `json:"69,omitempty"`

		// 7
		Nr7 *BattlePassLootResponseDataTiersNr7 `json:"7,omitempty"`

		// 70
		Nr70 *BattlePassLootResponseDataTiersNr70 `json:"70,omitempty"`

		// 71
		Nr71 *BattlePassLootResponseDataTiersNr71 `json:"71,omitempty"`

		// 72
		Nr72 *BattlePassLootResponseDataTiersNr72 `json:"72,omitempty"`

		// 73
		Nr73 *BattlePassLootResponseDataTiersNr73 `json:"73,omitempty"`

		// 74
		Nr74 *BattlePassLootResponseDataTiersNr74 `json:"74,omitempty"`

		// 75
		Nr75 *BattlePassLootResponseDataTiersNr75 `json:"75,omitempty"`

		// 76
		Nr76 *BattlePassLootResponseDataTiersNr76 `json:"76,omitempty"`

		// 77
		Nr77 *BattlePassLootResponseDataTiersNr77 `json:"77,omitempty"`

		// 78
		Nr78 *BattlePassLootResponseDataTiersNr78 `json:"78,omitempty"`

		// 79
		Nr79 *BattlePassLootResponseDataTiersNr79 `json:"79,omitempty"`

		// 8
		Nr8 *BattlePassLootResponseDataTiersNr8 `json:"8,omitempty"`

		// 80
		Nr80 *BattlePassLootResponseDataTiersNr80 `json:"80,omitempty"`

		// 81
		Nr81 *BattlePassLootResponseDataTiersNr81 `json:"81,omitempty"`

		// 82
		Nr82 *BattlePassLootResponseDataTiersNr82 `json:"82,omitempty"`

		// 83
		Nr83 *BattlePassLootResponseDataTiersNr83 `json:"83,omitempty"`

		// 84
		Nr84 *BattlePassLootResponseDataTiersNr84 `json:"84,omitempty"`

		// 85
		Nr85 *BattlePassLootResponseDataTiersNr85 `json:"85,omitempty"`

		// 86
		Nr86 *BattlePassLootResponseDataTiersNr86 `json:"86,omitempty"`

		// 87
		Nr87 *BattlePassLootResponseDataTiersNr87 `json:"87,omitempty"`

		// 88
		Nr88 *BattlePassLootResponseDataTiersNr88 `json:"88,omitempty"`

		// 89
		Nr89 *BattlePassLootResponseDataTiersNr89 `json:"89,omitempty"`

		// 9
		Nr9 *BattlePassLootResponseDataTiersNr9 `json:"9,omitempty"`

		// 90
		Nr90 *BattlePassLootResponseDataTiersNr90 `json:"90,omitempty"`

		// 91
		Nr91 *BattlePassLootResponseDataTiersNr91 `json:"91,omitempty"`

		// 92
		Nr92 *BattlePassLootResponseDataTiersNr92 `json:"92,omitempty"`

		// 93
		Nr93 *BattlePassLootResponseDataTiersNr93 `json:"93,omitempty"`

		// 94
		Nr94 *BattlePassLootResponseDataTiersNr94 `json:"94,omitempty"`

		// 95
		Nr95 *BattlePassLootResponseDataTiersNr95 `json:"95,omitempty"`

		// 96
		Nr96 *BattlePassLootResponseDataTiersNr96 `json:"96,omitempty"`

		// 97
		Nr97 *BattlePassLootResponseDataTiersNr97 `json:"97,omitempty"`

		// 98
		Nr98 *BattlePassLootResponseDataTiersNr98 `json:"98,omitempty"`

		// 99
		Nr99 *BattlePassLootResponseDataTiersNr99 `json:"99,omitempty"`
	}

	stage1.Nr0 = m.Nr0
	stage1.Nr1 = m.Nr1
	stage1.Nr10 = m.Nr10
	stage1.Nr100 = m.Nr100
	stage1.Nr101 = m.Nr101
	stage1.Nr102 = m.Nr102
	stage1.Nr103 = m.Nr103
	stage1.Nr104 = m.Nr104
	stage1.Nr105 = m.Nr105
	stage1.Nr106 = m.Nr106
	stage1.Nr107 = m.Nr107
	stage1.Nr108 = m.Nr108
	stage1.Nr109 = m.Nr109
	stage1.Nr11 = m.Nr11
	stage1.Nr110 = m.Nr110
	stage1.Nr12 = m.Nr12
	stage1.Nr13 = m.Nr13
	stage1.Nr14 = m.Nr14
	stage1.Nr15 = m.Nr15
	stage1.Nr16 = m.Nr16
	stage1.Nr17 = m.Nr17
	stage1.Nr18 = m.Nr18
	stage1.Nr19 = m.Nr19
	stage1.Nr2 = m.Nr2
	stage1.Nr20 = m.Nr20
	stage1.Nr21 = m.Nr21
	stage1.Nr22 = m.Nr22
	stage1.Nr23 = m.Nr23
	stage1.Nr24 = m.Nr24
	stage1.Nr25 = m.Nr25
	stage1.Nr26 = m.Nr26
	stage1.Nr27 = m.Nr27
	stage1.Nr28 = m.Nr28
	stage1.Nr29 = m.Nr29
	stage1.Nr3 = m.Nr3
	stage1.Nr30 = m.Nr30
	stage1.Nr31 = m.Nr31
	stage1.Nr32 = m.Nr32
	stage1.Nr33 = m.Nr33
	stage1.Nr34 = m.Nr34
	stage1.Nr35 = m.Nr35
	stage1.Nr36 = m.Nr36
	stage1.Nr37 = m.Nr37
	stage1.Nr38 = m.Nr38
	stage1.Nr39 = m.Nr39
	stage1.Nr4 = m.Nr4
	stage1.Nr40 = m.Nr40
	stage1.Nr41 = m.Nr41
	stage1.Nr42 = m.Nr42
	stage1.Nr43 = m.Nr43
	stage1.Nr44 = m.Nr44
	stage1.Nr45 = m.Nr45
	stage1.Nr46 = m.Nr46
	stage1.Nr47 = m.Nr47
	stage1.Nr48 = m.Nr48
	stage1.Nr49 = m.Nr49
	stage1.Nr5 = m.Nr5
	stage1.Nr50 = m.Nr50
	stage1.Nr51 = m.Nr51
	stage1.Nr52 = m.Nr52
	stage1.Nr53 = m.Nr53
	stage1.Nr54 = m.Nr54
	stage1.Nr55 = m.Nr55
	stage1.Nr56 = m.Nr56
	stage1.Nr57 = m.Nr57
	stage1.Nr58 = m.Nr58
	stage1.Nr59 = m.Nr59
	stage1.Nr6 = m.Nr6
	stage1.Nr60 = m.Nr60
	stage1.Nr61 = m.Nr61
	stage1.Nr62 = m.Nr62
	stage1.Nr63 = m.Nr63
	stage1.Nr64 = m.Nr64
	stage1.Nr65 = m.Nr65
	stage1.Nr66 = m.Nr66
	stage1.Nr67 = m.Nr67
	stage1.Nr68 = m.Nr68
	stage1.Nr69 = m.Nr69
	stage1.Nr7 = m.Nr7
	stage1.Nr70 = m.Nr70
	stage1.Nr71 = m.Nr71
	stage1.Nr72 = m.Nr72
	stage1.Nr73 = m.Nr73
	stage1.Nr74 = m.Nr74
	stage1.Nr75 = m.Nr75
	stage1.Nr76 = m.Nr76
	stage1.Nr77 = m.Nr77
	stage1.Nr78 = m.Nr78
	stage1.Nr79 = m.Nr79
	stage1.Nr8 = m.Nr8
	stage1.Nr80 = m.Nr80
	stage1.Nr81 = m.Nr81
	stage1.Nr82 = m.Nr82
	stage1.Nr83 = m.Nr83
	stage1.Nr84 = m.Nr84
	stage1.Nr85 = m.Nr85
	stage1.Nr86 = m.Nr86
	stage1.Nr87 = m.Nr87
	stage1.Nr88 = m.Nr88
	stage1.Nr89 = m.Nr89
	stage1.Nr9 = m.Nr9
	stage1.Nr90 = m.Nr90
	stage1.Nr91 = m.Nr91
	stage1.Nr92 = m.Nr92
	stage1.Nr93 = m.Nr93
	stage1.Nr94 = m.Nr94
	stage1.Nr95 = m.Nr95
	stage1.Nr96 = m.Nr96
	stage1.Nr97 = m.Nr97
	stage1.Nr98 = m.Nr98
	stage1.Nr99 = m.Nr99

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers
func (m *BattlePassLootResponseDataTiers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr100(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr101(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr102(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr103(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr104(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr105(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr106(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr107(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr108(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr109(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr110(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr16(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr17(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr18(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr19(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr20(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr21(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr22(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr23(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr24(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr25(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr26(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr27(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr28(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr29(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr30(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr31(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr32(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr33(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr34(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr35(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr36(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr37(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr38(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr39(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr40(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr41(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr42(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr43(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr44(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr45(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr46(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr47(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr48(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr49(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr50(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr51(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr52(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr53(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr54(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr55(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr56(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr57(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr58(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr59(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr60(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr61(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr62(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr63(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr64(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr65(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr66(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr67(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr68(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr69(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr70(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr71(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr72(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr73(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr74(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr75(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr76(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr77(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr78(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr79(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr80(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr81(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr82(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr83(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr84(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr85(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr86(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr87(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr88(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr89(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr90(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr91(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr92(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr93(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr94(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr95(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr96(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr97(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr98(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr99(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr0(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr0) { // not required
		return nil
	}

	if m.Nr0 != nil {
		if err := m.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr1(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr1) { // not required
		return nil
	}

	if m.Nr1 != nil {
		if err := m.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr10(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr10) { // not required
		return nil
	}

	if m.Nr10 != nil {
		if err := m.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr100(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr100) { // not required
		return nil
	}

	if m.Nr100 != nil {
		if err := m.Nr100.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "100")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr101(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr101) { // not required
		return nil
	}

	if m.Nr101 != nil {
		if err := m.Nr101.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "101")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr102(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr102) { // not required
		return nil
	}

	if m.Nr102 != nil {
		if err := m.Nr102.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "102")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr103(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr103) { // not required
		return nil
	}

	if m.Nr103 != nil {
		if err := m.Nr103.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "103")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr104(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr104) { // not required
		return nil
	}

	if m.Nr104 != nil {
		if err := m.Nr104.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "104")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr105(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr105) { // not required
		return nil
	}

	if m.Nr105 != nil {
		if err := m.Nr105.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "105")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr106(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr106) { // not required
		return nil
	}

	if m.Nr106 != nil {
		if err := m.Nr106.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "106")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr107(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr107) { // not required
		return nil
	}

	if m.Nr107 != nil {
		if err := m.Nr107.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "107")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr108(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr108) { // not required
		return nil
	}

	if m.Nr108 != nil {
		if err := m.Nr108.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "108")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr109(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr109) { // not required
		return nil
	}

	if m.Nr109 != nil {
		if err := m.Nr109.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "109")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr11(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr11) { // not required
		return nil
	}

	if m.Nr11 != nil {
		if err := m.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr110(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr110) { // not required
		return nil
	}

	if m.Nr110 != nil {
		if err := m.Nr110.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "110")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr12(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr12) { // not required
		return nil
	}

	if m.Nr12 != nil {
		if err := m.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr13(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr13) { // not required
		return nil
	}

	if m.Nr13 != nil {
		if err := m.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr14(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr14) { // not required
		return nil
	}

	if m.Nr14 != nil {
		if err := m.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr15(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr15) { // not required
		return nil
	}

	if m.Nr15 != nil {
		if err := m.Nr15.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "15")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr16(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr16) { // not required
		return nil
	}

	if m.Nr16 != nil {
		if err := m.Nr16.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "16")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr17(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr17) { // not required
		return nil
	}

	if m.Nr17 != nil {
		if err := m.Nr17.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "17")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr18(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr18) { // not required
		return nil
	}

	if m.Nr18 != nil {
		if err := m.Nr18.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "18")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr19(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr19) { // not required
		return nil
	}

	if m.Nr19 != nil {
		if err := m.Nr19.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "19")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr2(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr2) { // not required
		return nil
	}

	if m.Nr2 != nil {
		if err := m.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr20(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr20) { // not required
		return nil
	}

	if m.Nr20 != nil {
		if err := m.Nr20.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "20")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr21(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr21) { // not required
		return nil
	}

	if m.Nr21 != nil {
		if err := m.Nr21.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "21")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr22(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr22) { // not required
		return nil
	}

	if m.Nr22 != nil {
		if err := m.Nr22.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "22")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr23(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr23) { // not required
		return nil
	}

	if m.Nr23 != nil {
		if err := m.Nr23.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "23")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr24(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr24) { // not required
		return nil
	}

	if m.Nr24 != nil {
		if err := m.Nr24.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "24")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr25(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr25) { // not required
		return nil
	}

	if m.Nr25 != nil {
		if err := m.Nr25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "25")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr26(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr26) { // not required
		return nil
	}

	if m.Nr26 != nil {
		if err := m.Nr26.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "26")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr27(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr27) { // not required
		return nil
	}

	if m.Nr27 != nil {
		if err := m.Nr27.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "27")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr28(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr28) { // not required
		return nil
	}

	if m.Nr28 != nil {
		if err := m.Nr28.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "28")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr29(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr29) { // not required
		return nil
	}

	if m.Nr29 != nil {
		if err := m.Nr29.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "29")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr3(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr3) { // not required
		return nil
	}

	if m.Nr3 != nil {
		if err := m.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr30(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr30) { // not required
		return nil
	}

	if m.Nr30 != nil {
		if err := m.Nr30.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "30")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr31(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr31) { // not required
		return nil
	}

	if m.Nr31 != nil {
		if err := m.Nr31.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "31")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr32(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr32) { // not required
		return nil
	}

	if m.Nr32 != nil {
		if err := m.Nr32.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "32")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr33(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr33) { // not required
		return nil
	}

	if m.Nr33 != nil {
		if err := m.Nr33.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "33")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr34(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr34) { // not required
		return nil
	}

	if m.Nr34 != nil {
		if err := m.Nr34.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "34")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr35(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr35) { // not required
		return nil
	}

	if m.Nr35 != nil {
		if err := m.Nr35.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "35")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr36(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr36) { // not required
		return nil
	}

	if m.Nr36 != nil {
		if err := m.Nr36.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "36")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr37(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr37) { // not required
		return nil
	}

	if m.Nr37 != nil {
		if err := m.Nr37.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "37")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr38(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr38) { // not required
		return nil
	}

	if m.Nr38 != nil {
		if err := m.Nr38.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "38")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr39(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr39) { // not required
		return nil
	}

	if m.Nr39 != nil {
		if err := m.Nr39.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "39")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr4(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr4) { // not required
		return nil
	}

	if m.Nr4 != nil {
		if err := m.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr40(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr40) { // not required
		return nil
	}

	if m.Nr40 != nil {
		if err := m.Nr40.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "40")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr41(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr41) { // not required
		return nil
	}

	if m.Nr41 != nil {
		if err := m.Nr41.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "41")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr42(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr42) { // not required
		return nil
	}

	if m.Nr42 != nil {
		if err := m.Nr42.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "42")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr43(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr43) { // not required
		return nil
	}

	if m.Nr43 != nil {
		if err := m.Nr43.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "43")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr44(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr44) { // not required
		return nil
	}

	if m.Nr44 != nil {
		if err := m.Nr44.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "44")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr45(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr45) { // not required
		return nil
	}

	if m.Nr45 != nil {
		if err := m.Nr45.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "45")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr46(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr46) { // not required
		return nil
	}

	if m.Nr46 != nil {
		if err := m.Nr46.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "46")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr47(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr47) { // not required
		return nil
	}

	if m.Nr47 != nil {
		if err := m.Nr47.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "47")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr48(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr48) { // not required
		return nil
	}

	if m.Nr48 != nil {
		if err := m.Nr48.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "48")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr49(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr49) { // not required
		return nil
	}

	if m.Nr49 != nil {
		if err := m.Nr49.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "49")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr5(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr5) { // not required
		return nil
	}

	if m.Nr5 != nil {
		if err := m.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr50(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr50) { // not required
		return nil
	}

	if m.Nr50 != nil {
		if err := m.Nr50.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "50")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr51(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr51) { // not required
		return nil
	}

	if m.Nr51 != nil {
		if err := m.Nr51.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "51")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr52(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr52) { // not required
		return nil
	}

	if m.Nr52 != nil {
		if err := m.Nr52.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "52")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr53(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr53) { // not required
		return nil
	}

	if m.Nr53 != nil {
		if err := m.Nr53.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "53")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr54(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr54) { // not required
		return nil
	}

	if m.Nr54 != nil {
		if err := m.Nr54.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "54")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr55(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr55) { // not required
		return nil
	}

	if m.Nr55 != nil {
		if err := m.Nr55.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "55")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr56(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr56) { // not required
		return nil
	}

	if m.Nr56 != nil {
		if err := m.Nr56.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "56")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr57(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr57) { // not required
		return nil
	}

	if m.Nr57 != nil {
		if err := m.Nr57.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "57")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr58(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr58) { // not required
		return nil
	}

	if m.Nr58 != nil {
		if err := m.Nr58.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "58")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr59(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr59) { // not required
		return nil
	}

	if m.Nr59 != nil {
		if err := m.Nr59.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "59")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr6(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr6) { // not required
		return nil
	}

	if m.Nr6 != nil {
		if err := m.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr60(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr60) { // not required
		return nil
	}

	if m.Nr60 != nil {
		if err := m.Nr60.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "60")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr61(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr61) { // not required
		return nil
	}

	if m.Nr61 != nil {
		if err := m.Nr61.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "61")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr62(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr62) { // not required
		return nil
	}

	if m.Nr62 != nil {
		if err := m.Nr62.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "62")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr63(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr63) { // not required
		return nil
	}

	if m.Nr63 != nil {
		if err := m.Nr63.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "63")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr64(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr64) { // not required
		return nil
	}

	if m.Nr64 != nil {
		if err := m.Nr64.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "64")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr65(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr65) { // not required
		return nil
	}

	if m.Nr65 != nil {
		if err := m.Nr65.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "65")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr66(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr66) { // not required
		return nil
	}

	if m.Nr66 != nil {
		if err := m.Nr66.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "66")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr67(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr67) { // not required
		return nil
	}

	if m.Nr67 != nil {
		if err := m.Nr67.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "67")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr68(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr68) { // not required
		return nil
	}

	if m.Nr68 != nil {
		if err := m.Nr68.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "68")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr69(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr69) { // not required
		return nil
	}

	if m.Nr69 != nil {
		if err := m.Nr69.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "69")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr7(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr7) { // not required
		return nil
	}

	if m.Nr7 != nil {
		if err := m.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr70(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr70) { // not required
		return nil
	}

	if m.Nr70 != nil {
		if err := m.Nr70.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "70")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr71(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr71) { // not required
		return nil
	}

	if m.Nr71 != nil {
		if err := m.Nr71.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "71")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr72(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr72) { // not required
		return nil
	}

	if m.Nr72 != nil {
		if err := m.Nr72.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "72")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr73(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr73) { // not required
		return nil
	}

	if m.Nr73 != nil {
		if err := m.Nr73.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "73")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr74(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr74) { // not required
		return nil
	}

	if m.Nr74 != nil {
		if err := m.Nr74.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "74")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr75(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr75) { // not required
		return nil
	}

	if m.Nr75 != nil {
		if err := m.Nr75.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "75")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr76(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr76) { // not required
		return nil
	}

	if m.Nr76 != nil {
		if err := m.Nr76.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "76")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr77(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr77) { // not required
		return nil
	}

	if m.Nr77 != nil {
		if err := m.Nr77.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "77")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr78(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr78) { // not required
		return nil
	}

	if m.Nr78 != nil {
		if err := m.Nr78.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "78")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr79(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr79) { // not required
		return nil
	}

	if m.Nr79 != nil {
		if err := m.Nr79.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "79")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr8(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr8) { // not required
		return nil
	}

	if m.Nr8 != nil {
		if err := m.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr80(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr80) { // not required
		return nil
	}

	if m.Nr80 != nil {
		if err := m.Nr80.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "80")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr81(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr81) { // not required
		return nil
	}

	if m.Nr81 != nil {
		if err := m.Nr81.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "81")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr82(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr82) { // not required
		return nil
	}

	if m.Nr82 != nil {
		if err := m.Nr82.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "82")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr83(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr83) { // not required
		return nil
	}

	if m.Nr83 != nil {
		if err := m.Nr83.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "83")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr84(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr84) { // not required
		return nil
	}

	if m.Nr84 != nil {
		if err := m.Nr84.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "84")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr85(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr85) { // not required
		return nil
	}

	if m.Nr85 != nil {
		if err := m.Nr85.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "85")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr86(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr86) { // not required
		return nil
	}

	if m.Nr86 != nil {
		if err := m.Nr86.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "86")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr87(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr87) { // not required
		return nil
	}

	if m.Nr87 != nil {
		if err := m.Nr87.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "87")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr88(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr88) { // not required
		return nil
	}

	if m.Nr88 != nil {
		if err := m.Nr88.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "88")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr89(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr89) { // not required
		return nil
	}

	if m.Nr89 != nil {
		if err := m.Nr89.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "89")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr9(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr9) { // not required
		return nil
	}

	if m.Nr9 != nil {
		if err := m.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "9")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr90(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr90) { // not required
		return nil
	}

	if m.Nr90 != nil {
		if err := m.Nr90.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "90")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr91(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr91) { // not required
		return nil
	}

	if m.Nr91 != nil {
		if err := m.Nr91.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "91")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr92(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr92) { // not required
		return nil
	}

	if m.Nr92 != nil {
		if err := m.Nr92.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "92")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr93(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr93) { // not required
		return nil
	}

	if m.Nr93 != nil {
		if err := m.Nr93.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "93")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr94(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr94) { // not required
		return nil
	}

	if m.Nr94 != nil {
		if err := m.Nr94.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "94")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr95(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr95) { // not required
		return nil
	}

	if m.Nr95 != nil {
		if err := m.Nr95.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "95")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr96(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr96) { // not required
		return nil
	}

	if m.Nr96 != nil {
		if err := m.Nr96.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "96")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr97(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr97) { // not required
		return nil
	}

	if m.Nr97 != nil {
		if err := m.Nr97.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "97")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr98(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr98) { // not required
		return nil
	}

	if m.Nr98 != nil {
		if err := m.Nr98.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "98")
			}
			return err
		}
	}

	return nil
}

func (m *BattlePassLootResponseDataTiers) validateNr99(formats strfmt.Registry) error {

	if swag.IsZero(m.Nr99) { // not required
		return nil
	}

	if m.Nr99 != nil {
		if err := m.Nr99.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "tiers" + "." + "99")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiers) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr0 battle pass loot response data tiers nr0
//
// swagger:model BattlePassLootResponseDataTiersNr0
type BattlePassLootResponseDataTiersNr0 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr0 additional properties
	BattlePassLootResponseDataTiersNr0AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr0

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr0AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr0AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr0AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr0
func (m *BattlePassLootResponseDataTiersNr0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr0) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr1 battle pass loot response data tiers nr1
//
// swagger:model BattlePassLootResponseDataTiersNr1
type BattlePassLootResponseDataTiersNr1 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr1 additional properties
	BattlePassLootResponseDataTiersNr1AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr1

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr1AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr1AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr1AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr1
func (m *BattlePassLootResponseDataTiersNr1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr1) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr10 battle pass loot response data tiers nr10
//
// swagger:model BattlePassLootResponseDataTiersNr10
type BattlePassLootResponseDataTiersNr10 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr10 additional properties
	BattlePassLootResponseDataTiersNr10AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr10) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr10

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr10AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr10) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr10AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr10AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr10
func (m *BattlePassLootResponseDataTiersNr10) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr10) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr10) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr100 battle pass loot response data tiers nr100
//
// swagger:model BattlePassLootResponseDataTiersNr100
type BattlePassLootResponseDataTiersNr100 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr100 additional properties
	BattlePassLootResponseDataTiersNr100AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr100) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr100

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr100AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr100) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr100AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr100AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr100
func (m *BattlePassLootResponseDataTiersNr100) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr100) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr100) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr100
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr101 battle pass loot response data tiers nr101
//
// swagger:model BattlePassLootResponseDataTiersNr101
type BattlePassLootResponseDataTiersNr101 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr101 additional properties
	BattlePassLootResponseDataTiersNr101AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr101) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr101

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr101AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr101) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr101AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr101AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr101
func (m *BattlePassLootResponseDataTiersNr101) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr101) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr101) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr101
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr102 battle pass loot response data tiers nr102
//
// swagger:model BattlePassLootResponseDataTiersNr102
type BattlePassLootResponseDataTiersNr102 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr102 additional properties
	BattlePassLootResponseDataTiersNr102AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr102) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr102

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr102AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr102) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr102AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr102AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr102
func (m *BattlePassLootResponseDataTiersNr102) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr102) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr102) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr102
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr103 battle pass loot response data tiers nr103
//
// swagger:model BattlePassLootResponseDataTiersNr103
type BattlePassLootResponseDataTiersNr103 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr103 additional properties
	BattlePassLootResponseDataTiersNr103AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr103) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr103

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr103AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr103) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr103AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr103AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr103
func (m *BattlePassLootResponseDataTiersNr103) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr103) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr103) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr103
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr104 battle pass loot response data tiers nr104
//
// swagger:model BattlePassLootResponseDataTiersNr104
type BattlePassLootResponseDataTiersNr104 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr104 additional properties
	BattlePassLootResponseDataTiersNr104AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr104) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr104

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr104AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr104) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr104AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr104AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr104
func (m *BattlePassLootResponseDataTiersNr104) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr104) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr104) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr104
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr105 battle pass loot response data tiers nr105
//
// swagger:model BattlePassLootResponseDataTiersNr105
type BattlePassLootResponseDataTiersNr105 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr105 additional properties
	BattlePassLootResponseDataTiersNr105AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr105) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr105

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr105AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr105) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr105AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr105AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr105
func (m *BattlePassLootResponseDataTiersNr105) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr105) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr105) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr105
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr106 battle pass loot response data tiers nr106
//
// swagger:model BattlePassLootResponseDataTiersNr106
type BattlePassLootResponseDataTiersNr106 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr106 additional properties
	BattlePassLootResponseDataTiersNr106AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr106) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr106

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr106AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr106) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr106AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr106AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr106
func (m *BattlePassLootResponseDataTiersNr106) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr106) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr106) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr106
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr107 battle pass loot response data tiers nr107
//
// swagger:model BattlePassLootResponseDataTiersNr107
type BattlePassLootResponseDataTiersNr107 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr107 additional properties
	BattlePassLootResponseDataTiersNr107AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr107) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr107

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr107AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr107) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr107AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr107AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr107
func (m *BattlePassLootResponseDataTiersNr107) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr107) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr107) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr107
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr108 battle pass loot response data tiers nr108
//
// swagger:model BattlePassLootResponseDataTiersNr108
type BattlePassLootResponseDataTiersNr108 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr108 additional properties
	BattlePassLootResponseDataTiersNr108AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr108) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr108

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr108AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr108) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr108AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr108AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr108
func (m *BattlePassLootResponseDataTiersNr108) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr108) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr108) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr108
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr109 battle pass loot response data tiers nr109
//
// swagger:model BattlePassLootResponseDataTiersNr109
type BattlePassLootResponseDataTiersNr109 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr109 additional properties
	BattlePassLootResponseDataTiersNr109AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr109) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr109

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr109AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr109) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr109AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr109AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr109
func (m *BattlePassLootResponseDataTiersNr109) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr109) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr109) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr109
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr11 battle pass loot response data tiers nr11
//
// swagger:model BattlePassLootResponseDataTiersNr11
type BattlePassLootResponseDataTiersNr11 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr11 additional properties
	BattlePassLootResponseDataTiersNr11AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr11) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr11

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr11AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr11) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr11AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr11AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr11
func (m *BattlePassLootResponseDataTiersNr11) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr11) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr11) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr110 battle pass loot response data tiers nr110
//
// swagger:model BattlePassLootResponseDataTiersNr110
type BattlePassLootResponseDataTiersNr110 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr110 additional properties
	BattlePassLootResponseDataTiersNr110AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr110) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr110

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr110AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr110) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr110AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr110AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr110
func (m *BattlePassLootResponseDataTiersNr110) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr110) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr110) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr110
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr12 battle pass loot response data tiers nr12
//
// swagger:model BattlePassLootResponseDataTiersNr12
type BattlePassLootResponseDataTiersNr12 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr12 additional properties
	BattlePassLootResponseDataTiersNr12AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr12) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr12

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr12AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr12) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr12AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr12AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr12
func (m *BattlePassLootResponseDataTiersNr12) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr12) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr13 battle pass loot response data tiers nr13
//
// swagger:model BattlePassLootResponseDataTiersNr13
type BattlePassLootResponseDataTiersNr13 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr13 additional properties
	BattlePassLootResponseDataTiersNr13AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr13) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr13

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr13AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr13) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr13AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr13AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr13
func (m *BattlePassLootResponseDataTiersNr13) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr13) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr13) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr14 battle pass loot response data tiers nr14
//
// swagger:model BattlePassLootResponseDataTiersNr14
type BattlePassLootResponseDataTiersNr14 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr14 additional properties
	BattlePassLootResponseDataTiersNr14AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr14) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr14

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr14AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr14) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr14AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr14AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr14
func (m *BattlePassLootResponseDataTiersNr14) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr14) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr14) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr15 battle pass loot response data tiers nr15
//
// swagger:model BattlePassLootResponseDataTiersNr15
type BattlePassLootResponseDataTiersNr15 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr15 additional properties
	BattlePassLootResponseDataTiersNr15AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr15) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr15

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr15AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr15) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr15AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr15AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr15
func (m *BattlePassLootResponseDataTiersNr15) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr15) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr15) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr15
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr16 battle pass loot response data tiers nr16
//
// swagger:model BattlePassLootResponseDataTiersNr16
type BattlePassLootResponseDataTiersNr16 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr16 additional properties
	BattlePassLootResponseDataTiersNr16AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr16) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr16

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr16AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr16) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr16AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr16AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr16
func (m *BattlePassLootResponseDataTiersNr16) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr16) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr16) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr16
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr17 battle pass loot response data tiers nr17
//
// swagger:model BattlePassLootResponseDataTiersNr17
type BattlePassLootResponseDataTiersNr17 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr17 additional properties
	BattlePassLootResponseDataTiersNr17AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr17) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr17

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr17AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr17) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr17AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr17AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr17
func (m *BattlePassLootResponseDataTiersNr17) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr17) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr17) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr17
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr18 battle pass loot response data tiers nr18
//
// swagger:model BattlePassLootResponseDataTiersNr18
type BattlePassLootResponseDataTiersNr18 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr18 additional properties
	BattlePassLootResponseDataTiersNr18AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr18) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr18

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr18AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr18) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr18AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr18AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr18
func (m *BattlePassLootResponseDataTiersNr18) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr18) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr18) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr18
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr19 battle pass loot response data tiers nr19
//
// swagger:model BattlePassLootResponseDataTiersNr19
type BattlePassLootResponseDataTiersNr19 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr19 additional properties
	BattlePassLootResponseDataTiersNr19AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr19) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr19

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr19AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr19) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr19AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr19AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr19
func (m *BattlePassLootResponseDataTiersNr19) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr19) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr19) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr19
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr2 battle pass loot response data tiers nr2
//
// swagger:model BattlePassLootResponseDataTiersNr2
type BattlePassLootResponseDataTiersNr2 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr2 additional properties
	BattlePassLootResponseDataTiersNr2AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr2) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr2

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr2AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr2) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr2AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr2AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr2
func (m *BattlePassLootResponseDataTiersNr2) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr2) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr20 battle pass loot response data tiers nr20
//
// swagger:model BattlePassLootResponseDataTiersNr20
type BattlePassLootResponseDataTiersNr20 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr20 additional properties
	BattlePassLootResponseDataTiersNr20AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr20) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr20

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr20AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr20) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr20AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr20AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr20
func (m *BattlePassLootResponseDataTiersNr20) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr20) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr20) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr20
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr21 battle pass loot response data tiers nr21
//
// swagger:model BattlePassLootResponseDataTiersNr21
type BattlePassLootResponseDataTiersNr21 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr21 additional properties
	BattlePassLootResponseDataTiersNr21AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr21) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr21

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr21AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr21) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr21AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr21AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr21
func (m *BattlePassLootResponseDataTiersNr21) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr21) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr21) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr21
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr22 battle pass loot response data tiers nr22
//
// swagger:model BattlePassLootResponseDataTiersNr22
type BattlePassLootResponseDataTiersNr22 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr22 additional properties
	BattlePassLootResponseDataTiersNr22AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr22) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr22

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr22AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr22) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr22AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr22AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr22
func (m *BattlePassLootResponseDataTiersNr22) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr22) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr22) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr22
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr23 battle pass loot response data tiers nr23
//
// swagger:model BattlePassLootResponseDataTiersNr23
type BattlePassLootResponseDataTiersNr23 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr23 additional properties
	BattlePassLootResponseDataTiersNr23AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr23) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr23

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr23AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr23) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr23AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr23AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr23
func (m *BattlePassLootResponseDataTiersNr23) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr23) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr23) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr23
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr24 battle pass loot response data tiers nr24
//
// swagger:model BattlePassLootResponseDataTiersNr24
type BattlePassLootResponseDataTiersNr24 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr24 additional properties
	BattlePassLootResponseDataTiersNr24AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr24) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr24

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr24AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr24) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr24AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr24AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr24
func (m *BattlePassLootResponseDataTiersNr24) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr24) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr24) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr24
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr25 battle pass loot response data tiers nr25
//
// swagger:model BattlePassLootResponseDataTiersNr25
type BattlePassLootResponseDataTiersNr25 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr25 additional properties
	BattlePassLootResponseDataTiersNr25AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr25) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr25

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr25AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr25) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr25AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr25AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr25
func (m *BattlePassLootResponseDataTiersNr25) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr25) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr25) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr26 battle pass loot response data tiers nr26
//
// swagger:model BattlePassLootResponseDataTiersNr26
type BattlePassLootResponseDataTiersNr26 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr26 additional properties
	BattlePassLootResponseDataTiersNr26AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr26) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr26

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr26AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr26) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr26AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr26AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr26
func (m *BattlePassLootResponseDataTiersNr26) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr26) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr26) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr26
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr27 battle pass loot response data tiers nr27
//
// swagger:model BattlePassLootResponseDataTiersNr27
type BattlePassLootResponseDataTiersNr27 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr27 additional properties
	BattlePassLootResponseDataTiersNr27AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr27) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr27

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr27AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr27) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr27AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr27AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr27
func (m *BattlePassLootResponseDataTiersNr27) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr27) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr27) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr27
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr28 battle pass loot response data tiers nr28
//
// swagger:model BattlePassLootResponseDataTiersNr28
type BattlePassLootResponseDataTiersNr28 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr28 additional properties
	BattlePassLootResponseDataTiersNr28AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr28) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr28

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr28AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr28) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr28AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr28AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr28
func (m *BattlePassLootResponseDataTiersNr28) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr28) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr28) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr28
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr29 battle pass loot response data tiers nr29
//
// swagger:model BattlePassLootResponseDataTiersNr29
type BattlePassLootResponseDataTiersNr29 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr29 additional properties
	BattlePassLootResponseDataTiersNr29AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr29) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr29

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr29AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr29) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr29AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr29AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr29
func (m *BattlePassLootResponseDataTiersNr29) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr29) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr29) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr29
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr3 battle pass loot response data tiers nr3
//
// swagger:model BattlePassLootResponseDataTiersNr3
type BattlePassLootResponseDataTiersNr3 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr3 additional properties
	BattlePassLootResponseDataTiersNr3AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr3) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr3

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr3AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr3) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr3AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr3AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr3
func (m *BattlePassLootResponseDataTiersNr3) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr3) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr30 battle pass loot response data tiers nr30
//
// swagger:model BattlePassLootResponseDataTiersNr30
type BattlePassLootResponseDataTiersNr30 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr30 additional properties
	BattlePassLootResponseDataTiersNr30AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr30) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr30

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr30AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr30) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr30AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr30AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr30
func (m *BattlePassLootResponseDataTiersNr30) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr30) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr30) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr30
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr31 battle pass loot response data tiers nr31
//
// swagger:model BattlePassLootResponseDataTiersNr31
type BattlePassLootResponseDataTiersNr31 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr31 additional properties
	BattlePassLootResponseDataTiersNr31AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr31) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr31

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr31AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr31) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr31AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr31AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr31
func (m *BattlePassLootResponseDataTiersNr31) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr31) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr31) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr31
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr32 battle pass loot response data tiers nr32
//
// swagger:model BattlePassLootResponseDataTiersNr32
type BattlePassLootResponseDataTiersNr32 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr32 additional properties
	BattlePassLootResponseDataTiersNr32AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr32) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr32

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr32AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr32) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr32AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr32AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr32
func (m *BattlePassLootResponseDataTiersNr32) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr32) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr33 battle pass loot response data tiers nr33
//
// swagger:model BattlePassLootResponseDataTiersNr33
type BattlePassLootResponseDataTiersNr33 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr33 additional properties
	BattlePassLootResponseDataTiersNr33AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr33) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr33

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr33AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr33) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr33AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr33AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr33
func (m *BattlePassLootResponseDataTiersNr33) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr33) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr33) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr33
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr34 battle pass loot response data tiers nr34
//
// swagger:model BattlePassLootResponseDataTiersNr34
type BattlePassLootResponseDataTiersNr34 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr34 additional properties
	BattlePassLootResponseDataTiersNr34AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr34) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr34

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr34AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr34) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr34AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr34AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr34
func (m *BattlePassLootResponseDataTiersNr34) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr34) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr34) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr34
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr35 battle pass loot response data tiers nr35
//
// swagger:model BattlePassLootResponseDataTiersNr35
type BattlePassLootResponseDataTiersNr35 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr35 additional properties
	BattlePassLootResponseDataTiersNr35AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr35) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr35

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr35AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr35) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr35AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr35AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr35
func (m *BattlePassLootResponseDataTiersNr35) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr35) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr35) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr35
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr36 battle pass loot response data tiers nr36
//
// swagger:model BattlePassLootResponseDataTiersNr36
type BattlePassLootResponseDataTiersNr36 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr36 additional properties
	BattlePassLootResponseDataTiersNr36AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr36) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr36

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr36AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr36) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr36AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr36AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr36
func (m *BattlePassLootResponseDataTiersNr36) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr36) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr36) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr36
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr37 battle pass loot response data tiers nr37
//
// swagger:model BattlePassLootResponseDataTiersNr37
type BattlePassLootResponseDataTiersNr37 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr37 additional properties
	BattlePassLootResponseDataTiersNr37AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr37) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr37

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr37AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr37) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr37AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr37AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr37
func (m *BattlePassLootResponseDataTiersNr37) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr37) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr37) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr37
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr38 battle pass loot response data tiers nr38
//
// swagger:model BattlePassLootResponseDataTiersNr38
type BattlePassLootResponseDataTiersNr38 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr38 additional properties
	BattlePassLootResponseDataTiersNr38AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr38) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr38

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr38AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr38) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr38AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr38AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr38
func (m *BattlePassLootResponseDataTiersNr38) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr38) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr38) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr38
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr39 battle pass loot response data tiers nr39
//
// swagger:model BattlePassLootResponseDataTiersNr39
type BattlePassLootResponseDataTiersNr39 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr39 additional properties
	BattlePassLootResponseDataTiersNr39AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr39) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr39

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr39AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr39) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr39AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr39AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr39
func (m *BattlePassLootResponseDataTiersNr39) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr39) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr39) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr39
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr4 battle pass loot response data tiers nr4
//
// swagger:model BattlePassLootResponseDataTiersNr4
type BattlePassLootResponseDataTiersNr4 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr4 additional properties
	BattlePassLootResponseDataTiersNr4AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr4) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr4

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr4AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr4) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr4AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr4AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr4
func (m *BattlePassLootResponseDataTiersNr4) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr4) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr40 battle pass loot response data tiers nr40
//
// swagger:model BattlePassLootResponseDataTiersNr40
type BattlePassLootResponseDataTiersNr40 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr40 additional properties
	BattlePassLootResponseDataTiersNr40AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr40) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr40

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr40AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr40) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr40AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr40AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr40
func (m *BattlePassLootResponseDataTiersNr40) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr40) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr40) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr40
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr41 battle pass loot response data tiers nr41
//
// swagger:model BattlePassLootResponseDataTiersNr41
type BattlePassLootResponseDataTiersNr41 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr41 additional properties
	BattlePassLootResponseDataTiersNr41AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr41) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr41

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr41AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr41) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr41AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr41AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr41
func (m *BattlePassLootResponseDataTiersNr41) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr41) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr41) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr41
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr42 battle pass loot response data tiers nr42
//
// swagger:model BattlePassLootResponseDataTiersNr42
type BattlePassLootResponseDataTiersNr42 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr42 additional properties
	BattlePassLootResponseDataTiersNr42AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr42) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr42

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr42AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr42) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr42AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr42AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr42
func (m *BattlePassLootResponseDataTiersNr42) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr42) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr42) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr42
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr43 battle pass loot response data tiers nr43
//
// swagger:model BattlePassLootResponseDataTiersNr43
type BattlePassLootResponseDataTiersNr43 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr43 additional properties
	BattlePassLootResponseDataTiersNr43AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr43) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr43

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr43AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr43) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr43AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr43AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr43
func (m *BattlePassLootResponseDataTiersNr43) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr43) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr43) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr43
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr44 battle pass loot response data tiers nr44
//
// swagger:model BattlePassLootResponseDataTiersNr44
type BattlePassLootResponseDataTiersNr44 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr44 additional properties
	BattlePassLootResponseDataTiersNr44AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr44) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr44

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr44AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr44) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr44AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr44AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr44
func (m *BattlePassLootResponseDataTiersNr44) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr44) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr44) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr44
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr45 battle pass loot response data tiers nr45
//
// swagger:model BattlePassLootResponseDataTiersNr45
type BattlePassLootResponseDataTiersNr45 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr45 additional properties
	BattlePassLootResponseDataTiersNr45AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr45) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr45

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr45AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr45) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr45AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr45AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr45
func (m *BattlePassLootResponseDataTiersNr45) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr45) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr45) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr45
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr46 battle pass loot response data tiers nr46
//
// swagger:model BattlePassLootResponseDataTiersNr46
type BattlePassLootResponseDataTiersNr46 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr46 additional properties
	BattlePassLootResponseDataTiersNr46AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr46) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr46

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr46AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr46) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr46AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr46AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr46
func (m *BattlePassLootResponseDataTiersNr46) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr46) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr46) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr46
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr47 battle pass loot response data tiers nr47
//
// swagger:model BattlePassLootResponseDataTiersNr47
type BattlePassLootResponseDataTiersNr47 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr47 additional properties
	BattlePassLootResponseDataTiersNr47AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr47) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr47

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr47AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr47) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr47AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr47AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr47
func (m *BattlePassLootResponseDataTiersNr47) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr47) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr47) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr47
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr48 battle pass loot response data tiers nr48
//
// swagger:model BattlePassLootResponseDataTiersNr48
type BattlePassLootResponseDataTiersNr48 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr48 additional properties
	BattlePassLootResponseDataTiersNr48AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr48) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr48

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr48AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr48) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr48AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr48AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr48
func (m *BattlePassLootResponseDataTiersNr48) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr48) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr48) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr48
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr49 battle pass loot response data tiers nr49
//
// swagger:model BattlePassLootResponseDataTiersNr49
type BattlePassLootResponseDataTiersNr49 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr49 additional properties
	BattlePassLootResponseDataTiersNr49AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr49) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr49

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr49AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr49) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr49AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr49AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr49
func (m *BattlePassLootResponseDataTiersNr49) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr49) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr49) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr49
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr5 battle pass loot response data tiers nr5
//
// swagger:model BattlePassLootResponseDataTiersNr5
type BattlePassLootResponseDataTiersNr5 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr5 additional properties
	BattlePassLootResponseDataTiersNr5AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr5) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr5

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr5AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr5) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr5AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr5AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr5
func (m *BattlePassLootResponseDataTiersNr5) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr5) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr5) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr50 battle pass loot response data tiers nr50
//
// swagger:model BattlePassLootResponseDataTiersNr50
type BattlePassLootResponseDataTiersNr50 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr50 additional properties
	BattlePassLootResponseDataTiersNr50AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr50) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr50

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr50AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr50) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr50AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr50AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr50
func (m *BattlePassLootResponseDataTiersNr50) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr50) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr50) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr50
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr51 battle pass loot response data tiers nr51
//
// swagger:model BattlePassLootResponseDataTiersNr51
type BattlePassLootResponseDataTiersNr51 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr51 additional properties
	BattlePassLootResponseDataTiersNr51AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr51) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr51

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr51AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr51) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr51AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr51AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr51
func (m *BattlePassLootResponseDataTiersNr51) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr51) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr51) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr51
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr52 battle pass loot response data tiers nr52
//
// swagger:model BattlePassLootResponseDataTiersNr52
type BattlePassLootResponseDataTiersNr52 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr52 additional properties
	BattlePassLootResponseDataTiersNr52AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr52) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr52

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr52AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr52) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr52AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr52AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr52
func (m *BattlePassLootResponseDataTiersNr52) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr52) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr52) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr52
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr53 battle pass loot response data tiers nr53
//
// swagger:model BattlePassLootResponseDataTiersNr53
type BattlePassLootResponseDataTiersNr53 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr53 additional properties
	BattlePassLootResponseDataTiersNr53AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr53) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr53

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr53AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr53) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr53AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr53AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr53
func (m *BattlePassLootResponseDataTiersNr53) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr53) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr53) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr53
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr54 battle pass loot response data tiers nr54
//
// swagger:model BattlePassLootResponseDataTiersNr54
type BattlePassLootResponseDataTiersNr54 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr54 additional properties
	BattlePassLootResponseDataTiersNr54AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr54) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr54

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr54AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr54) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr54AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr54AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr54
func (m *BattlePassLootResponseDataTiersNr54) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr54) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr54) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr54
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr55 battle pass loot response data tiers nr55
//
// swagger:model BattlePassLootResponseDataTiersNr55
type BattlePassLootResponseDataTiersNr55 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr55 additional properties
	BattlePassLootResponseDataTiersNr55AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr55) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr55

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr55AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr55) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr55AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr55AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr55
func (m *BattlePassLootResponseDataTiersNr55) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr55) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr55) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr55
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr56 battle pass loot response data tiers nr56
//
// swagger:model BattlePassLootResponseDataTiersNr56
type BattlePassLootResponseDataTiersNr56 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr56 additional properties
	BattlePassLootResponseDataTiersNr56AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr56) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr56

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr56AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr56) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr56AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr56AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr56
func (m *BattlePassLootResponseDataTiersNr56) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr56) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr56) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr56
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr57 battle pass loot response data tiers nr57
//
// swagger:model BattlePassLootResponseDataTiersNr57
type BattlePassLootResponseDataTiersNr57 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr57 additional properties
	BattlePassLootResponseDataTiersNr57AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr57) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr57

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr57AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr57) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr57AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr57AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr57
func (m *BattlePassLootResponseDataTiersNr57) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr57) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr57) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr57
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr58 battle pass loot response data tiers nr58
//
// swagger:model BattlePassLootResponseDataTiersNr58
type BattlePassLootResponseDataTiersNr58 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr58 additional properties
	BattlePassLootResponseDataTiersNr58AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr58) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr58

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr58AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr58) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr58AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr58AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr58
func (m *BattlePassLootResponseDataTiersNr58) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr58) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr58) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr58
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr59 battle pass loot response data tiers nr59
//
// swagger:model BattlePassLootResponseDataTiersNr59
type BattlePassLootResponseDataTiersNr59 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr59 additional properties
	BattlePassLootResponseDataTiersNr59AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr59) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr59

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr59AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr59) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr59AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr59AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr59
func (m *BattlePassLootResponseDataTiersNr59) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr59) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr59) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr59
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr6 battle pass loot response data tiers nr6
//
// swagger:model BattlePassLootResponseDataTiersNr6
type BattlePassLootResponseDataTiersNr6 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr6 additional properties
	BattlePassLootResponseDataTiersNr6AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr6) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr6

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr6AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr6) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr6AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr6AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr6
func (m *BattlePassLootResponseDataTiersNr6) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr6) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr60 battle pass loot response data tiers nr60
//
// swagger:model BattlePassLootResponseDataTiersNr60
type BattlePassLootResponseDataTiersNr60 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr60 additional properties
	BattlePassLootResponseDataTiersNr60AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr60) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr60

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr60AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr60) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr60AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr60AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr60
func (m *BattlePassLootResponseDataTiersNr60) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr60) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr60) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr60
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr61 battle pass loot response data tiers nr61
//
// swagger:model BattlePassLootResponseDataTiersNr61
type BattlePassLootResponseDataTiersNr61 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr61 additional properties
	BattlePassLootResponseDataTiersNr61AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr61) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr61

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr61AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr61) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr61AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr61AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr61
func (m *BattlePassLootResponseDataTiersNr61) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr61) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr61) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr61
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr62 battle pass loot response data tiers nr62
//
// swagger:model BattlePassLootResponseDataTiersNr62
type BattlePassLootResponseDataTiersNr62 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr62 additional properties
	BattlePassLootResponseDataTiersNr62AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr62) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr62

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr62AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr62) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr62AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr62AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr62
func (m *BattlePassLootResponseDataTiersNr62) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr62) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr62) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr62
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr63 battle pass loot response data tiers nr63
//
// swagger:model BattlePassLootResponseDataTiersNr63
type BattlePassLootResponseDataTiersNr63 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr63 additional properties
	BattlePassLootResponseDataTiersNr63AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr63) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr63

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr63AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr63) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr63AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr63AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr63
func (m *BattlePassLootResponseDataTiersNr63) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr63) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr63) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr63
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr64 battle pass loot response data tiers nr64
//
// swagger:model BattlePassLootResponseDataTiersNr64
type BattlePassLootResponseDataTiersNr64 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr64 additional properties
	BattlePassLootResponseDataTiersNr64AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr64) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr64

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr64AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr64) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr64AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr64AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr64
func (m *BattlePassLootResponseDataTiersNr64) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr64) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr64) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr64
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr65 battle pass loot response data tiers nr65
//
// swagger:model BattlePassLootResponseDataTiersNr65
type BattlePassLootResponseDataTiersNr65 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr65 additional properties
	BattlePassLootResponseDataTiersNr65AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr65) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr65

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr65AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr65) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr65AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr65AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr65
func (m *BattlePassLootResponseDataTiersNr65) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr65) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr65) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr65
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr66 battle pass loot response data tiers nr66
//
// swagger:model BattlePassLootResponseDataTiersNr66
type BattlePassLootResponseDataTiersNr66 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr66 additional properties
	BattlePassLootResponseDataTiersNr66AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr66) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr66

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr66AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr66) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr66AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr66AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr66
func (m *BattlePassLootResponseDataTiersNr66) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr66) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr66) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr66
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr67 battle pass loot response data tiers nr67
//
// swagger:model BattlePassLootResponseDataTiersNr67
type BattlePassLootResponseDataTiersNr67 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr67 additional properties
	BattlePassLootResponseDataTiersNr67AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr67) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr67

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr67AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr67) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr67AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr67AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr67
func (m *BattlePassLootResponseDataTiersNr67) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr67) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr67) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr67
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr68 battle pass loot response data tiers nr68
//
// swagger:model BattlePassLootResponseDataTiersNr68
type BattlePassLootResponseDataTiersNr68 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr68 additional properties
	BattlePassLootResponseDataTiersNr68AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr68) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr68

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr68AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr68) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr68AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr68AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr68
func (m *BattlePassLootResponseDataTiersNr68) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr68) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr68) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr68
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr69 battle pass loot response data tiers nr69
//
// swagger:model BattlePassLootResponseDataTiersNr69
type BattlePassLootResponseDataTiersNr69 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr69 additional properties
	BattlePassLootResponseDataTiersNr69AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr69) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr69

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr69AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr69) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr69AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr69AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr69
func (m *BattlePassLootResponseDataTiersNr69) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr69) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr69) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr69
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr7 battle pass loot response data tiers nr7
//
// swagger:model BattlePassLootResponseDataTiersNr7
type BattlePassLootResponseDataTiersNr7 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr7 additional properties
	BattlePassLootResponseDataTiersNr7AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr7) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr7

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr7AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr7) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr7AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr7AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr7
func (m *BattlePassLootResponseDataTiersNr7) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr7) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr70 battle pass loot response data tiers nr70
//
// swagger:model BattlePassLootResponseDataTiersNr70
type BattlePassLootResponseDataTiersNr70 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr70 additional properties
	BattlePassLootResponseDataTiersNr70AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr70) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr70

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr70AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr70) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr70AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr70AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr70
func (m *BattlePassLootResponseDataTiersNr70) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr70) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr70) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr70
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr71 battle pass loot response data tiers nr71
//
// swagger:model BattlePassLootResponseDataTiersNr71
type BattlePassLootResponseDataTiersNr71 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr71 additional properties
	BattlePassLootResponseDataTiersNr71AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr71) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr71

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr71AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr71) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr71AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr71AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr71
func (m *BattlePassLootResponseDataTiersNr71) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr71) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr71) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr71
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr72 battle pass loot response data tiers nr72
//
// swagger:model BattlePassLootResponseDataTiersNr72
type BattlePassLootResponseDataTiersNr72 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr72 additional properties
	BattlePassLootResponseDataTiersNr72AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr72) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr72

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr72AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr72) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr72AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr72AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr72
func (m *BattlePassLootResponseDataTiersNr72) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr72) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr72) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr72
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr73 battle pass loot response data tiers nr73
//
// swagger:model BattlePassLootResponseDataTiersNr73
type BattlePassLootResponseDataTiersNr73 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr73 additional properties
	BattlePassLootResponseDataTiersNr73AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr73) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr73

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr73AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr73) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr73AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr73AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr73
func (m *BattlePassLootResponseDataTiersNr73) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr73) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr73) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr73
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr74 battle pass loot response data tiers nr74
//
// swagger:model BattlePassLootResponseDataTiersNr74
type BattlePassLootResponseDataTiersNr74 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr74 additional properties
	BattlePassLootResponseDataTiersNr74AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr74) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr74

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr74AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr74) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr74AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr74AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr74
func (m *BattlePassLootResponseDataTiersNr74) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr74) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr74) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr74
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr75 battle pass loot response data tiers nr75
//
// swagger:model BattlePassLootResponseDataTiersNr75
type BattlePassLootResponseDataTiersNr75 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr75 additional properties
	BattlePassLootResponseDataTiersNr75AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr75) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr75

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr75AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr75) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr75AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr75AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr75
func (m *BattlePassLootResponseDataTiersNr75) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr75) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr75) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr75
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr76 battle pass loot response data tiers nr76
//
// swagger:model BattlePassLootResponseDataTiersNr76
type BattlePassLootResponseDataTiersNr76 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr76 additional properties
	BattlePassLootResponseDataTiersNr76AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr76) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr76

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr76AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr76) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr76AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr76AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr76
func (m *BattlePassLootResponseDataTiersNr76) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr76) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr76) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr76
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr77 battle pass loot response data tiers nr77
//
// swagger:model BattlePassLootResponseDataTiersNr77
type BattlePassLootResponseDataTiersNr77 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr77 additional properties
	BattlePassLootResponseDataTiersNr77AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr77) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr77

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr77AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr77) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr77AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr77AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr77
func (m *BattlePassLootResponseDataTiersNr77) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr77) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr77) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr77
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr78 battle pass loot response data tiers nr78
//
// swagger:model BattlePassLootResponseDataTiersNr78
type BattlePassLootResponseDataTiersNr78 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr78 additional properties
	BattlePassLootResponseDataTiersNr78AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr78) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr78

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr78AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr78) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr78AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr78AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr78
func (m *BattlePassLootResponseDataTiersNr78) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr78) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr78) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr78
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr79 battle pass loot response data tiers nr79
//
// swagger:model BattlePassLootResponseDataTiersNr79
type BattlePassLootResponseDataTiersNr79 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr79 additional properties
	BattlePassLootResponseDataTiersNr79AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr79) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr79

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr79AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr79) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr79AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr79AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr79
func (m *BattlePassLootResponseDataTiersNr79) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr79) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr79) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr79
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr8 battle pass loot response data tiers nr8
//
// swagger:model BattlePassLootResponseDataTiersNr8
type BattlePassLootResponseDataTiersNr8 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr8 additional properties
	BattlePassLootResponseDataTiersNr8AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr8) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr8

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr8AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr8) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr8AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr8AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr8
func (m *BattlePassLootResponseDataTiersNr8) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr8) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr8) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr80 battle pass loot response data tiers nr80
//
// swagger:model BattlePassLootResponseDataTiersNr80
type BattlePassLootResponseDataTiersNr80 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr80 additional properties
	BattlePassLootResponseDataTiersNr80AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr80) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr80

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr80AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr80) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr80AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr80AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr80
func (m *BattlePassLootResponseDataTiersNr80) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr80) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr80) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr80
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr81 battle pass loot response data tiers nr81
//
// swagger:model BattlePassLootResponseDataTiersNr81
type BattlePassLootResponseDataTiersNr81 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr81 additional properties
	BattlePassLootResponseDataTiersNr81AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr81) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr81

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr81AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr81) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr81AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr81AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr81
func (m *BattlePassLootResponseDataTiersNr81) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr81) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr81) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr81
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr82 battle pass loot response data tiers nr82
//
// swagger:model BattlePassLootResponseDataTiersNr82
type BattlePassLootResponseDataTiersNr82 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr82 additional properties
	BattlePassLootResponseDataTiersNr82AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr82) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr82

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr82AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr82) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr82AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr82AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr82
func (m *BattlePassLootResponseDataTiersNr82) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr82) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr82) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr82
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr83 battle pass loot response data tiers nr83
//
// swagger:model BattlePassLootResponseDataTiersNr83
type BattlePassLootResponseDataTiersNr83 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr83 additional properties
	BattlePassLootResponseDataTiersNr83AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr83) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr83

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr83AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr83) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr83AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr83AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr83
func (m *BattlePassLootResponseDataTiersNr83) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr83) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr83) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr83
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr84 battle pass loot response data tiers nr84
//
// swagger:model BattlePassLootResponseDataTiersNr84
type BattlePassLootResponseDataTiersNr84 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr84 additional properties
	BattlePassLootResponseDataTiersNr84AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr84) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr84

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr84AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr84) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr84AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr84AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr84
func (m *BattlePassLootResponseDataTiersNr84) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr84) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr84) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr84
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr85 battle pass loot response data tiers nr85
//
// swagger:model BattlePassLootResponseDataTiersNr85
type BattlePassLootResponseDataTiersNr85 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr85 additional properties
	BattlePassLootResponseDataTiersNr85AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr85) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr85

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr85AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr85) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr85AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr85AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr85
func (m *BattlePassLootResponseDataTiersNr85) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr85) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr85) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr85
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr86 battle pass loot response data tiers nr86
//
// swagger:model BattlePassLootResponseDataTiersNr86
type BattlePassLootResponseDataTiersNr86 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr86 additional properties
	BattlePassLootResponseDataTiersNr86AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr86) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr86

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr86AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr86) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr86AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr86AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr86
func (m *BattlePassLootResponseDataTiersNr86) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr86) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr86) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr86
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr87 battle pass loot response data tiers nr87
//
// swagger:model BattlePassLootResponseDataTiersNr87
type BattlePassLootResponseDataTiersNr87 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr87 additional properties
	BattlePassLootResponseDataTiersNr87AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr87) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr87

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr87AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr87) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr87AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr87AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr87
func (m *BattlePassLootResponseDataTiersNr87) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr87) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr87) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr87
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr88 battle pass loot response data tiers nr88
//
// swagger:model BattlePassLootResponseDataTiersNr88
type BattlePassLootResponseDataTiersNr88 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr88 additional properties
	BattlePassLootResponseDataTiersNr88AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr88) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr88

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr88AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr88) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr88AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr88AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr88
func (m *BattlePassLootResponseDataTiersNr88) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr88) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr88) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr88
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr89 battle pass loot response data tiers nr89
//
// swagger:model BattlePassLootResponseDataTiersNr89
type BattlePassLootResponseDataTiersNr89 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr89 additional properties
	BattlePassLootResponseDataTiersNr89AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr89) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr89

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr89AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr89) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr89AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr89AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr89
func (m *BattlePassLootResponseDataTiersNr89) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr89) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr89) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr89
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr9 battle pass loot response data tiers nr9
//
// swagger:model BattlePassLootResponseDataTiersNr9
type BattlePassLootResponseDataTiersNr9 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr9 additional properties
	BattlePassLootResponseDataTiersNr9AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr9) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr9

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr9AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr9) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr9AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr9AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr9
func (m *BattlePassLootResponseDataTiersNr9) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr9) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr9) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr90 battle pass loot response data tiers nr90
//
// swagger:model BattlePassLootResponseDataTiersNr90
type BattlePassLootResponseDataTiersNr90 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr90 additional properties
	BattlePassLootResponseDataTiersNr90AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr90) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr90

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr90AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr90) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr90AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr90AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr90
func (m *BattlePassLootResponseDataTiersNr90) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr90) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr90) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr90
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr91 battle pass loot response data tiers nr91
//
// swagger:model BattlePassLootResponseDataTiersNr91
type BattlePassLootResponseDataTiersNr91 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr91 additional properties
	BattlePassLootResponseDataTiersNr91AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr91) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr91

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr91AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr91) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr91AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr91AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr91
func (m *BattlePassLootResponseDataTiersNr91) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr91) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr91) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr91
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr92 battle pass loot response data tiers nr92
//
// swagger:model BattlePassLootResponseDataTiersNr92
type BattlePassLootResponseDataTiersNr92 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr92 additional properties
	BattlePassLootResponseDataTiersNr92AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr92) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr92

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr92AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr92) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr92AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr92AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr92
func (m *BattlePassLootResponseDataTiersNr92) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr92) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr92) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr92
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr93 battle pass loot response data tiers nr93
//
// swagger:model BattlePassLootResponseDataTiersNr93
type BattlePassLootResponseDataTiersNr93 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr93 additional properties
	BattlePassLootResponseDataTiersNr93AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr93) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr93

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr93AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr93) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr93AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr93AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr93
func (m *BattlePassLootResponseDataTiersNr93) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr93) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr93) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr93
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr94 battle pass loot response data tiers nr94
//
// swagger:model BattlePassLootResponseDataTiersNr94
type BattlePassLootResponseDataTiersNr94 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr94 additional properties
	BattlePassLootResponseDataTiersNr94AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr94) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr94

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr94AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr94) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr94AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr94AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr94
func (m *BattlePassLootResponseDataTiersNr94) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr94) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr94) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr94
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr95 battle pass loot response data tiers nr95
//
// swagger:model BattlePassLootResponseDataTiersNr95
type BattlePassLootResponseDataTiersNr95 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr95 additional properties
	BattlePassLootResponseDataTiersNr95AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr95) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr95

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr95AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr95) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr95AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr95AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr95
func (m *BattlePassLootResponseDataTiersNr95) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr95) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr95) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr95
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr96 battle pass loot response data tiers nr96
//
// swagger:model BattlePassLootResponseDataTiersNr96
type BattlePassLootResponseDataTiersNr96 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr96 additional properties
	BattlePassLootResponseDataTiersNr96AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr96) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr96

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr96AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr96) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr96AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr96AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr96
func (m *BattlePassLootResponseDataTiersNr96) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr96) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr96) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr96
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr97 battle pass loot response data tiers nr97
//
// swagger:model BattlePassLootResponseDataTiersNr97
type BattlePassLootResponseDataTiersNr97 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr97 additional properties
	BattlePassLootResponseDataTiersNr97AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr97) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr97

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr97AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr97) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr97AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr97AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr97
func (m *BattlePassLootResponseDataTiersNr97) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr97) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr97) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr97
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr98 battle pass loot response data tiers nr98
//
// swagger:model BattlePassLootResponseDataTiersNr98
type BattlePassLootResponseDataTiersNr98 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr98 additional properties
	BattlePassLootResponseDataTiersNr98AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr98) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr98

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr98AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr98) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr98AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr98AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr98
func (m *BattlePassLootResponseDataTiersNr98) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr98) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr98) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr98
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BattlePassLootResponseDataTiersNr99 battle pass loot response data tiers nr99
//
// swagger:model BattlePassLootResponseDataTiersNr99
type BattlePassLootResponseDataTiersNr99 struct {

	// description body
	DescriptionBody string `json:"descriptionBody,omitempty"`

	// description title
	DescriptionTitle string `json:"descriptionTitle,omitempty"`

	// exclusive title
	ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

	// free
	Free string `json:"free,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image detail
	ImageDetail string `json:"imageDetail,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rarity
	Rarity string `json:"rarity,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// battle pass loot response data tiers nr99 additional properties
	BattlePassLootResponseDataTiersNr99AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *BattlePassLootResponseDataTiersNr99) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv BattlePassLootResponseDataTiersNr99

	rcv.DescriptionBody = stage1.DescriptionBody
	rcv.DescriptionTitle = stage1.DescriptionTitle
	rcv.ExclusiveTitle = stage1.ExclusiveTitle
	rcv.Free = stage1.Free
	rcv.Image = stage1.Image
	rcv.ImageDetail = stage1.ImageDetail
	rcv.Label = stage1.Label
	rcv.Name = stage1.Name
	rcv.Rarity = stage1.Rarity
	rcv.Tier = stage1.Tier
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "descriptionBody")
	delete(stage2, "descriptionTitle")
	delete(stage2, "exclusiveTitle")
	delete(stage2, "free")
	delete(stage2, "image")
	delete(stage2, "imageDetail")
	delete(stage2, "label")
	delete(stage2, "name")
	delete(stage2, "rarity")
	delete(stage2, "tier")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.BattlePassLootResponseDataTiersNr99AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m BattlePassLootResponseDataTiersNr99) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// description body
		DescriptionBody string `json:"descriptionBody,omitempty"`

		// description title
		DescriptionTitle string `json:"descriptionTitle,omitempty"`

		// exclusive title
		ExclusiveTitle string `json:"exclusiveTitle,omitempty"`

		// free
		Free string `json:"free,omitempty"`

		// image
		Image string `json:"image,omitempty"`

		// image detail
		ImageDetail string `json:"imageDetail,omitempty"`

		// label
		Label string `json:"label,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// rarity
		Rarity string `json:"rarity,omitempty"`

		// tier
		Tier string `json:"tier,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.DescriptionBody = m.DescriptionBody
	stage1.DescriptionTitle = m.DescriptionTitle
	stage1.ExclusiveTitle = m.ExclusiveTitle
	stage1.Free = m.Free
	stage1.Image = m.Image
	stage1.ImageDetail = m.ImageDetail
	stage1.Label = m.Label
	stage1.Name = m.Name
	stage1.Rarity = m.Rarity
	stage1.Tier = m.Tier
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.BattlePassLootResponseDataTiersNr99AdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.BattlePassLootResponseDataTiersNr99AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this battle pass loot response data tiers nr99
func (m *BattlePassLootResponseDataTiersNr99) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr99) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BattlePassLootResponseDataTiersNr99) UnmarshalBinary(b []byte) error {
	var res BattlePassLootResponseDataTiersNr99
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
