// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PurchasableResponse purchasable response
//
// swagger:model purchasableResponse
type PurchasableResponse struct {

	// data
	Data *PurchasableResponseData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// purchasable response additional properties
	PurchasableResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PurchasableResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// data
		Data *PurchasableResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PurchasableResponse

	rcv.Data = stage1.Data
	rcv.Status = stage1.Status
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "data")
	delete(stage2, "status")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PurchasableResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PurchasableResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// data
		Data *PurchasableResponseData `json:"data,omitempty"`

		// status
		Status string `json:"status,omitempty"`
	}

	stage1.Data = m.Data
	stage1.Status = m.Status

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PurchasableResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PurchasableResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this purchasable response
func (m *PurchasableResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasableResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchasableResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasableResponse) UnmarshalBinary(b []byte) error {
	var res PurchasableResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasableResponseData purchasable response data
//
// swagger:model PurchasableResponseData
type PurchasableResponseData struct {

	// loot stream
	LootStream map[string]map[string]PurchasableItem `json:"lootStream,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// store
	Store interface{} `json:"store,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// purchasable response data additional properties
	PurchasableResponseDataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PurchasableResponseData) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// loot stream
		LootStream map[string]map[string]PurchasableItem `json:"lootStream,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// store
		Store interface{} `json:"store,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PurchasableResponseData

	rcv.LootStream = stage1.LootStream
	rcv.Message = stage1.Message
	rcv.Store = stage1.Store
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "lootStream")
	delete(stage2, "message")
	delete(stage2, "store")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PurchasableResponseDataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PurchasableResponseData) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// loot stream
		LootStream map[string]map[string]PurchasableItem `json:"lootStream,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// store
		Store interface{} `json:"store,omitempty"`

		// type
		Type string `json:"type,omitempty"`
	}

	stage1.LootStream = m.LootStream
	stage1.Message = m.Message
	stage1.Store = m.Store
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PurchasableResponseDataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PurchasableResponseDataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this purchasable response data
func (m *PurchasableResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLootStream(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasableResponseData) validateLootStream(formats strfmt.Registry) error {

	if swag.IsZero(m.LootStream) { // not required
		return nil
	}

	for k := range m.LootStream {

		for kk := range m.LootStream[k] {

			if swag.IsZero(m.LootStream[k][kk]) { // not required
				continue
			}
			if val, ok := m.LootStream[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchasableResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasableResponseData) UnmarshalBinary(b []byte) error {
	var res PurchasableResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasableItem purchasable item
//
// swagger:model PurchasableItem
type PurchasableItem struct {

	// background image
	BackgroundImage string `json:"backgroundImage,omitempty"`

	// costs
	Costs *PurchasableResponseDataLootStreamAnonCosts `json:"costs,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// items
	Items string `json:"items,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// logo image
	LogoImage string `json:"logoImage,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this purchasable item
func (m *PurchasableItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasableItem) validateCosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Costs) { // not required
		return nil
	}

	if m.Costs != nil {
		if err := m.Costs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchasableItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasableItem) UnmarshalBinary(b []byte) error {
	var res PurchasableItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasableResponseDataLootStreamAnonCosts purchasable response data loot stream anon costs
//
// swagger:model PurchasableResponseDataLootStreamAnonCosts
type PurchasableResponseDataLootStreamAnonCosts struct {

	// c o d points
	CODPoints int64 `json:"CODPoints,omitempty"`

	// purchasable response data loot stream anon costs additional properties
	PurchasableResponseDataLootStreamAnonCostsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PurchasableResponseDataLootStreamAnonCosts) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// c o d points
		CODPoints int64 `json:"CODPoints,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PurchasableResponseDataLootStreamAnonCosts

	rcv.CODPoints = stage1.CODPoints
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "CODPoints")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PurchasableResponseDataLootStreamAnonCostsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PurchasableResponseDataLootStreamAnonCosts) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// c o d points
		CODPoints int64 `json:"CODPoints,omitempty"`
	}

	stage1.CODPoints = m.CODPoints

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PurchasableResponseDataLootStreamAnonCostsAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PurchasableResponseDataLootStreamAnonCostsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this purchasable response data loot stream anon costs
func (m *PurchasableResponseDataLootStreamAnonCosts) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PurchasableResponseDataLootStreamAnonCosts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasableResponseDataLootStreamAnonCosts) UnmarshalBinary(b []byte) error {
	var res PurchasableResponseDataLootStreamAnonCosts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
