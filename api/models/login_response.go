// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoginResponse login response
//
// swagger:model loginResponse
type LoginResponse struct {

	// a c t a u t h t o k e n
	ACTAUTHTOKEN string `json:"ACT_AUTH_TOKEN,omitempty"`

	// a c t s s o c o o k i e
	ACTSSOCOOKIE string `json:"ACT_SSO_COOKIE,omitempty"`

	// a c t s s o c o o k i e e x p i r y
	ACTSSOCOOKIEEXPIRY int64 `json:"ACT_SSO_COOKIE_EXPIRY,omitempty"`

	// atkn
	Atkn string `json:"atkn,omitempty"`

	// game account linked
	GameAccountLinked bool `json:"gameAccountLinked,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// rtkn
	Rtkn string `json:"rtkn,omitempty"`

	// s a c t s s o c o o k i e
	SACTSSOCOOKIE string `json:"s_ACT_SSO_COOKIE,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// login response additional properties
	LoginResponseAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *LoginResponse) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// a c t a u t h t o k e n
		ACTAUTHTOKEN string `json:"ACT_AUTH_TOKEN,omitempty"`

		// a c t s s o c o o k i e
		ACTSSOCOOKIE string `json:"ACT_SSO_COOKIE,omitempty"`

		// a c t s s o c o o k i e e x p i r y
		ACTSSOCOOKIEEXPIRY int64 `json:"ACT_SSO_COOKIE_EXPIRY,omitempty"`

		// atkn
		Atkn string `json:"atkn,omitempty"`

		// game account linked
		GameAccountLinked bool `json:"gameAccountLinked,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// rtkn
		Rtkn string `json:"rtkn,omitempty"`

		// s a c t s s o c o o k i e
		SACTSSOCOOKIE string `json:"s_ACT_SSO_COOKIE,omitempty"`

		// status
		Status int64 `json:"status,omitempty"`

		// success
		Success bool `json:"success,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv LoginResponse

	rcv.ACTAUTHTOKEN = stage1.ACTAUTHTOKEN
	rcv.ACTSSOCOOKIE = stage1.ACTSSOCOOKIE
	rcv.ACTSSOCOOKIEEXPIRY = stage1.ACTSSOCOOKIEEXPIRY
	rcv.Atkn = stage1.Atkn
	rcv.GameAccountLinked = stage1.GameAccountLinked
	rcv.Message = stage1.Message
	rcv.Rtkn = stage1.Rtkn
	rcv.SACTSSOCOOKIE = stage1.SACTSSOCOOKIE
	rcv.Status = stage1.Status
	rcv.Success = stage1.Success
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ACT_AUTH_TOKEN")
	delete(stage2, "ACT_SSO_COOKIE")
	delete(stage2, "ACT_SSO_COOKIE_EXPIRY")
	delete(stage2, "atkn")
	delete(stage2, "gameAccountLinked")
	delete(stage2, "message")
	delete(stage2, "rtkn")
	delete(stage2, "s_ACT_SSO_COOKIE")
	delete(stage2, "status")
	delete(stage2, "success")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.LoginResponseAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m LoginResponse) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// a c t a u t h t o k e n
		ACTAUTHTOKEN string `json:"ACT_AUTH_TOKEN,omitempty"`

		// a c t s s o c o o k i e
		ACTSSOCOOKIE string `json:"ACT_SSO_COOKIE,omitempty"`

		// a c t s s o c o o k i e e x p i r y
		ACTSSOCOOKIEEXPIRY int64 `json:"ACT_SSO_COOKIE_EXPIRY,omitempty"`

		// atkn
		Atkn string `json:"atkn,omitempty"`

		// game account linked
		GameAccountLinked bool `json:"gameAccountLinked,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// rtkn
		Rtkn string `json:"rtkn,omitempty"`

		// s a c t s s o c o o k i e
		SACTSSOCOOKIE string `json:"s_ACT_SSO_COOKIE,omitempty"`

		// status
		Status int64 `json:"status,omitempty"`

		// success
		Success bool `json:"success,omitempty"`
	}

	stage1.ACTAUTHTOKEN = m.ACTAUTHTOKEN
	stage1.ACTSSOCOOKIE = m.ACTSSOCOOKIE
	stage1.ACTSSOCOOKIEEXPIRY = m.ACTSSOCOOKIEEXPIRY
	stage1.Atkn = m.Atkn
	stage1.GameAccountLinked = m.GameAccountLinked
	stage1.Message = m.Message
	stage1.Rtkn = m.Rtkn
	stage1.SACTSSOCOOKIE = m.SACTSSOCOOKIE
	stage1.Status = m.Status
	stage1.Success = m.Success

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.LoginResponseAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.LoginResponseAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this login response
func (m *LoginResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LoginResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoginResponse) UnmarshalBinary(b []byte) error {
	var res LoginResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
